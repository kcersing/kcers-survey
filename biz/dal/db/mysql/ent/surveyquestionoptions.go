// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestion"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestionoptions"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SurveyQuestionOptions is the model entity for the SurveyQuestionOptions schema.
type SurveyQuestionOptions struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[0:禁用;1:正常]
	Status int64 `json:"status,omitempty"`
	// survey_question_id
	SurveyQuestionID int64 `json:"survey_question_id,omitempty"`
	// serial
	Serial string `json:"serial,omitempty"`
	// content
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurveyQuestionOptionsQuery when eager-loading is set.
	Edges        SurveyQuestionOptionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SurveyQuestionOptionsEdges holds the relations/edges for other nodes in the graph.
type SurveyQuestionOptionsEdges struct {
	// Question holds the value of the question edge.
	Question *SurveyQuestion `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyQuestionOptionsEdges) QuestionOrErr() (*SurveyQuestion, error) {
	if e.Question != nil {
		return e.Question, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: surveyquestion.Label}
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SurveyQuestionOptions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case surveyquestionoptions.FieldID, surveyquestionoptions.FieldDelete, surveyquestionoptions.FieldCreatedID, surveyquestionoptions.FieldStatus, surveyquestionoptions.FieldSurveyQuestionID:
			values[i] = new(sql.NullInt64)
		case surveyquestionoptions.FieldSerial, surveyquestionoptions.FieldContent:
			values[i] = new(sql.NullString)
		case surveyquestionoptions.FieldCreatedAt, surveyquestionoptions.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SurveyQuestionOptions fields.
func (sqo *SurveyQuestionOptions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case surveyquestionoptions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sqo.ID = int64(value.Int64)
		case surveyquestionoptions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sqo.CreatedAt = value.Time
			}
		case surveyquestionoptions.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sqo.UpdatedAt = value.Time
			}
		case surveyquestionoptions.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				sqo.Delete = value.Int64
			}
		case surveyquestionoptions.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				sqo.CreatedID = value.Int64
			}
		case surveyquestionoptions.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sqo.Status = value.Int64
			}
		case surveyquestionoptions.FieldSurveyQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field survey_question_id", values[i])
			} else if value.Valid {
				sqo.SurveyQuestionID = value.Int64
			}
		case surveyquestionoptions.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				sqo.Serial = value.String
			}
		case surveyquestionoptions.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				sqo.Content = value.String
			}
		default:
			sqo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SurveyQuestionOptions.
// This includes values selected through modifiers, order, etc.
func (sqo *SurveyQuestionOptions) Value(name string) (ent.Value, error) {
	return sqo.selectValues.Get(name)
}

// QueryQuestion queries the "question" edge of the SurveyQuestionOptions entity.
func (sqo *SurveyQuestionOptions) QueryQuestion() *SurveyQuestionQuery {
	return NewSurveyQuestionOptionsClient(sqo.config).QueryQuestion(sqo)
}

// Update returns a builder for updating this SurveyQuestionOptions.
// Note that you need to call SurveyQuestionOptions.Unwrap() before calling this method if this SurveyQuestionOptions
// was returned from a transaction, and the transaction was committed or rolled back.
func (sqo *SurveyQuestionOptions) Update() *SurveyQuestionOptionsUpdateOne {
	return NewSurveyQuestionOptionsClient(sqo.config).UpdateOne(sqo)
}

// Unwrap unwraps the SurveyQuestionOptions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sqo *SurveyQuestionOptions) Unwrap() *SurveyQuestionOptions {
	_tx, ok := sqo.config.driver.(*txDriver)
	if !ok {
		panic("ent: SurveyQuestionOptions is not a transactional entity")
	}
	sqo.config.driver = _tx.drv
	return sqo
}

// String implements the fmt.Stringer.
func (sqo *SurveyQuestionOptions) String() string {
	var builder strings.Builder
	builder.WriteString("SurveyQuestionOptions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sqo.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sqo.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sqo.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", sqo.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", sqo.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sqo.Status))
	builder.WriteString(", ")
	builder.WriteString("survey_question_id=")
	builder.WriteString(fmt.Sprintf("%v", sqo.SurveyQuestionID))
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(sqo.Serial)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(sqo.Content)
	builder.WriteByte(')')
	return builder.String()
}

// SurveyQuestionOptionsSlice is a parsable slice of SurveyQuestionOptions.
type SurveyQuestionOptionsSlice []*SurveyQuestionOptions
