// Code generated by ent, DO NOT EDIT.

package surveyresponseanswers

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the surveyresponseanswers type in the database.
	Label = "survey_response_answers"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDelete holds the string denoting the delete field in the database.
	FieldDelete = "delete"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSurveyID holds the string denoting the survey_id field in the database.
	FieldSurveyID = "survey_id"
	// FieldSurveyResponseID holds the string denoting the survey_response_id field in the database.
	FieldSurveyResponseID = "survey_response_id"
	// FieldSurveyQuestionID holds the string denoting the survey_question_id field in the database.
	FieldSurveyQuestionID = "survey_question_id"
	// FieldAnswerText holds the string denoting the answer_text field in the database.
	FieldAnswerText = "answer_text"
	// FieldAnswerValue holds the string denoting the answer_value field in the database.
	FieldAnswerValue = "answer_value"
	// Table holds the table name of the surveyresponseanswers in the database.
	Table = "survey_response_answers"
)

// Columns holds all SQL columns for surveyresponseanswers fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDelete,
	FieldCreatedID,
	FieldStatus,
	FieldSurveyID,
	FieldSurveyResponseID,
	FieldSurveyQuestionID,
	FieldAnswerText,
	FieldAnswerValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDelete holds the default value on creation for the "delete" field.
	DefaultDelete int64
	// DefaultCreatedID holds the default value on creation for the "created_id" field.
	DefaultCreatedID int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultSurveyID holds the default value on creation for the "survey_id" field.
	DefaultSurveyID int64
	// DefaultSurveyResponseID holds the default value on creation for the "survey_response_id" field.
	DefaultSurveyResponseID int64
	// DefaultSurveyQuestionID holds the default value on creation for the "survey_question_id" field.
	DefaultSurveyQuestionID int64
	// DefaultAnswerValue holds the default value on creation for the "answer_value" field.
	DefaultAnswerValue int64
)

// OrderOption defines the ordering options for the SurveyResponseAnswers queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDelete orders the results by the delete field.
func ByDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelete, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySurveyID orders the results by the survey_id field.
func BySurveyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurveyID, opts...).ToFunc()
}

// BySurveyResponseID orders the results by the survey_response_id field.
func BySurveyResponseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurveyResponseID, opts...).ToFunc()
}

// BySurveyQuestionID orders the results by the survey_question_id field.
func BySurveyQuestionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurveyQuestionID, opts...).ToFunc()
}

// ByAnswerText orders the results by the answer_text field.
func ByAnswerText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnswerText, opts...).ToFunc()
}

// ByAnswerValue orders the results by the answer_value field.
func ByAnswerValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnswerValue, opts...).ToFunc()
}
