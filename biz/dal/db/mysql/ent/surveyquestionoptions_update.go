// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/predicate"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestion"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestionoptions"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyQuestionOptionsUpdate is the builder for updating SurveyQuestionOptions entities.
type SurveyQuestionOptionsUpdate struct {
	config
	hooks     []Hook
	mutation  *SurveyQuestionOptionsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SurveyQuestionOptionsUpdate builder.
func (sqou *SurveyQuestionOptionsUpdate) Where(ps ...predicate.SurveyQuestionOptions) *SurveyQuestionOptionsUpdate {
	sqou.mutation.Where(ps...)
	return sqou
}

// SetUpdatedAt sets the "updated_at" field.
func (sqou *SurveyQuestionOptionsUpdate) SetUpdatedAt(t time.Time) *SurveyQuestionOptionsUpdate {
	sqou.mutation.SetUpdatedAt(t)
	return sqou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sqou *SurveyQuestionOptionsUpdate) ClearUpdatedAt() *SurveyQuestionOptionsUpdate {
	sqou.mutation.ClearUpdatedAt()
	return sqou
}

// SetDelete sets the "delete" field.
func (sqou *SurveyQuestionOptionsUpdate) SetDelete(i int64) *SurveyQuestionOptionsUpdate {
	sqou.mutation.ResetDelete()
	sqou.mutation.SetDelete(i)
	return sqou
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (sqou *SurveyQuestionOptionsUpdate) SetNillableDelete(i *int64) *SurveyQuestionOptionsUpdate {
	if i != nil {
		sqou.SetDelete(*i)
	}
	return sqou
}

// AddDelete adds i to the "delete" field.
func (sqou *SurveyQuestionOptionsUpdate) AddDelete(i int64) *SurveyQuestionOptionsUpdate {
	sqou.mutation.AddDelete(i)
	return sqou
}

// ClearDelete clears the value of the "delete" field.
func (sqou *SurveyQuestionOptionsUpdate) ClearDelete() *SurveyQuestionOptionsUpdate {
	sqou.mutation.ClearDelete()
	return sqou
}

// SetCreatedID sets the "created_id" field.
func (sqou *SurveyQuestionOptionsUpdate) SetCreatedID(i int64) *SurveyQuestionOptionsUpdate {
	sqou.mutation.ResetCreatedID()
	sqou.mutation.SetCreatedID(i)
	return sqou
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (sqou *SurveyQuestionOptionsUpdate) SetNillableCreatedID(i *int64) *SurveyQuestionOptionsUpdate {
	if i != nil {
		sqou.SetCreatedID(*i)
	}
	return sqou
}

// AddCreatedID adds i to the "created_id" field.
func (sqou *SurveyQuestionOptionsUpdate) AddCreatedID(i int64) *SurveyQuestionOptionsUpdate {
	sqou.mutation.AddCreatedID(i)
	return sqou
}

// ClearCreatedID clears the value of the "created_id" field.
func (sqou *SurveyQuestionOptionsUpdate) ClearCreatedID() *SurveyQuestionOptionsUpdate {
	sqou.mutation.ClearCreatedID()
	return sqou
}

// SetStatus sets the "status" field.
func (sqou *SurveyQuestionOptionsUpdate) SetStatus(i int64) *SurveyQuestionOptionsUpdate {
	sqou.mutation.ResetStatus()
	sqou.mutation.SetStatus(i)
	return sqou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sqou *SurveyQuestionOptionsUpdate) SetNillableStatus(i *int64) *SurveyQuestionOptionsUpdate {
	if i != nil {
		sqou.SetStatus(*i)
	}
	return sqou
}

// AddStatus adds i to the "status" field.
func (sqou *SurveyQuestionOptionsUpdate) AddStatus(i int64) *SurveyQuestionOptionsUpdate {
	sqou.mutation.AddStatus(i)
	return sqou
}

// ClearStatus clears the value of the "status" field.
func (sqou *SurveyQuestionOptionsUpdate) ClearStatus() *SurveyQuestionOptionsUpdate {
	sqou.mutation.ClearStatus()
	return sqou
}

// SetSurveyQuestionID sets the "survey_question_id" field.
func (sqou *SurveyQuestionOptionsUpdate) SetSurveyQuestionID(i int64) *SurveyQuestionOptionsUpdate {
	sqou.mutation.SetSurveyQuestionID(i)
	return sqou
}

// SetNillableSurveyQuestionID sets the "survey_question_id" field if the given value is not nil.
func (sqou *SurveyQuestionOptionsUpdate) SetNillableSurveyQuestionID(i *int64) *SurveyQuestionOptionsUpdate {
	if i != nil {
		sqou.SetSurveyQuestionID(*i)
	}
	return sqou
}

// ClearSurveyQuestionID clears the value of the "survey_question_id" field.
func (sqou *SurveyQuestionOptionsUpdate) ClearSurveyQuestionID() *SurveyQuestionOptionsUpdate {
	sqou.mutation.ClearSurveyQuestionID()
	return sqou
}

// SetSerial sets the "serial" field.
func (sqou *SurveyQuestionOptionsUpdate) SetSerial(s string) *SurveyQuestionOptionsUpdate {
	sqou.mutation.SetSerial(s)
	return sqou
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (sqou *SurveyQuestionOptionsUpdate) SetNillableSerial(s *string) *SurveyQuestionOptionsUpdate {
	if s != nil {
		sqou.SetSerial(*s)
	}
	return sqou
}

// ClearSerial clears the value of the "serial" field.
func (sqou *SurveyQuestionOptionsUpdate) ClearSerial() *SurveyQuestionOptionsUpdate {
	sqou.mutation.ClearSerial()
	return sqou
}

// SetContent sets the "content" field.
func (sqou *SurveyQuestionOptionsUpdate) SetContent(s string) *SurveyQuestionOptionsUpdate {
	sqou.mutation.SetContent(s)
	return sqou
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (sqou *SurveyQuestionOptionsUpdate) SetNillableContent(s *string) *SurveyQuestionOptionsUpdate {
	if s != nil {
		sqou.SetContent(*s)
	}
	return sqou
}

// ClearContent clears the value of the "content" field.
func (sqou *SurveyQuestionOptionsUpdate) ClearContent() *SurveyQuestionOptionsUpdate {
	sqou.mutation.ClearContent()
	return sqou
}

// SetQuestionID sets the "question" edge to the SurveyQuestion entity by ID.
func (sqou *SurveyQuestionOptionsUpdate) SetQuestionID(id int64) *SurveyQuestionOptionsUpdate {
	sqou.mutation.SetQuestionID(id)
	return sqou
}

// SetNillableQuestionID sets the "question" edge to the SurveyQuestion entity by ID if the given value is not nil.
func (sqou *SurveyQuestionOptionsUpdate) SetNillableQuestionID(id *int64) *SurveyQuestionOptionsUpdate {
	if id != nil {
		sqou = sqou.SetQuestionID(*id)
	}
	return sqou
}

// SetQuestion sets the "question" edge to the SurveyQuestion entity.
func (sqou *SurveyQuestionOptionsUpdate) SetQuestion(s *SurveyQuestion) *SurveyQuestionOptionsUpdate {
	return sqou.SetQuestionID(s.ID)
}

// Mutation returns the SurveyQuestionOptionsMutation object of the builder.
func (sqou *SurveyQuestionOptionsUpdate) Mutation() *SurveyQuestionOptionsMutation {
	return sqou.mutation
}

// ClearQuestion clears the "question" edge to the SurveyQuestion entity.
func (sqou *SurveyQuestionOptionsUpdate) ClearQuestion() *SurveyQuestionOptionsUpdate {
	sqou.mutation.ClearQuestion()
	return sqou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sqou *SurveyQuestionOptionsUpdate) Save(ctx context.Context) (int, error) {
	sqou.defaults()
	return withHooks(ctx, sqou.sqlSave, sqou.mutation, sqou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sqou *SurveyQuestionOptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := sqou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sqou *SurveyQuestionOptionsUpdate) Exec(ctx context.Context) error {
	_, err := sqou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqou *SurveyQuestionOptionsUpdate) ExecX(ctx context.Context) {
	if err := sqou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sqou *SurveyQuestionOptionsUpdate) defaults() {
	if _, ok := sqou.mutation.UpdatedAt(); !ok && !sqou.mutation.UpdatedAtCleared() {
		v := surveyquestionoptions.UpdateDefaultUpdatedAt()
		sqou.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sqou *SurveyQuestionOptionsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyQuestionOptionsUpdate {
	sqou.modifiers = append(sqou.modifiers, modifiers...)
	return sqou
}

func (sqou *SurveyQuestionOptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyquestionoptions.Table, surveyquestionoptions.Columns, sqlgraph.NewFieldSpec(surveyquestionoptions.FieldID, field.TypeInt64))
	if ps := sqou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sqou.mutation.CreatedAtCleared() {
		_spec.ClearField(surveyquestionoptions.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sqou.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyquestionoptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if sqou.mutation.UpdatedAtCleared() {
		_spec.ClearField(surveyquestionoptions.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sqou.mutation.Delete(); ok {
		_spec.SetField(surveyquestionoptions.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := sqou.mutation.AddedDelete(); ok {
		_spec.AddField(surveyquestionoptions.FieldDelete, field.TypeInt64, value)
	}
	if sqou.mutation.DeleteCleared() {
		_spec.ClearField(surveyquestionoptions.FieldDelete, field.TypeInt64)
	}
	if value, ok := sqou.mutation.CreatedID(); ok {
		_spec.SetField(surveyquestionoptions.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := sqou.mutation.AddedCreatedID(); ok {
		_spec.AddField(surveyquestionoptions.FieldCreatedID, field.TypeInt64, value)
	}
	if sqou.mutation.CreatedIDCleared() {
		_spec.ClearField(surveyquestionoptions.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := sqou.mutation.Status(); ok {
		_spec.SetField(surveyquestionoptions.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := sqou.mutation.AddedStatus(); ok {
		_spec.AddField(surveyquestionoptions.FieldStatus, field.TypeInt64, value)
	}
	if sqou.mutation.StatusCleared() {
		_spec.ClearField(surveyquestionoptions.FieldStatus, field.TypeInt64)
	}
	if value, ok := sqou.mutation.Serial(); ok {
		_spec.SetField(surveyquestionoptions.FieldSerial, field.TypeString, value)
	}
	if sqou.mutation.SerialCleared() {
		_spec.ClearField(surveyquestionoptions.FieldSerial, field.TypeString)
	}
	if value, ok := sqou.mutation.Content(); ok {
		_spec.SetField(surveyquestionoptions.FieldContent, field.TypeString, value)
	}
	if sqou.mutation.ContentCleared() {
		_spec.ClearField(surveyquestionoptions.FieldContent, field.TypeString)
	}
	if sqou.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestionoptions.QuestionTable,
			Columns: []string{surveyquestionoptions.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sqou.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestionoptions.QuestionTable,
			Columns: []string{surveyquestionoptions.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sqou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sqou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyquestionoptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sqou.mutation.done = true
	return n, nil
}

// SurveyQuestionOptionsUpdateOne is the builder for updating a single SurveyQuestionOptions entity.
type SurveyQuestionOptionsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SurveyQuestionOptionsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetUpdatedAt(t time.Time) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.SetUpdatedAt(t)
	return sqouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) ClearUpdatedAt() *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ClearUpdatedAt()
	return sqouo
}

// SetDelete sets the "delete" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetDelete(i int64) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ResetDelete()
	sqouo.mutation.SetDelete(i)
	return sqouo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetNillableDelete(i *int64) *SurveyQuestionOptionsUpdateOne {
	if i != nil {
		sqouo.SetDelete(*i)
	}
	return sqouo
}

// AddDelete adds i to the "delete" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) AddDelete(i int64) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.AddDelete(i)
	return sqouo
}

// ClearDelete clears the value of the "delete" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) ClearDelete() *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ClearDelete()
	return sqouo
}

// SetCreatedID sets the "created_id" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetCreatedID(i int64) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ResetCreatedID()
	sqouo.mutation.SetCreatedID(i)
	return sqouo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetNillableCreatedID(i *int64) *SurveyQuestionOptionsUpdateOne {
	if i != nil {
		sqouo.SetCreatedID(*i)
	}
	return sqouo
}

// AddCreatedID adds i to the "created_id" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) AddCreatedID(i int64) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.AddCreatedID(i)
	return sqouo
}

// ClearCreatedID clears the value of the "created_id" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) ClearCreatedID() *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ClearCreatedID()
	return sqouo
}

// SetStatus sets the "status" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetStatus(i int64) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ResetStatus()
	sqouo.mutation.SetStatus(i)
	return sqouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetNillableStatus(i *int64) *SurveyQuestionOptionsUpdateOne {
	if i != nil {
		sqouo.SetStatus(*i)
	}
	return sqouo
}

// AddStatus adds i to the "status" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) AddStatus(i int64) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.AddStatus(i)
	return sqouo
}

// ClearStatus clears the value of the "status" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) ClearStatus() *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ClearStatus()
	return sqouo
}

// SetSurveyQuestionID sets the "survey_question_id" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetSurveyQuestionID(i int64) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.SetSurveyQuestionID(i)
	return sqouo
}

// SetNillableSurveyQuestionID sets the "survey_question_id" field if the given value is not nil.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetNillableSurveyQuestionID(i *int64) *SurveyQuestionOptionsUpdateOne {
	if i != nil {
		sqouo.SetSurveyQuestionID(*i)
	}
	return sqouo
}

// ClearSurveyQuestionID clears the value of the "survey_question_id" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) ClearSurveyQuestionID() *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ClearSurveyQuestionID()
	return sqouo
}

// SetSerial sets the "serial" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetSerial(s string) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.SetSerial(s)
	return sqouo
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetNillableSerial(s *string) *SurveyQuestionOptionsUpdateOne {
	if s != nil {
		sqouo.SetSerial(*s)
	}
	return sqouo
}

// ClearSerial clears the value of the "serial" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) ClearSerial() *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ClearSerial()
	return sqouo
}

// SetContent sets the "content" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetContent(s string) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.SetContent(s)
	return sqouo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetNillableContent(s *string) *SurveyQuestionOptionsUpdateOne {
	if s != nil {
		sqouo.SetContent(*s)
	}
	return sqouo
}

// ClearContent clears the value of the "content" field.
func (sqouo *SurveyQuestionOptionsUpdateOne) ClearContent() *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ClearContent()
	return sqouo
}

// SetQuestionID sets the "question" edge to the SurveyQuestion entity by ID.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetQuestionID(id int64) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.SetQuestionID(id)
	return sqouo
}

// SetNillableQuestionID sets the "question" edge to the SurveyQuestion entity by ID if the given value is not nil.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetNillableQuestionID(id *int64) *SurveyQuestionOptionsUpdateOne {
	if id != nil {
		sqouo = sqouo.SetQuestionID(*id)
	}
	return sqouo
}

// SetQuestion sets the "question" edge to the SurveyQuestion entity.
func (sqouo *SurveyQuestionOptionsUpdateOne) SetQuestion(s *SurveyQuestion) *SurveyQuestionOptionsUpdateOne {
	return sqouo.SetQuestionID(s.ID)
}

// Mutation returns the SurveyQuestionOptionsMutation object of the builder.
func (sqouo *SurveyQuestionOptionsUpdateOne) Mutation() *SurveyQuestionOptionsMutation {
	return sqouo.mutation
}

// ClearQuestion clears the "question" edge to the SurveyQuestion entity.
func (sqouo *SurveyQuestionOptionsUpdateOne) ClearQuestion() *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.ClearQuestion()
	return sqouo
}

// Where appends a list predicates to the SurveyQuestionOptionsUpdate builder.
func (sqouo *SurveyQuestionOptionsUpdateOne) Where(ps ...predicate.SurveyQuestionOptions) *SurveyQuestionOptionsUpdateOne {
	sqouo.mutation.Where(ps...)
	return sqouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sqouo *SurveyQuestionOptionsUpdateOne) Select(field string, fields ...string) *SurveyQuestionOptionsUpdateOne {
	sqouo.fields = append([]string{field}, fields...)
	return sqouo
}

// Save executes the query and returns the updated SurveyQuestionOptions entity.
func (sqouo *SurveyQuestionOptionsUpdateOne) Save(ctx context.Context) (*SurveyQuestionOptions, error) {
	sqouo.defaults()
	return withHooks(ctx, sqouo.sqlSave, sqouo.mutation, sqouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sqouo *SurveyQuestionOptionsUpdateOne) SaveX(ctx context.Context) *SurveyQuestionOptions {
	node, err := sqouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sqouo *SurveyQuestionOptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := sqouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqouo *SurveyQuestionOptionsUpdateOne) ExecX(ctx context.Context) {
	if err := sqouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sqouo *SurveyQuestionOptionsUpdateOne) defaults() {
	if _, ok := sqouo.mutation.UpdatedAt(); !ok && !sqouo.mutation.UpdatedAtCleared() {
		v := surveyquestionoptions.UpdateDefaultUpdatedAt()
		sqouo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sqouo *SurveyQuestionOptionsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyQuestionOptionsUpdateOne {
	sqouo.modifiers = append(sqouo.modifiers, modifiers...)
	return sqouo
}

func (sqouo *SurveyQuestionOptionsUpdateOne) sqlSave(ctx context.Context) (_node *SurveyQuestionOptions, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyquestionoptions.Table, surveyquestionoptions.Columns, sqlgraph.NewFieldSpec(surveyquestionoptions.FieldID, field.TypeInt64))
	id, ok := sqouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SurveyQuestionOptions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sqouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, surveyquestionoptions.FieldID)
		for _, f := range fields {
			if !surveyquestionoptions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != surveyquestionoptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sqouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sqouo.mutation.CreatedAtCleared() {
		_spec.ClearField(surveyquestionoptions.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sqouo.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyquestionoptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if sqouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(surveyquestionoptions.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sqouo.mutation.Delete(); ok {
		_spec.SetField(surveyquestionoptions.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := sqouo.mutation.AddedDelete(); ok {
		_spec.AddField(surveyquestionoptions.FieldDelete, field.TypeInt64, value)
	}
	if sqouo.mutation.DeleteCleared() {
		_spec.ClearField(surveyquestionoptions.FieldDelete, field.TypeInt64)
	}
	if value, ok := sqouo.mutation.CreatedID(); ok {
		_spec.SetField(surveyquestionoptions.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := sqouo.mutation.AddedCreatedID(); ok {
		_spec.AddField(surveyquestionoptions.FieldCreatedID, field.TypeInt64, value)
	}
	if sqouo.mutation.CreatedIDCleared() {
		_spec.ClearField(surveyquestionoptions.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := sqouo.mutation.Status(); ok {
		_spec.SetField(surveyquestionoptions.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := sqouo.mutation.AddedStatus(); ok {
		_spec.AddField(surveyquestionoptions.FieldStatus, field.TypeInt64, value)
	}
	if sqouo.mutation.StatusCleared() {
		_spec.ClearField(surveyquestionoptions.FieldStatus, field.TypeInt64)
	}
	if value, ok := sqouo.mutation.Serial(); ok {
		_spec.SetField(surveyquestionoptions.FieldSerial, field.TypeString, value)
	}
	if sqouo.mutation.SerialCleared() {
		_spec.ClearField(surveyquestionoptions.FieldSerial, field.TypeString)
	}
	if value, ok := sqouo.mutation.Content(); ok {
		_spec.SetField(surveyquestionoptions.FieldContent, field.TypeString, value)
	}
	if sqouo.mutation.ContentCleared() {
		_spec.ClearField(surveyquestionoptions.FieldContent, field.TypeString)
	}
	if sqouo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestionoptions.QuestionTable,
			Columns: []string{surveyquestionoptions.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sqouo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestionoptions.QuestionTable,
			Columns: []string{surveyquestionoptions.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sqouo.modifiers...)
	_node = &SurveyQuestionOptions{config: sqouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sqouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyquestionoptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sqouo.mutation.done = true
	return _node, nil
}
