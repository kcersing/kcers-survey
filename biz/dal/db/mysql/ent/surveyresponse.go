// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/surveyresponse"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SurveyResponse is the model entity for the SurveyResponse schema.
type SurveyResponse struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[0:禁用;1:正常]
	Status int64 `json:"status,omitempty"`
	// survey_id
	SurveyID int64 `json:"survey_id,omitempty"`
	// 受访人
	Respondent string `json:"respondent,omitempty"`
	// 用户IP地址
	IP string `json:"ip,omitempty"`
	// 用户地图坐标
	Map string `json:"map,omitempty"`
	// 设备信息
	Device string `json:"device,omitempty"`
	// 音频
	Audio        string `json:"audio,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SurveyResponse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case surveyresponse.FieldID, surveyresponse.FieldDelete, surveyresponse.FieldCreatedID, surveyresponse.FieldStatus, surveyresponse.FieldSurveyID:
			values[i] = new(sql.NullInt64)
		case surveyresponse.FieldRespondent, surveyresponse.FieldIP, surveyresponse.FieldMap, surveyresponse.FieldDevice, surveyresponse.FieldAudio:
			values[i] = new(sql.NullString)
		case surveyresponse.FieldCreatedAt, surveyresponse.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SurveyResponse fields.
func (sr *SurveyResponse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case surveyresponse.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int64(value.Int64)
		case surveyresponse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case surveyresponse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Time
			}
		case surveyresponse.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				sr.Delete = value.Int64
			}
		case surveyresponse.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				sr.CreatedID = value.Int64
			}
		case surveyresponse.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sr.Status = value.Int64
			}
		case surveyresponse.FieldSurveyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field survey_id", values[i])
			} else if value.Valid {
				sr.SurveyID = value.Int64
			}
		case surveyresponse.FieldRespondent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field respondent", values[i])
			} else if value.Valid {
				sr.Respondent = value.String
			}
		case surveyresponse.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				sr.IP = value.String
			}
		case surveyresponse.FieldMap:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field map", values[i])
			} else if value.Valid {
				sr.Map = value.String
			}
		case surveyresponse.FieldDevice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device", values[i])
			} else if value.Valid {
				sr.Device = value.String
			}
		case surveyresponse.FieldAudio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field audio", values[i])
			} else if value.Valid {
				sr.Audio = value.String
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SurveyResponse.
// This includes values selected through modifiers, order, etc.
func (sr *SurveyResponse) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// Update returns a builder for updating this SurveyResponse.
// Note that you need to call SurveyResponse.Unwrap() before calling this method if this SurveyResponse
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SurveyResponse) Update() *SurveyResponseUpdateOne {
	return NewSurveyResponseClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the SurveyResponse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SurveyResponse) Unwrap() *SurveyResponse {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SurveyResponse is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SurveyResponse) String() string {
	var builder strings.Builder
	builder.WriteString("SurveyResponse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", sr.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sr.Status))
	builder.WriteString(", ")
	builder.WriteString("survey_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.SurveyID))
	builder.WriteString(", ")
	builder.WriteString("respondent=")
	builder.WriteString(sr.Respondent)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(sr.IP)
	builder.WriteString(", ")
	builder.WriteString("map=")
	builder.WriteString(sr.Map)
	builder.WriteString(", ")
	builder.WriteString("device=")
	builder.WriteString(sr.Device)
	builder.WriteString(", ")
	builder.WriteString("audio=")
	builder.WriteString(sr.Audio)
	builder.WriteByte(')')
	return builder.String()
}

// SurveyResponses is a parsable slice of SurveyResponse.
type SurveyResponses []*SurveyResponse
