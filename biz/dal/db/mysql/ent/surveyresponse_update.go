// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/predicate"
	"kcers-survey/biz/dal/db/mysql/ent/surveyresponse"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyResponseUpdate is the builder for updating SurveyResponse entities.
type SurveyResponseUpdate struct {
	config
	hooks     []Hook
	mutation  *SurveyResponseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SurveyResponseUpdate builder.
func (sru *SurveyResponseUpdate) Where(ps ...predicate.SurveyResponse) *SurveyResponseUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *SurveyResponseUpdate) SetUpdatedAt(t time.Time) *SurveyResponseUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sru *SurveyResponseUpdate) ClearUpdatedAt() *SurveyResponseUpdate {
	sru.mutation.ClearUpdatedAt()
	return sru
}

// SetDelete sets the "delete" field.
func (sru *SurveyResponseUpdate) SetDelete(i int64) *SurveyResponseUpdate {
	sru.mutation.ResetDelete()
	sru.mutation.SetDelete(i)
	return sru
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableDelete(i *int64) *SurveyResponseUpdate {
	if i != nil {
		sru.SetDelete(*i)
	}
	return sru
}

// AddDelete adds i to the "delete" field.
func (sru *SurveyResponseUpdate) AddDelete(i int64) *SurveyResponseUpdate {
	sru.mutation.AddDelete(i)
	return sru
}

// ClearDelete clears the value of the "delete" field.
func (sru *SurveyResponseUpdate) ClearDelete() *SurveyResponseUpdate {
	sru.mutation.ClearDelete()
	return sru
}

// SetCreatedID sets the "created_id" field.
func (sru *SurveyResponseUpdate) SetCreatedID(i int64) *SurveyResponseUpdate {
	sru.mutation.ResetCreatedID()
	sru.mutation.SetCreatedID(i)
	return sru
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableCreatedID(i *int64) *SurveyResponseUpdate {
	if i != nil {
		sru.SetCreatedID(*i)
	}
	return sru
}

// AddCreatedID adds i to the "created_id" field.
func (sru *SurveyResponseUpdate) AddCreatedID(i int64) *SurveyResponseUpdate {
	sru.mutation.AddCreatedID(i)
	return sru
}

// ClearCreatedID clears the value of the "created_id" field.
func (sru *SurveyResponseUpdate) ClearCreatedID() *SurveyResponseUpdate {
	sru.mutation.ClearCreatedID()
	return sru
}

// SetStatus sets the "status" field.
func (sru *SurveyResponseUpdate) SetStatus(i int64) *SurveyResponseUpdate {
	sru.mutation.ResetStatus()
	sru.mutation.SetStatus(i)
	return sru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableStatus(i *int64) *SurveyResponseUpdate {
	if i != nil {
		sru.SetStatus(*i)
	}
	return sru
}

// AddStatus adds i to the "status" field.
func (sru *SurveyResponseUpdate) AddStatus(i int64) *SurveyResponseUpdate {
	sru.mutation.AddStatus(i)
	return sru
}

// ClearStatus clears the value of the "status" field.
func (sru *SurveyResponseUpdate) ClearStatus() *SurveyResponseUpdate {
	sru.mutation.ClearStatus()
	return sru
}

// SetSurveyID sets the "survey_id" field.
func (sru *SurveyResponseUpdate) SetSurveyID(i int64) *SurveyResponseUpdate {
	sru.mutation.ResetSurveyID()
	sru.mutation.SetSurveyID(i)
	return sru
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableSurveyID(i *int64) *SurveyResponseUpdate {
	if i != nil {
		sru.SetSurveyID(*i)
	}
	return sru
}

// AddSurveyID adds i to the "survey_id" field.
func (sru *SurveyResponseUpdate) AddSurveyID(i int64) *SurveyResponseUpdate {
	sru.mutation.AddSurveyID(i)
	return sru
}

// SetIP sets the "ip" field.
func (sru *SurveyResponseUpdate) SetIP(s string) *SurveyResponseUpdate {
	sru.mutation.SetIP(s)
	return sru
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableIP(s *string) *SurveyResponseUpdate {
	if s != nil {
		sru.SetIP(*s)
	}
	return sru
}

// SetMap sets the "map" field.
func (sru *SurveyResponseUpdate) SetMap(s string) *SurveyResponseUpdate {
	sru.mutation.SetMap(s)
	return sru
}

// SetNillableMap sets the "map" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableMap(s *string) *SurveyResponseUpdate {
	if s != nil {
		sru.SetMap(*s)
	}
	return sru
}

// SetDevice sets the "device" field.
func (sru *SurveyResponseUpdate) SetDevice(s string) *SurveyResponseUpdate {
	sru.mutation.SetDevice(s)
	return sru
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableDevice(s *string) *SurveyResponseUpdate {
	if s != nil {
		sru.SetDevice(*s)
	}
	return sru
}

// SetAudio sets the "audio" field.
func (sru *SurveyResponseUpdate) SetAudio(s string) *SurveyResponseUpdate {
	sru.mutation.SetAudio(s)
	return sru
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableAudio(s *string) *SurveyResponseUpdate {
	if s != nil {
		sru.SetAudio(*s)
	}
	return sru
}

// SetStartedAt sets the "started_at" field.
func (sru *SurveyResponseUpdate) SetStartedAt(t time.Time) *SurveyResponseUpdate {
	sru.mutation.SetStartedAt(t)
	return sru
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableStartedAt(t *time.Time) *SurveyResponseUpdate {
	if t != nil {
		sru.SetStartedAt(*t)
	}
	return sru
}

// SetCompletedAt sets the "completed_at" field.
func (sru *SurveyResponseUpdate) SetCompletedAt(t time.Time) *SurveyResponseUpdate {
	sru.mutation.SetCompletedAt(t)
	return sru
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (sru *SurveyResponseUpdate) SetNillableCompletedAt(t *time.Time) *SurveyResponseUpdate {
	if t != nil {
		sru.SetCompletedAt(*t)
	}
	return sru
}

// Mutation returns the SurveyResponseMutation object of the builder.
func (sru *SurveyResponseUpdate) Mutation() *SurveyResponseMutation {
	return sru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SurveyResponseUpdate) Save(ctx context.Context) (int, error) {
	sru.defaults()
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SurveyResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SurveyResponseUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SurveyResponseUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *SurveyResponseUpdate) defaults() {
	if _, ok := sru.mutation.UpdatedAt(); !ok && !sru.mutation.UpdatedAtCleared() {
		v := surveyresponse.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *SurveyResponseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyResponseUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *SurveyResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyresponse.Table, surveyresponse.Columns, sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sru.mutation.CreatedAtCleared() {
		_spec.ClearField(surveyresponse.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyresponse.FieldUpdatedAt, field.TypeTime, value)
	}
	if sru.mutation.UpdatedAtCleared() {
		_spec.ClearField(surveyresponse.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sru.mutation.Delete(); ok {
		_spec.SetField(surveyresponse.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.AddedDelete(); ok {
		_spec.AddField(surveyresponse.FieldDelete, field.TypeInt64, value)
	}
	if sru.mutation.DeleteCleared() {
		_spec.ClearField(surveyresponse.FieldDelete, field.TypeInt64)
	}
	if value, ok := sru.mutation.CreatedID(); ok {
		_spec.SetField(surveyresponse.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.AddedCreatedID(); ok {
		_spec.AddField(surveyresponse.FieldCreatedID, field.TypeInt64, value)
	}
	if sru.mutation.CreatedIDCleared() {
		_spec.ClearField(surveyresponse.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := sru.mutation.Status(); ok {
		_spec.SetField(surveyresponse.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.AddedStatus(); ok {
		_spec.AddField(surveyresponse.FieldStatus, field.TypeInt64, value)
	}
	if sru.mutation.StatusCleared() {
		_spec.ClearField(surveyresponse.FieldStatus, field.TypeInt64)
	}
	if value, ok := sru.mutation.SurveyID(); ok {
		_spec.SetField(surveyresponse.FieldSurveyID, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.AddedSurveyID(); ok {
		_spec.AddField(surveyresponse.FieldSurveyID, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.IP(); ok {
		_spec.SetField(surveyresponse.FieldIP, field.TypeString, value)
	}
	if value, ok := sru.mutation.Map(); ok {
		_spec.SetField(surveyresponse.FieldMap, field.TypeString, value)
	}
	if value, ok := sru.mutation.Device(); ok {
		_spec.SetField(surveyresponse.FieldDevice, field.TypeString, value)
	}
	if value, ok := sru.mutation.Audio(); ok {
		_spec.SetField(surveyresponse.FieldAudio, field.TypeString, value)
	}
	if value, ok := sru.mutation.StartedAt(); ok {
		_spec.SetField(surveyresponse.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := sru.mutation.CompletedAt(); ok {
		_spec.SetField(surveyresponse.FieldCompletedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SurveyResponseUpdateOne is the builder for updating a single SurveyResponse entity.
type SurveyResponseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SurveyResponseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *SurveyResponseUpdateOne) SetUpdatedAt(t time.Time) *SurveyResponseUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sruo *SurveyResponseUpdateOne) ClearUpdatedAt() *SurveyResponseUpdateOne {
	sruo.mutation.ClearUpdatedAt()
	return sruo
}

// SetDelete sets the "delete" field.
func (sruo *SurveyResponseUpdateOne) SetDelete(i int64) *SurveyResponseUpdateOne {
	sruo.mutation.ResetDelete()
	sruo.mutation.SetDelete(i)
	return sruo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableDelete(i *int64) *SurveyResponseUpdateOne {
	if i != nil {
		sruo.SetDelete(*i)
	}
	return sruo
}

// AddDelete adds i to the "delete" field.
func (sruo *SurveyResponseUpdateOne) AddDelete(i int64) *SurveyResponseUpdateOne {
	sruo.mutation.AddDelete(i)
	return sruo
}

// ClearDelete clears the value of the "delete" field.
func (sruo *SurveyResponseUpdateOne) ClearDelete() *SurveyResponseUpdateOne {
	sruo.mutation.ClearDelete()
	return sruo
}

// SetCreatedID sets the "created_id" field.
func (sruo *SurveyResponseUpdateOne) SetCreatedID(i int64) *SurveyResponseUpdateOne {
	sruo.mutation.ResetCreatedID()
	sruo.mutation.SetCreatedID(i)
	return sruo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableCreatedID(i *int64) *SurveyResponseUpdateOne {
	if i != nil {
		sruo.SetCreatedID(*i)
	}
	return sruo
}

// AddCreatedID adds i to the "created_id" field.
func (sruo *SurveyResponseUpdateOne) AddCreatedID(i int64) *SurveyResponseUpdateOne {
	sruo.mutation.AddCreatedID(i)
	return sruo
}

// ClearCreatedID clears the value of the "created_id" field.
func (sruo *SurveyResponseUpdateOne) ClearCreatedID() *SurveyResponseUpdateOne {
	sruo.mutation.ClearCreatedID()
	return sruo
}

// SetStatus sets the "status" field.
func (sruo *SurveyResponseUpdateOne) SetStatus(i int64) *SurveyResponseUpdateOne {
	sruo.mutation.ResetStatus()
	sruo.mutation.SetStatus(i)
	return sruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableStatus(i *int64) *SurveyResponseUpdateOne {
	if i != nil {
		sruo.SetStatus(*i)
	}
	return sruo
}

// AddStatus adds i to the "status" field.
func (sruo *SurveyResponseUpdateOne) AddStatus(i int64) *SurveyResponseUpdateOne {
	sruo.mutation.AddStatus(i)
	return sruo
}

// ClearStatus clears the value of the "status" field.
func (sruo *SurveyResponseUpdateOne) ClearStatus() *SurveyResponseUpdateOne {
	sruo.mutation.ClearStatus()
	return sruo
}

// SetSurveyID sets the "survey_id" field.
func (sruo *SurveyResponseUpdateOne) SetSurveyID(i int64) *SurveyResponseUpdateOne {
	sruo.mutation.ResetSurveyID()
	sruo.mutation.SetSurveyID(i)
	return sruo
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableSurveyID(i *int64) *SurveyResponseUpdateOne {
	if i != nil {
		sruo.SetSurveyID(*i)
	}
	return sruo
}

// AddSurveyID adds i to the "survey_id" field.
func (sruo *SurveyResponseUpdateOne) AddSurveyID(i int64) *SurveyResponseUpdateOne {
	sruo.mutation.AddSurveyID(i)
	return sruo
}

// SetIP sets the "ip" field.
func (sruo *SurveyResponseUpdateOne) SetIP(s string) *SurveyResponseUpdateOne {
	sruo.mutation.SetIP(s)
	return sruo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableIP(s *string) *SurveyResponseUpdateOne {
	if s != nil {
		sruo.SetIP(*s)
	}
	return sruo
}

// SetMap sets the "map" field.
func (sruo *SurveyResponseUpdateOne) SetMap(s string) *SurveyResponseUpdateOne {
	sruo.mutation.SetMap(s)
	return sruo
}

// SetNillableMap sets the "map" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableMap(s *string) *SurveyResponseUpdateOne {
	if s != nil {
		sruo.SetMap(*s)
	}
	return sruo
}

// SetDevice sets the "device" field.
func (sruo *SurveyResponseUpdateOne) SetDevice(s string) *SurveyResponseUpdateOne {
	sruo.mutation.SetDevice(s)
	return sruo
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableDevice(s *string) *SurveyResponseUpdateOne {
	if s != nil {
		sruo.SetDevice(*s)
	}
	return sruo
}

// SetAudio sets the "audio" field.
func (sruo *SurveyResponseUpdateOne) SetAudio(s string) *SurveyResponseUpdateOne {
	sruo.mutation.SetAudio(s)
	return sruo
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableAudio(s *string) *SurveyResponseUpdateOne {
	if s != nil {
		sruo.SetAudio(*s)
	}
	return sruo
}

// SetStartedAt sets the "started_at" field.
func (sruo *SurveyResponseUpdateOne) SetStartedAt(t time.Time) *SurveyResponseUpdateOne {
	sruo.mutation.SetStartedAt(t)
	return sruo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableStartedAt(t *time.Time) *SurveyResponseUpdateOne {
	if t != nil {
		sruo.SetStartedAt(*t)
	}
	return sruo
}

// SetCompletedAt sets the "completed_at" field.
func (sruo *SurveyResponseUpdateOne) SetCompletedAt(t time.Time) *SurveyResponseUpdateOne {
	sruo.mutation.SetCompletedAt(t)
	return sruo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (sruo *SurveyResponseUpdateOne) SetNillableCompletedAt(t *time.Time) *SurveyResponseUpdateOne {
	if t != nil {
		sruo.SetCompletedAt(*t)
	}
	return sruo
}

// Mutation returns the SurveyResponseMutation object of the builder.
func (sruo *SurveyResponseUpdateOne) Mutation() *SurveyResponseMutation {
	return sruo.mutation
}

// Where appends a list predicates to the SurveyResponseUpdate builder.
func (sruo *SurveyResponseUpdateOne) Where(ps ...predicate.SurveyResponse) *SurveyResponseUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SurveyResponseUpdateOne) Select(field string, fields ...string) *SurveyResponseUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SurveyResponse entity.
func (sruo *SurveyResponseUpdateOne) Save(ctx context.Context) (*SurveyResponse, error) {
	sruo.defaults()
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SurveyResponseUpdateOne) SaveX(ctx context.Context) *SurveyResponse {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SurveyResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SurveyResponseUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *SurveyResponseUpdateOne) defaults() {
	if _, ok := sruo.mutation.UpdatedAt(); !ok && !sruo.mutation.UpdatedAtCleared() {
		v := surveyresponse.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *SurveyResponseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyResponseUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *SurveyResponseUpdateOne) sqlSave(ctx context.Context) (_node *SurveyResponse, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyresponse.Table, surveyresponse.Columns, sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SurveyResponse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, surveyresponse.FieldID)
		for _, f := range fields {
			if !surveyresponse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != surveyresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sruo.mutation.CreatedAtCleared() {
		_spec.ClearField(surveyresponse.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyresponse.FieldUpdatedAt, field.TypeTime, value)
	}
	if sruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(surveyresponse.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sruo.mutation.Delete(); ok {
		_spec.SetField(surveyresponse.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.AddedDelete(); ok {
		_spec.AddField(surveyresponse.FieldDelete, field.TypeInt64, value)
	}
	if sruo.mutation.DeleteCleared() {
		_spec.ClearField(surveyresponse.FieldDelete, field.TypeInt64)
	}
	if value, ok := sruo.mutation.CreatedID(); ok {
		_spec.SetField(surveyresponse.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.AddedCreatedID(); ok {
		_spec.AddField(surveyresponse.FieldCreatedID, field.TypeInt64, value)
	}
	if sruo.mutation.CreatedIDCleared() {
		_spec.ClearField(surveyresponse.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := sruo.mutation.Status(); ok {
		_spec.SetField(surveyresponse.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.AddedStatus(); ok {
		_spec.AddField(surveyresponse.FieldStatus, field.TypeInt64, value)
	}
	if sruo.mutation.StatusCleared() {
		_spec.ClearField(surveyresponse.FieldStatus, field.TypeInt64)
	}
	if value, ok := sruo.mutation.SurveyID(); ok {
		_spec.SetField(surveyresponse.FieldSurveyID, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.AddedSurveyID(); ok {
		_spec.AddField(surveyresponse.FieldSurveyID, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.IP(); ok {
		_spec.SetField(surveyresponse.FieldIP, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Map(); ok {
		_spec.SetField(surveyresponse.FieldMap, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Device(); ok {
		_spec.SetField(surveyresponse.FieldDevice, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Audio(); ok {
		_spec.SetField(surveyresponse.FieldAudio, field.TypeString, value)
	}
	if value, ok := sruo.mutation.StartedAt(); ok {
		_spec.SetField(surveyresponse.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := sruo.mutation.CompletedAt(); ok {
		_spec.SetField(surveyresponse.FieldCompletedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(sruo.modifiers...)
	_node = &SurveyResponse{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
