// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestion"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestionoptions"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyQuestionOptionsCreate is the builder for creating a SurveyQuestionOptions entity.
type SurveyQuestionOptionsCreate struct {
	config
	mutation *SurveyQuestionOptionsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sqoc *SurveyQuestionOptionsCreate) SetCreatedAt(t time.Time) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetCreatedAt(t)
	return sqoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sqoc *SurveyQuestionOptionsCreate) SetNillableCreatedAt(t *time.Time) *SurveyQuestionOptionsCreate {
	if t != nil {
		sqoc.SetCreatedAt(*t)
	}
	return sqoc
}

// SetUpdatedAt sets the "updated_at" field.
func (sqoc *SurveyQuestionOptionsCreate) SetUpdatedAt(t time.Time) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetUpdatedAt(t)
	return sqoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sqoc *SurveyQuestionOptionsCreate) SetNillableUpdatedAt(t *time.Time) *SurveyQuestionOptionsCreate {
	if t != nil {
		sqoc.SetUpdatedAt(*t)
	}
	return sqoc
}

// SetDelete sets the "delete" field.
func (sqoc *SurveyQuestionOptionsCreate) SetDelete(i int64) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetDelete(i)
	return sqoc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (sqoc *SurveyQuestionOptionsCreate) SetNillableDelete(i *int64) *SurveyQuestionOptionsCreate {
	if i != nil {
		sqoc.SetDelete(*i)
	}
	return sqoc
}

// SetCreatedID sets the "created_id" field.
func (sqoc *SurveyQuestionOptionsCreate) SetCreatedID(i int64) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetCreatedID(i)
	return sqoc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (sqoc *SurveyQuestionOptionsCreate) SetNillableCreatedID(i *int64) *SurveyQuestionOptionsCreate {
	if i != nil {
		sqoc.SetCreatedID(*i)
	}
	return sqoc
}

// SetStatus sets the "status" field.
func (sqoc *SurveyQuestionOptionsCreate) SetStatus(i int64) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetStatus(i)
	return sqoc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sqoc *SurveyQuestionOptionsCreate) SetNillableStatus(i *int64) *SurveyQuestionOptionsCreate {
	if i != nil {
		sqoc.SetStatus(*i)
	}
	return sqoc
}

// SetSurveyQuestionID sets the "survey_question_id" field.
func (sqoc *SurveyQuestionOptionsCreate) SetSurveyQuestionID(i int64) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetSurveyQuestionID(i)
	return sqoc
}

// SetNillableSurveyQuestionID sets the "survey_question_id" field if the given value is not nil.
func (sqoc *SurveyQuestionOptionsCreate) SetNillableSurveyQuestionID(i *int64) *SurveyQuestionOptionsCreate {
	if i != nil {
		sqoc.SetSurveyQuestionID(*i)
	}
	return sqoc
}

// SetSerial sets the "serial" field.
func (sqoc *SurveyQuestionOptionsCreate) SetSerial(s string) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetSerial(s)
	return sqoc
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (sqoc *SurveyQuestionOptionsCreate) SetNillableSerial(s *string) *SurveyQuestionOptionsCreate {
	if s != nil {
		sqoc.SetSerial(*s)
	}
	return sqoc
}

// SetContent sets the "content" field.
func (sqoc *SurveyQuestionOptionsCreate) SetContent(s string) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetContent(s)
	return sqoc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (sqoc *SurveyQuestionOptionsCreate) SetNillableContent(s *string) *SurveyQuestionOptionsCreate {
	if s != nil {
		sqoc.SetContent(*s)
	}
	return sqoc
}

// SetID sets the "id" field.
func (sqoc *SurveyQuestionOptionsCreate) SetID(i int64) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetID(i)
	return sqoc
}

// SetQuestionID sets the "question" edge to the SurveyQuestion entity by ID.
func (sqoc *SurveyQuestionOptionsCreate) SetQuestionID(id int64) *SurveyQuestionOptionsCreate {
	sqoc.mutation.SetQuestionID(id)
	return sqoc
}

// SetNillableQuestionID sets the "question" edge to the SurveyQuestion entity by ID if the given value is not nil.
func (sqoc *SurveyQuestionOptionsCreate) SetNillableQuestionID(id *int64) *SurveyQuestionOptionsCreate {
	if id != nil {
		sqoc = sqoc.SetQuestionID(*id)
	}
	return sqoc
}

// SetQuestion sets the "question" edge to the SurveyQuestion entity.
func (sqoc *SurveyQuestionOptionsCreate) SetQuestion(s *SurveyQuestion) *SurveyQuestionOptionsCreate {
	return sqoc.SetQuestionID(s.ID)
}

// Mutation returns the SurveyQuestionOptionsMutation object of the builder.
func (sqoc *SurveyQuestionOptionsCreate) Mutation() *SurveyQuestionOptionsMutation {
	return sqoc.mutation
}

// Save creates the SurveyQuestionOptions in the database.
func (sqoc *SurveyQuestionOptionsCreate) Save(ctx context.Context) (*SurveyQuestionOptions, error) {
	sqoc.defaults()
	return withHooks(ctx, sqoc.sqlSave, sqoc.mutation, sqoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sqoc *SurveyQuestionOptionsCreate) SaveX(ctx context.Context) *SurveyQuestionOptions {
	v, err := sqoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqoc *SurveyQuestionOptionsCreate) Exec(ctx context.Context) error {
	_, err := sqoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqoc *SurveyQuestionOptionsCreate) ExecX(ctx context.Context) {
	if err := sqoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sqoc *SurveyQuestionOptionsCreate) defaults() {
	if _, ok := sqoc.mutation.CreatedAt(); !ok {
		v := surveyquestionoptions.DefaultCreatedAt()
		sqoc.mutation.SetCreatedAt(v)
	}
	if _, ok := sqoc.mutation.UpdatedAt(); !ok {
		v := surveyquestionoptions.DefaultUpdatedAt()
		sqoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sqoc.mutation.Delete(); !ok {
		v := surveyquestionoptions.DefaultDelete
		sqoc.mutation.SetDelete(v)
	}
	if _, ok := sqoc.mutation.CreatedID(); !ok {
		v := surveyquestionoptions.DefaultCreatedID
		sqoc.mutation.SetCreatedID(v)
	}
	if _, ok := sqoc.mutation.Status(); !ok {
		v := surveyquestionoptions.DefaultStatus
		sqoc.mutation.SetStatus(v)
	}
	if _, ok := sqoc.mutation.SurveyQuestionID(); !ok {
		v := surveyquestionoptions.DefaultSurveyQuestionID
		sqoc.mutation.SetSurveyQuestionID(v)
	}
	if _, ok := sqoc.mutation.Serial(); !ok {
		v := surveyquestionoptions.DefaultSerial
		sqoc.mutation.SetSerial(v)
	}
	if _, ok := sqoc.mutation.Content(); !ok {
		v := surveyquestionoptions.DefaultContent
		sqoc.mutation.SetContent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sqoc *SurveyQuestionOptionsCreate) check() error {
	return nil
}

func (sqoc *SurveyQuestionOptionsCreate) sqlSave(ctx context.Context) (*SurveyQuestionOptions, error) {
	if err := sqoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sqoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sqoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sqoc.mutation.id = &_node.ID
	sqoc.mutation.done = true
	return _node, nil
}

func (sqoc *SurveyQuestionOptionsCreate) createSpec() (*SurveyQuestionOptions, *sqlgraph.CreateSpec) {
	var (
		_node = &SurveyQuestionOptions{config: sqoc.config}
		_spec = sqlgraph.NewCreateSpec(surveyquestionoptions.Table, sqlgraph.NewFieldSpec(surveyquestionoptions.FieldID, field.TypeInt64))
	)
	if id, ok := sqoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sqoc.mutation.CreatedAt(); ok {
		_spec.SetField(surveyquestionoptions.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sqoc.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyquestionoptions.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sqoc.mutation.Delete(); ok {
		_spec.SetField(surveyquestionoptions.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := sqoc.mutation.CreatedID(); ok {
		_spec.SetField(surveyquestionoptions.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := sqoc.mutation.Status(); ok {
		_spec.SetField(surveyquestionoptions.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := sqoc.mutation.Serial(); ok {
		_spec.SetField(surveyquestionoptions.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := sqoc.mutation.Content(); ok {
		_spec.SetField(surveyquestionoptions.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if nodes := sqoc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestionoptions.QuestionTable,
			Columns: []string{surveyquestionoptions.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SurveyQuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SurveyQuestionOptionsCreateBulk is the builder for creating many SurveyQuestionOptions entities in bulk.
type SurveyQuestionOptionsCreateBulk struct {
	config
	err      error
	builders []*SurveyQuestionOptionsCreate
}

// Save creates the SurveyQuestionOptions entities in the database.
func (sqocb *SurveyQuestionOptionsCreateBulk) Save(ctx context.Context) ([]*SurveyQuestionOptions, error) {
	if sqocb.err != nil {
		return nil, sqocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sqocb.builders))
	nodes := make([]*SurveyQuestionOptions, len(sqocb.builders))
	mutators := make([]Mutator, len(sqocb.builders))
	for i := range sqocb.builders {
		func(i int, root context.Context) {
			builder := sqocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyQuestionOptionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sqocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sqocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sqocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sqocb *SurveyQuestionOptionsCreateBulk) SaveX(ctx context.Context) []*SurveyQuestionOptions {
	v, err := sqocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqocb *SurveyQuestionOptionsCreateBulk) Exec(ctx context.Context) error {
	_, err := sqocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqocb *SurveyQuestionOptionsCreateBulk) ExecX(ctx context.Context) {
	if err := sqocb.Exec(ctx); err != nil {
		panic(err)
	}
}
