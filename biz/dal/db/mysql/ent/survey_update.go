// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/predicate"
	"kcers-survey/biz/dal/db/mysql/ent/survey"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyUpdate is the builder for updating Survey entities.
type SurveyUpdate struct {
	config
	hooks     []Hook
	mutation  *SurveyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SurveyUpdate builder.
func (su *SurveyUpdate) Where(ps ...predicate.Survey) *SurveyUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SurveyUpdate) SetUpdatedAt(t time.Time) *SurveyUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SurveyUpdate) ClearUpdatedAt() *SurveyUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetDelete sets the "delete" field.
func (su *SurveyUpdate) SetDelete(i int64) *SurveyUpdate {
	su.mutation.ResetDelete()
	su.mutation.SetDelete(i)
	return su
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableDelete(i *int64) *SurveyUpdate {
	if i != nil {
		su.SetDelete(*i)
	}
	return su
}

// AddDelete adds i to the "delete" field.
func (su *SurveyUpdate) AddDelete(i int64) *SurveyUpdate {
	su.mutation.AddDelete(i)
	return su
}

// ClearDelete clears the value of the "delete" field.
func (su *SurveyUpdate) ClearDelete() *SurveyUpdate {
	su.mutation.ClearDelete()
	return su
}

// SetCreatedID sets the "created_id" field.
func (su *SurveyUpdate) SetCreatedID(i int64) *SurveyUpdate {
	su.mutation.ResetCreatedID()
	su.mutation.SetCreatedID(i)
	return su
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableCreatedID(i *int64) *SurveyUpdate {
	if i != nil {
		su.SetCreatedID(*i)
	}
	return su
}

// AddCreatedID adds i to the "created_id" field.
func (su *SurveyUpdate) AddCreatedID(i int64) *SurveyUpdate {
	su.mutation.AddCreatedID(i)
	return su
}

// ClearCreatedID clears the value of the "created_id" field.
func (su *SurveyUpdate) ClearCreatedID() *SurveyUpdate {
	su.mutation.ClearCreatedID()
	return su
}

// SetStatus sets the "status" field.
func (su *SurveyUpdate) SetStatus(i int64) *SurveyUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableStatus(i *int64) *SurveyUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SurveyUpdate) AddStatus(i int64) *SurveyUpdate {
	su.mutation.AddStatus(i)
	return su
}

// ClearStatus clears the value of the "status" field.
func (su *SurveyUpdate) ClearStatus() *SurveyUpdate {
	su.mutation.ClearStatus()
	return su
}

// SetTitle sets the "title" field.
func (su *SurveyUpdate) SetTitle(s string) *SurveyUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableTitle(s *string) *SurveyUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetPic sets the "pic" field.
func (su *SurveyUpdate) SetPic(s string) *SurveyUpdate {
	su.mutation.SetPic(s)
	return su
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (su *SurveyUpdate) SetNillablePic(s *string) *SurveyUpdate {
	if s != nil {
		su.SetPic(*s)
	}
	return su
}

// SetDesc sets the "desc" field.
func (su *SurveyUpdate) SetDesc(s string) *SurveyUpdate {
	su.mutation.SetDesc(s)
	return su
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableDesc(s *string) *SurveyUpdate {
	if s != nil {
		su.SetDesc(*s)
	}
	return su
}

// SetStartAt sets the "start_at" field.
func (su *SurveyUpdate) SetStartAt(t time.Time) *SurveyUpdate {
	su.mutation.SetStartAt(t)
	return su
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableStartAt(t *time.Time) *SurveyUpdate {
	if t != nil {
		su.SetStartAt(*t)
	}
	return su
}

// SetEndAt sets the "end_at" field.
func (su *SurveyUpdate) SetEndAt(t time.Time) *SurveyUpdate {
	su.mutation.SetEndAt(t)
	return su
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableEndAt(t *time.Time) *SurveyUpdate {
	if t != nil {
		su.SetEndAt(*t)
	}
	return su
}

// Mutation returns the SurveyMutation object of the builder.
func (su *SurveyUpdate) Mutation() *SurveyMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SurveyUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SurveyUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SurveyUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SurveyUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SurveyUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		v := survey.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SurveyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SurveyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(survey.Table, survey.Columns, sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(survey.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(survey.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(survey.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Delete(); ok {
		_spec.SetField(survey.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedDelete(); ok {
		_spec.AddField(survey.FieldDelete, field.TypeInt64, value)
	}
	if su.mutation.DeleteCleared() {
		_spec.ClearField(survey.FieldDelete, field.TypeInt64)
	}
	if value, ok := su.mutation.CreatedID(); ok {
		_spec.SetField(survey.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedCreatedID(); ok {
		_spec.AddField(survey.FieldCreatedID, field.TypeInt64, value)
	}
	if su.mutation.CreatedIDCleared() {
		_spec.ClearField(survey.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(survey.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(survey.FieldStatus, field.TypeInt64, value)
	}
	if su.mutation.StatusCleared() {
		_spec.ClearField(survey.FieldStatus, field.TypeInt64)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(survey.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Pic(); ok {
		_spec.SetField(survey.FieldPic, field.TypeString, value)
	}
	if value, ok := su.mutation.Desc(); ok {
		_spec.SetField(survey.FieldDesc, field.TypeString, value)
	}
	if value, ok := su.mutation.StartAt(); ok {
		_spec.SetField(survey.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.EndAt(); ok {
		_spec.SetField(survey.FieldEndAt, field.TypeTime, value)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SurveyUpdateOne is the builder for updating a single Survey entity.
type SurveyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SurveyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SurveyUpdateOne) SetUpdatedAt(t time.Time) *SurveyUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SurveyUpdateOne) ClearUpdatedAt() *SurveyUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetDelete sets the "delete" field.
func (suo *SurveyUpdateOne) SetDelete(i int64) *SurveyUpdateOne {
	suo.mutation.ResetDelete()
	suo.mutation.SetDelete(i)
	return suo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableDelete(i *int64) *SurveyUpdateOne {
	if i != nil {
		suo.SetDelete(*i)
	}
	return suo
}

// AddDelete adds i to the "delete" field.
func (suo *SurveyUpdateOne) AddDelete(i int64) *SurveyUpdateOne {
	suo.mutation.AddDelete(i)
	return suo
}

// ClearDelete clears the value of the "delete" field.
func (suo *SurveyUpdateOne) ClearDelete() *SurveyUpdateOne {
	suo.mutation.ClearDelete()
	return suo
}

// SetCreatedID sets the "created_id" field.
func (suo *SurveyUpdateOne) SetCreatedID(i int64) *SurveyUpdateOne {
	suo.mutation.ResetCreatedID()
	suo.mutation.SetCreatedID(i)
	return suo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableCreatedID(i *int64) *SurveyUpdateOne {
	if i != nil {
		suo.SetCreatedID(*i)
	}
	return suo
}

// AddCreatedID adds i to the "created_id" field.
func (suo *SurveyUpdateOne) AddCreatedID(i int64) *SurveyUpdateOne {
	suo.mutation.AddCreatedID(i)
	return suo
}

// ClearCreatedID clears the value of the "created_id" field.
func (suo *SurveyUpdateOne) ClearCreatedID() *SurveyUpdateOne {
	suo.mutation.ClearCreatedID()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SurveyUpdateOne) SetStatus(i int64) *SurveyUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableStatus(i *int64) *SurveyUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SurveyUpdateOne) AddStatus(i int64) *SurveyUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// ClearStatus clears the value of the "status" field.
func (suo *SurveyUpdateOne) ClearStatus() *SurveyUpdateOne {
	suo.mutation.ClearStatus()
	return suo
}

// SetTitle sets the "title" field.
func (suo *SurveyUpdateOne) SetTitle(s string) *SurveyUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableTitle(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetPic sets the "pic" field.
func (suo *SurveyUpdateOne) SetPic(s string) *SurveyUpdateOne {
	suo.mutation.SetPic(s)
	return suo
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillablePic(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetPic(*s)
	}
	return suo
}

// SetDesc sets the "desc" field.
func (suo *SurveyUpdateOne) SetDesc(s string) *SurveyUpdateOne {
	suo.mutation.SetDesc(s)
	return suo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableDesc(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetDesc(*s)
	}
	return suo
}

// SetStartAt sets the "start_at" field.
func (suo *SurveyUpdateOne) SetStartAt(t time.Time) *SurveyUpdateOne {
	suo.mutation.SetStartAt(t)
	return suo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableStartAt(t *time.Time) *SurveyUpdateOne {
	if t != nil {
		suo.SetStartAt(*t)
	}
	return suo
}

// SetEndAt sets the "end_at" field.
func (suo *SurveyUpdateOne) SetEndAt(t time.Time) *SurveyUpdateOne {
	suo.mutation.SetEndAt(t)
	return suo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableEndAt(t *time.Time) *SurveyUpdateOne {
	if t != nil {
		suo.SetEndAt(*t)
	}
	return suo
}

// Mutation returns the SurveyMutation object of the builder.
func (suo *SurveyUpdateOne) Mutation() *SurveyMutation {
	return suo.mutation
}

// Where appends a list predicates to the SurveyUpdate builder.
func (suo *SurveyUpdateOne) Where(ps ...predicate.Survey) *SurveyUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SurveyUpdateOne) Select(field string, fields ...string) *SurveyUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Survey entity.
func (suo *SurveyUpdateOne) Save(ctx context.Context) (*Survey, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SurveyUpdateOne) SaveX(ctx context.Context) *Survey {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SurveyUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SurveyUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SurveyUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		v := survey.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SurveyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SurveyUpdateOne) sqlSave(ctx context.Context) (_node *Survey, err error) {
	_spec := sqlgraph.NewUpdateSpec(survey.Table, survey.Columns, sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Survey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, survey.FieldID)
		for _, f := range fields {
			if !survey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != survey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(survey.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(survey.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(survey.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Delete(); ok {
		_spec.SetField(survey.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedDelete(); ok {
		_spec.AddField(survey.FieldDelete, field.TypeInt64, value)
	}
	if suo.mutation.DeleteCleared() {
		_spec.ClearField(survey.FieldDelete, field.TypeInt64)
	}
	if value, ok := suo.mutation.CreatedID(); ok {
		_spec.SetField(survey.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedCreatedID(); ok {
		_spec.AddField(survey.FieldCreatedID, field.TypeInt64, value)
	}
	if suo.mutation.CreatedIDCleared() {
		_spec.ClearField(survey.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(survey.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(survey.FieldStatus, field.TypeInt64, value)
	}
	if suo.mutation.StatusCleared() {
		_spec.ClearField(survey.FieldStatus, field.TypeInt64)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(survey.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Pic(); ok {
		_spec.SetField(survey.FieldPic, field.TypeString, value)
	}
	if value, ok := suo.mutation.Desc(); ok {
		_spec.SetField(survey.FieldDesc, field.TypeString, value)
	}
	if value, ok := suo.mutation.StartAt(); ok {
		_spec.SetField(survey.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.EndAt(); ok {
		_spec.SetField(survey.FieldEndAt, field.TypeTime, value)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Survey{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
