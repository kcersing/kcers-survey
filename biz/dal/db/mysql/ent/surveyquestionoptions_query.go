// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/predicate"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestion"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestionoptions"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyQuestionOptionsQuery is the builder for querying SurveyQuestionOptions entities.
type SurveyQuestionOptionsQuery struct {
	config
	ctx          *QueryContext
	order        []surveyquestionoptions.OrderOption
	inters       []Interceptor
	predicates   []predicate.SurveyQuestionOptions
	withQuestion *SurveyQuestionQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SurveyQuestionOptionsQuery builder.
func (sqoq *SurveyQuestionOptionsQuery) Where(ps ...predicate.SurveyQuestionOptions) *SurveyQuestionOptionsQuery {
	sqoq.predicates = append(sqoq.predicates, ps...)
	return sqoq
}

// Limit the number of records to be returned by this query.
func (sqoq *SurveyQuestionOptionsQuery) Limit(limit int) *SurveyQuestionOptionsQuery {
	sqoq.ctx.Limit = &limit
	return sqoq
}

// Offset to start from.
func (sqoq *SurveyQuestionOptionsQuery) Offset(offset int) *SurveyQuestionOptionsQuery {
	sqoq.ctx.Offset = &offset
	return sqoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sqoq *SurveyQuestionOptionsQuery) Unique(unique bool) *SurveyQuestionOptionsQuery {
	sqoq.ctx.Unique = &unique
	return sqoq
}

// Order specifies how the records should be ordered.
func (sqoq *SurveyQuestionOptionsQuery) Order(o ...surveyquestionoptions.OrderOption) *SurveyQuestionOptionsQuery {
	sqoq.order = append(sqoq.order, o...)
	return sqoq
}

// QueryQuestion chains the current query on the "question" edge.
func (sqoq *SurveyQuestionOptionsQuery) QueryQuestion() *SurveyQuestionQuery {
	query := (&SurveyQuestionClient{config: sqoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sqoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sqoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyquestionoptions.Table, surveyquestionoptions.FieldID, selector),
			sqlgraph.To(surveyquestion.Table, surveyquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyquestionoptions.QuestionTable, surveyquestionoptions.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(sqoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SurveyQuestionOptions entity from the query.
// Returns a *NotFoundError when no SurveyQuestionOptions was found.
func (sqoq *SurveyQuestionOptionsQuery) First(ctx context.Context) (*SurveyQuestionOptions, error) {
	nodes, err := sqoq.Limit(1).All(setContextOp(ctx, sqoq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{surveyquestionoptions.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sqoq *SurveyQuestionOptionsQuery) FirstX(ctx context.Context) *SurveyQuestionOptions {
	node, err := sqoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SurveyQuestionOptions ID from the query.
// Returns a *NotFoundError when no SurveyQuestionOptions ID was found.
func (sqoq *SurveyQuestionOptionsQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sqoq.Limit(1).IDs(setContextOp(ctx, sqoq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{surveyquestionoptions.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sqoq *SurveyQuestionOptionsQuery) FirstIDX(ctx context.Context) int64 {
	id, err := sqoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SurveyQuestionOptions entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SurveyQuestionOptions entity is found.
// Returns a *NotFoundError when no SurveyQuestionOptions entities are found.
func (sqoq *SurveyQuestionOptionsQuery) Only(ctx context.Context) (*SurveyQuestionOptions, error) {
	nodes, err := sqoq.Limit(2).All(setContextOp(ctx, sqoq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{surveyquestionoptions.Label}
	default:
		return nil, &NotSingularError{surveyquestionoptions.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sqoq *SurveyQuestionOptionsQuery) OnlyX(ctx context.Context) *SurveyQuestionOptions {
	node, err := sqoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SurveyQuestionOptions ID in the query.
// Returns a *NotSingularError when more than one SurveyQuestionOptions ID is found.
// Returns a *NotFoundError when no entities are found.
func (sqoq *SurveyQuestionOptionsQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sqoq.Limit(2).IDs(setContextOp(ctx, sqoq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{surveyquestionoptions.Label}
	default:
		err = &NotSingularError{surveyquestionoptions.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sqoq *SurveyQuestionOptionsQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := sqoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SurveyQuestionOptionsSlice.
func (sqoq *SurveyQuestionOptionsQuery) All(ctx context.Context) ([]*SurveyQuestionOptions, error) {
	ctx = setContextOp(ctx, sqoq.ctx, ent.OpQueryAll)
	if err := sqoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SurveyQuestionOptions, *SurveyQuestionOptionsQuery]()
	return withInterceptors[[]*SurveyQuestionOptions](ctx, sqoq, qr, sqoq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sqoq *SurveyQuestionOptionsQuery) AllX(ctx context.Context) []*SurveyQuestionOptions {
	nodes, err := sqoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SurveyQuestionOptions IDs.
func (sqoq *SurveyQuestionOptionsQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if sqoq.ctx.Unique == nil && sqoq.path != nil {
		sqoq.Unique(true)
	}
	ctx = setContextOp(ctx, sqoq.ctx, ent.OpQueryIDs)
	if err = sqoq.Select(surveyquestionoptions.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sqoq *SurveyQuestionOptionsQuery) IDsX(ctx context.Context) []int64 {
	ids, err := sqoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sqoq *SurveyQuestionOptionsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sqoq.ctx, ent.OpQueryCount)
	if err := sqoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sqoq, querierCount[*SurveyQuestionOptionsQuery](), sqoq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sqoq *SurveyQuestionOptionsQuery) CountX(ctx context.Context) int {
	count, err := sqoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sqoq *SurveyQuestionOptionsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sqoq.ctx, ent.OpQueryExist)
	switch _, err := sqoq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sqoq *SurveyQuestionOptionsQuery) ExistX(ctx context.Context) bool {
	exist, err := sqoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SurveyQuestionOptionsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sqoq *SurveyQuestionOptionsQuery) Clone() *SurveyQuestionOptionsQuery {
	if sqoq == nil {
		return nil
	}
	return &SurveyQuestionOptionsQuery{
		config:       sqoq.config,
		ctx:          sqoq.ctx.Clone(),
		order:        append([]surveyquestionoptions.OrderOption{}, sqoq.order...),
		inters:       append([]Interceptor{}, sqoq.inters...),
		predicates:   append([]predicate.SurveyQuestionOptions{}, sqoq.predicates...),
		withQuestion: sqoq.withQuestion.Clone(),
		// clone intermediate query.
		sql:       sqoq.sql.Clone(),
		path:      sqoq.path,
		modifiers: append([]func(*sql.Selector){}, sqoq.modifiers...),
	}
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (sqoq *SurveyQuestionOptionsQuery) WithQuestion(opts ...func(*SurveyQuestionQuery)) *SurveyQuestionOptionsQuery {
	query := (&SurveyQuestionClient{config: sqoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sqoq.withQuestion = query
	return sqoq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SurveyQuestionOptions.Query().
//		GroupBy(surveyquestionoptions.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sqoq *SurveyQuestionOptionsQuery) GroupBy(field string, fields ...string) *SurveyQuestionOptionsGroupBy {
	sqoq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SurveyQuestionOptionsGroupBy{build: sqoq}
	grbuild.flds = &sqoq.ctx.Fields
	grbuild.label = surveyquestionoptions.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.SurveyQuestionOptions.Query().
//		Select(surveyquestionoptions.FieldCreatedAt).
//		Scan(ctx, &v)
func (sqoq *SurveyQuestionOptionsQuery) Select(fields ...string) *SurveyQuestionOptionsSelect {
	sqoq.ctx.Fields = append(sqoq.ctx.Fields, fields...)
	sbuild := &SurveyQuestionOptionsSelect{SurveyQuestionOptionsQuery: sqoq}
	sbuild.label = surveyquestionoptions.Label
	sbuild.flds, sbuild.scan = &sqoq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SurveyQuestionOptionsSelect configured with the given aggregations.
func (sqoq *SurveyQuestionOptionsQuery) Aggregate(fns ...AggregateFunc) *SurveyQuestionOptionsSelect {
	return sqoq.Select().Aggregate(fns...)
}

func (sqoq *SurveyQuestionOptionsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sqoq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sqoq); err != nil {
				return err
			}
		}
	}
	for _, f := range sqoq.ctx.Fields {
		if !surveyquestionoptions.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sqoq.path != nil {
		prev, err := sqoq.path(ctx)
		if err != nil {
			return err
		}
		sqoq.sql = prev
	}
	return nil
}

func (sqoq *SurveyQuestionOptionsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SurveyQuestionOptions, error) {
	var (
		nodes       = []*SurveyQuestionOptions{}
		_spec       = sqoq.querySpec()
		loadedTypes = [1]bool{
			sqoq.withQuestion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SurveyQuestionOptions).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SurveyQuestionOptions{config: sqoq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sqoq.modifiers) > 0 {
		_spec.Modifiers = sqoq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sqoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sqoq.withQuestion; query != nil {
		if err := sqoq.loadQuestion(ctx, query, nodes, nil,
			func(n *SurveyQuestionOptions, e *SurveyQuestion) { n.Edges.Question = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sqoq *SurveyQuestionOptionsQuery) loadQuestion(ctx context.Context, query *SurveyQuestionQuery, nodes []*SurveyQuestionOptions, init func(*SurveyQuestionOptions), assign func(*SurveyQuestionOptions, *SurveyQuestion)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*SurveyQuestionOptions)
	for i := range nodes {
		fk := nodes[i].SurveyQuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(surveyquestion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "survey_question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sqoq *SurveyQuestionOptionsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sqoq.querySpec()
	if len(sqoq.modifiers) > 0 {
		_spec.Modifiers = sqoq.modifiers
	}
	_spec.Node.Columns = sqoq.ctx.Fields
	if len(sqoq.ctx.Fields) > 0 {
		_spec.Unique = sqoq.ctx.Unique != nil && *sqoq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sqoq.driver, _spec)
}

func (sqoq *SurveyQuestionOptionsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(surveyquestionoptions.Table, surveyquestionoptions.Columns, sqlgraph.NewFieldSpec(surveyquestionoptions.FieldID, field.TypeInt64))
	_spec.From = sqoq.sql
	if unique := sqoq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sqoq.path != nil {
		_spec.Unique = true
	}
	if fields := sqoq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, surveyquestionoptions.FieldID)
		for i := range fields {
			if fields[i] != surveyquestionoptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sqoq.withQuestion != nil {
			_spec.Node.AddColumnOnce(surveyquestionoptions.FieldSurveyQuestionID)
		}
	}
	if ps := sqoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sqoq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sqoq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sqoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sqoq *SurveyQuestionOptionsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sqoq.driver.Dialect())
	t1 := builder.Table(surveyquestionoptions.Table)
	columns := sqoq.ctx.Fields
	if len(columns) == 0 {
		columns = surveyquestionoptions.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sqoq.sql != nil {
		selector = sqoq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sqoq.ctx.Unique != nil && *sqoq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sqoq.modifiers {
		m(selector)
	}
	for _, p := range sqoq.predicates {
		p(selector)
	}
	for _, p := range sqoq.order {
		p(selector)
	}
	if offset := sqoq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sqoq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sqoq *SurveyQuestionOptionsQuery) Modify(modifiers ...func(s *sql.Selector)) *SurveyQuestionOptionsSelect {
	sqoq.modifiers = append(sqoq.modifiers, modifiers...)
	return sqoq.Select()
}

// SurveyQuestionOptionsGroupBy is the group-by builder for SurveyQuestionOptions entities.
type SurveyQuestionOptionsGroupBy struct {
	selector
	build *SurveyQuestionOptionsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sqogb *SurveyQuestionOptionsGroupBy) Aggregate(fns ...AggregateFunc) *SurveyQuestionOptionsGroupBy {
	sqogb.fns = append(sqogb.fns, fns...)
	return sqogb
}

// Scan applies the selector query and scans the result into the given value.
func (sqogb *SurveyQuestionOptionsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sqogb.build.ctx, ent.OpQueryGroupBy)
	if err := sqogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SurveyQuestionOptionsQuery, *SurveyQuestionOptionsGroupBy](ctx, sqogb.build, sqogb, sqogb.build.inters, v)
}

func (sqogb *SurveyQuestionOptionsGroupBy) sqlScan(ctx context.Context, root *SurveyQuestionOptionsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sqogb.fns))
	for _, fn := range sqogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sqogb.flds)+len(sqogb.fns))
		for _, f := range *sqogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sqogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sqogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SurveyQuestionOptionsSelect is the builder for selecting fields of SurveyQuestionOptions entities.
type SurveyQuestionOptionsSelect struct {
	*SurveyQuestionOptionsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sqos *SurveyQuestionOptionsSelect) Aggregate(fns ...AggregateFunc) *SurveyQuestionOptionsSelect {
	sqos.fns = append(sqos.fns, fns...)
	return sqos
}

// Scan applies the selector query and scans the result into the given value.
func (sqos *SurveyQuestionOptionsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sqos.ctx, ent.OpQuerySelect)
	if err := sqos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SurveyQuestionOptionsQuery, *SurveyQuestionOptionsSelect](ctx, sqos.SurveyQuestionOptionsQuery, sqos, sqos.inters, v)
}

func (sqos *SurveyQuestionOptionsSelect) sqlScan(ctx context.Context, root *SurveyQuestionOptionsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sqos.fns))
	for _, fn := range sqos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sqos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sqos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sqos *SurveyQuestionOptionsSelect) Modify(modifiers ...func(s *sql.Selector)) *SurveyQuestionOptionsSelect {
	sqos.modifiers = append(sqos.modifiers, modifiers...)
	return sqos
}
