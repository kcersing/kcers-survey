// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyQuestionCreate is the builder for creating a SurveyQuestion entity.
type SurveyQuestionCreate struct {
	config
	mutation *SurveyQuestionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sqc *SurveyQuestionCreate) SetCreatedAt(t time.Time) *SurveyQuestionCreate {
	sqc.mutation.SetCreatedAt(t)
	return sqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableCreatedAt(t *time.Time) *SurveyQuestionCreate {
	if t != nil {
		sqc.SetCreatedAt(*t)
	}
	return sqc
}

// SetUpdatedAt sets the "updated_at" field.
func (sqc *SurveyQuestionCreate) SetUpdatedAt(t time.Time) *SurveyQuestionCreate {
	sqc.mutation.SetUpdatedAt(t)
	return sqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableUpdatedAt(t *time.Time) *SurveyQuestionCreate {
	if t != nil {
		sqc.SetUpdatedAt(*t)
	}
	return sqc
}

// SetDelete sets the "delete" field.
func (sqc *SurveyQuestionCreate) SetDelete(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetDelete(i)
	return sqc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableDelete(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetDelete(*i)
	}
	return sqc
}

// SetCreatedID sets the "created_id" field.
func (sqc *SurveyQuestionCreate) SetCreatedID(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetCreatedID(i)
	return sqc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableCreatedID(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetCreatedID(*i)
	}
	return sqc
}

// SetStatus sets the "status" field.
func (sqc *SurveyQuestionCreate) SetStatus(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetStatus(i)
	return sqc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableStatus(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetStatus(*i)
	}
	return sqc
}

// SetSurveyID sets the "survey_id" field.
func (sqc *SurveyQuestionCreate) SetSurveyID(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetSurveyID(i)
	return sqc
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableSurveyID(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetSurveyID(*i)
	}
	return sqc
}

// SetParentID sets the "parent_id" field.
func (sqc *SurveyQuestionCreate) SetParentID(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetParentID(i)
	return sqc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableParentID(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetParentID(*i)
	}
	return sqc
}

// SetContent sets the "content" field.
func (sqc *SurveyQuestionCreate) SetContent(s string) *SurveyQuestionCreate {
	sqc.mutation.SetContent(s)
	return sqc
}

// SetType sets the "type" field.
func (sqc *SurveyQuestionCreate) SetType(s string) *SurveyQuestionCreate {
	sqc.mutation.SetType(s)
	return sqc
}

// SetSort sets the "sort" field.
func (sqc *SurveyQuestionCreate) SetSort(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetSort(i)
	return sqc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableSort(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetSort(*i)
	}
	return sqc
}

// SetRequired sets the "required" field.
func (sqc *SurveyQuestionCreate) SetRequired(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetRequired(i)
	return sqc
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (sqc *SurveyQuestionCreate) SetNillableRequired(i *int64) *SurveyQuestionCreate {
	if i != nil {
		sqc.SetRequired(*i)
	}
	return sqc
}

// SetOptions sets the "options" field.
func (sqc *SurveyQuestionCreate) SetOptions(m map[string]string) *SurveyQuestionCreate {
	sqc.mutation.SetOptions(m)
	return sqc
}

// SetID sets the "id" field.
func (sqc *SurveyQuestionCreate) SetID(i int64) *SurveyQuestionCreate {
	sqc.mutation.SetID(i)
	return sqc
}

// Mutation returns the SurveyQuestionMutation object of the builder.
func (sqc *SurveyQuestionCreate) Mutation() *SurveyQuestionMutation {
	return sqc.mutation
}

// Save creates the SurveyQuestion in the database.
func (sqc *SurveyQuestionCreate) Save(ctx context.Context) (*SurveyQuestion, error) {
	sqc.defaults()
	return withHooks(ctx, sqc.sqlSave, sqc.mutation, sqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sqc *SurveyQuestionCreate) SaveX(ctx context.Context) *SurveyQuestion {
	v, err := sqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqc *SurveyQuestionCreate) Exec(ctx context.Context) error {
	_, err := sqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqc *SurveyQuestionCreate) ExecX(ctx context.Context) {
	if err := sqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sqc *SurveyQuestionCreate) defaults() {
	if _, ok := sqc.mutation.CreatedAt(); !ok {
		v := surveyquestion.DefaultCreatedAt()
		sqc.mutation.SetCreatedAt(v)
	}
	if _, ok := sqc.mutation.UpdatedAt(); !ok {
		v := surveyquestion.DefaultUpdatedAt()
		sqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sqc.mutation.Delete(); !ok {
		v := surveyquestion.DefaultDelete
		sqc.mutation.SetDelete(v)
	}
	if _, ok := sqc.mutation.CreatedID(); !ok {
		v := surveyquestion.DefaultCreatedID
		sqc.mutation.SetCreatedID(v)
	}
	if _, ok := sqc.mutation.Status(); !ok {
		v := surveyquestion.DefaultStatus
		sqc.mutation.SetStatus(v)
	}
	if _, ok := sqc.mutation.SurveyID(); !ok {
		v := surveyquestion.DefaultSurveyID
		sqc.mutation.SetSurveyID(v)
	}
	if _, ok := sqc.mutation.ParentID(); !ok {
		v := surveyquestion.DefaultParentID
		sqc.mutation.SetParentID(v)
	}
	if _, ok := sqc.mutation.Sort(); !ok {
		v := surveyquestion.DefaultSort
		sqc.mutation.SetSort(v)
	}
	if _, ok := sqc.mutation.Required(); !ok {
		v := surveyquestion.DefaultRequired
		sqc.mutation.SetRequired(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sqc *SurveyQuestionCreate) check() error {
	if _, ok := sqc.mutation.SurveyID(); !ok {
		return &ValidationError{Name: "survey_id", err: errors.New(`ent: missing required field "SurveyQuestion.survey_id"`)}
	}
	if _, ok := sqc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "SurveyQuestion.parent_id"`)}
	}
	if _, ok := sqc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "SurveyQuestion.content"`)}
	}
	if _, ok := sqc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SurveyQuestion.type"`)}
	}
	if _, ok := sqc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "SurveyQuestion.sort"`)}
	}
	if _, ok := sqc.mutation.Required(); !ok {
		return &ValidationError{Name: "required", err: errors.New(`ent: missing required field "SurveyQuestion.required"`)}
	}
	if _, ok := sqc.mutation.Options(); !ok {
		return &ValidationError{Name: "options", err: errors.New(`ent: missing required field "SurveyQuestion.options"`)}
	}
	return nil
}

func (sqc *SurveyQuestionCreate) sqlSave(ctx context.Context) (*SurveyQuestion, error) {
	if err := sqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sqc.mutation.id = &_node.ID
	sqc.mutation.done = true
	return _node, nil
}

func (sqc *SurveyQuestionCreate) createSpec() (*SurveyQuestion, *sqlgraph.CreateSpec) {
	var (
		_node = &SurveyQuestion{config: sqc.config}
		_spec = sqlgraph.NewCreateSpec(surveyquestion.Table, sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64))
	)
	if id, ok := sqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sqc.mutation.CreatedAt(); ok {
		_spec.SetField(surveyquestion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sqc.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyquestion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sqc.mutation.Delete(); ok {
		_spec.SetField(surveyquestion.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := sqc.mutation.CreatedID(); ok {
		_spec.SetField(surveyquestion.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := sqc.mutation.Status(); ok {
		_spec.SetField(surveyquestion.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := sqc.mutation.SurveyID(); ok {
		_spec.SetField(surveyquestion.FieldSurveyID, field.TypeInt64, value)
		_node.SurveyID = value
	}
	if value, ok := sqc.mutation.ParentID(); ok {
		_spec.SetField(surveyquestion.FieldParentID, field.TypeInt64, value)
		_node.ParentID = value
	}
	if value, ok := sqc.mutation.Content(); ok {
		_spec.SetField(surveyquestion.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := sqc.mutation.GetType(); ok {
		_spec.SetField(surveyquestion.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sqc.mutation.Sort(); ok {
		_spec.SetField(surveyquestion.FieldSort, field.TypeInt64, value)
		_node.Sort = value
	}
	if value, ok := sqc.mutation.Required(); ok {
		_spec.SetField(surveyquestion.FieldRequired, field.TypeInt64, value)
		_node.Required = value
	}
	if value, ok := sqc.mutation.Options(); ok {
		_spec.SetField(surveyquestion.FieldOptions, field.TypeJSON, value)
		_node.Options = value
	}
	return _node, _spec
}

// SurveyQuestionCreateBulk is the builder for creating many SurveyQuestion entities in bulk.
type SurveyQuestionCreateBulk struct {
	config
	err      error
	builders []*SurveyQuestionCreate
}

// Save creates the SurveyQuestion entities in the database.
func (sqcb *SurveyQuestionCreateBulk) Save(ctx context.Context) ([]*SurveyQuestion, error) {
	if sqcb.err != nil {
		return nil, sqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sqcb.builders))
	nodes := make([]*SurveyQuestion, len(sqcb.builders))
	mutators := make([]Mutator, len(sqcb.builders))
	for i := range sqcb.builders {
		func(i int, root context.Context) {
			builder := sqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyQuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sqcb *SurveyQuestionCreateBulk) SaveX(ctx context.Context) []*SurveyQuestion {
	v, err := sqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqcb *SurveyQuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := sqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqcb *SurveyQuestionCreateBulk) ExecX(ctx context.Context) {
	if err := sqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
