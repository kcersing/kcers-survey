// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/survey"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SurveyQuestion is the model entity for the SurveyQuestion schema.
type SurveyQuestion struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[0:禁用;1:正常]
	Status int64 `json:"status,omitempty"`
	// survey_id
	SurveyID int64 `json:"survey_id,omitempty"`
	// parent_id
	ParentID int64 `json:"parent_id,omitempty"`
	// content
	Content string `json:"content,omitempty"`
	// type
	Type string `json:"type,omitempty"`
	// sort
	Sort int64 `json:"sort,omitempty"`
	// 是否必填 1必填 2选填
	Required int64 `json:"required,omitempty"`
	// 存储选项
	Options map[string]string `json:"options,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurveyQuestionQuery when eager-loading is set.
	Edges        SurveyQuestionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SurveyQuestionEdges holds the relations/edges for other nodes in the graph.
type SurveyQuestionEdges struct {
	// Option holds the value of the option edge.
	Option []*SurveyQuestionOptions `json:"option,omitempty"`
	// Survey holds the value of the survey edge.
	Survey *Survey `json:"survey,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OptionOrErr returns the Option value or an error if the edge
// was not loaded in eager-loading.
func (e SurveyQuestionEdges) OptionOrErr() ([]*SurveyQuestionOptions, error) {
	if e.loadedTypes[0] {
		return e.Option, nil
	}
	return nil, &NotLoadedError{edge: "option"}
}

// SurveyOrErr returns the Survey value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyQuestionEdges) SurveyOrErr() (*Survey, error) {
	if e.Survey != nil {
		return e.Survey, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: survey.Label}
	}
	return nil, &NotLoadedError{edge: "survey"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SurveyQuestion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case surveyquestion.FieldOptions:
			values[i] = new([]byte)
		case surveyquestion.FieldID, surveyquestion.FieldDelete, surveyquestion.FieldCreatedID, surveyquestion.FieldStatus, surveyquestion.FieldSurveyID, surveyquestion.FieldParentID, surveyquestion.FieldSort, surveyquestion.FieldRequired:
			values[i] = new(sql.NullInt64)
		case surveyquestion.FieldContent, surveyquestion.FieldType:
			values[i] = new(sql.NullString)
		case surveyquestion.FieldCreatedAt, surveyquestion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SurveyQuestion fields.
func (sq *SurveyQuestion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case surveyquestion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sq.ID = int64(value.Int64)
		case surveyquestion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sq.CreatedAt = value.Time
			}
		case surveyquestion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sq.UpdatedAt = value.Time
			}
		case surveyquestion.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				sq.Delete = value.Int64
			}
		case surveyquestion.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				sq.CreatedID = value.Int64
			}
		case surveyquestion.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sq.Status = value.Int64
			}
		case surveyquestion.FieldSurveyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field survey_id", values[i])
			} else if value.Valid {
				sq.SurveyID = value.Int64
			}
		case surveyquestion.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				sq.ParentID = value.Int64
			}
		case surveyquestion.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				sq.Content = value.String
			}
		case surveyquestion.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sq.Type = value.String
			}
		case surveyquestion.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sq.Sort = value.Int64
			}
		case surveyquestion.FieldRequired:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field required", values[i])
			} else if value.Valid {
				sq.Required = value.Int64
			}
		case surveyquestion.FieldOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sq.Options); err != nil {
					return fmt.Errorf("unmarshal field options: %w", err)
				}
			}
		default:
			sq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SurveyQuestion.
// This includes values selected through modifiers, order, etc.
func (sq *SurveyQuestion) Value(name string) (ent.Value, error) {
	return sq.selectValues.Get(name)
}

// QueryOption queries the "option" edge of the SurveyQuestion entity.
func (sq *SurveyQuestion) QueryOption() *SurveyQuestionOptionsQuery {
	return NewSurveyQuestionClient(sq.config).QueryOption(sq)
}

// QuerySurvey queries the "survey" edge of the SurveyQuestion entity.
func (sq *SurveyQuestion) QuerySurvey() *SurveyQuery {
	return NewSurveyQuestionClient(sq.config).QuerySurvey(sq)
}

// Update returns a builder for updating this SurveyQuestion.
// Note that you need to call SurveyQuestion.Unwrap() before calling this method if this SurveyQuestion
// was returned from a transaction, and the transaction was committed or rolled back.
func (sq *SurveyQuestion) Update() *SurveyQuestionUpdateOne {
	return NewSurveyQuestionClient(sq.config).UpdateOne(sq)
}

// Unwrap unwraps the SurveyQuestion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sq *SurveyQuestion) Unwrap() *SurveyQuestion {
	_tx, ok := sq.config.driver.(*txDriver)
	if !ok {
		panic("ent: SurveyQuestion is not a transactional entity")
	}
	sq.config.driver = _tx.drv
	return sq
}

// String implements the fmt.Stringer.
func (sq *SurveyQuestion) String() string {
	var builder strings.Builder
	builder.WriteString("SurveyQuestion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sq.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sq.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", sq.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", sq.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sq.Status))
	builder.WriteString(", ")
	builder.WriteString("survey_id=")
	builder.WriteString(fmt.Sprintf("%v", sq.SurveyID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", sq.ParentID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(sq.Content)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(sq.Type)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", sq.Sort))
	builder.WriteString(", ")
	builder.WriteString("required=")
	builder.WriteString(fmt.Sprintf("%v", sq.Required))
	builder.WriteString(", ")
	builder.WriteString("options=")
	builder.WriteString(fmt.Sprintf("%v", sq.Options))
	builder.WriteByte(')')
	return builder.String()
}

// SurveyQuestions is a parsable slice of SurveyQuestion.
type SurveyQuestions []*SurveyQuestion
