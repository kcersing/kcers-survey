// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/survey"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Survey is the model entity for the Survey schema.
type Survey struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[0:禁用;1:正常]
	Status int64 `json:"status,omitempty"`
	// title
	Title string `json:"title,omitempty"`
	// pic
	Pic string `json:"pic,omitempty"`
	// desc
	Desc string `json:"desc,omitempty"`
	// 开始时间
	StartAt time.Time `json:"start_at,omitempty"`
	// 结束时间
	EndAt time.Time `json:"end_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurveyQuery when eager-loading is set.
	Edges        SurveyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SurveyEdges holds the relations/edges for other nodes in the graph.
type SurveyEdges struct {
	// Question holds the value of the question edge.
	Question []*SurveyQuestion `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading.
func (e SurveyEdges) QuestionOrErr() ([]*SurveyQuestion, error) {
	if e.loadedTypes[0] {
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Survey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case survey.FieldID, survey.FieldDelete, survey.FieldCreatedID, survey.FieldStatus:
			values[i] = new(sql.NullInt64)
		case survey.FieldTitle, survey.FieldPic, survey.FieldDesc:
			values[i] = new(sql.NullString)
		case survey.FieldCreatedAt, survey.FieldUpdatedAt, survey.FieldStartAt, survey.FieldEndAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Survey fields.
func (s *Survey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case survey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case survey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case survey.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case survey.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				s.Delete = value.Int64
			}
		case survey.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				s.CreatedID = value.Int64
			}
		case survey.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.Int64
			}
		case survey.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case survey.FieldPic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic", values[i])
			} else if value.Valid {
				s.Pic = value.String
			}
		case survey.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				s.Desc = value.String
			}
		case survey.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				s.StartAt = value.Time
			}
		case survey.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				s.EndAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Survey.
// This includes values selected through modifiers, order, etc.
func (s *Survey) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryQuestion queries the "question" edge of the Survey entity.
func (s *Survey) QueryQuestion() *SurveyQuestionQuery {
	return NewSurveyClient(s.config).QueryQuestion(s)
}

// Update returns a builder for updating this Survey.
// Note that you need to call Survey.Unwrap() before calling this method if this Survey
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Survey) Update() *SurveyUpdateOne {
	return NewSurveyClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Survey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Survey) Unwrap() *Survey {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Survey is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Survey) String() string {
	var builder strings.Builder
	builder.WriteString("Survey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", s.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(s.Title)
	builder.WriteString(", ")
	builder.WriteString("pic=")
	builder.WriteString(s.Pic)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(s.Desc)
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(s.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(s.EndAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Surveys is a parsable slice of Survey.
type Surveys []*Survey
