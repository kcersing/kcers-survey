// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/dictionarydetail"
	"kcers-survey/biz/dal/db/mysql/ent/predicate"
	"kcers-survey/biz/dal/db/mysql/ent/role"
	"kcers-survey/biz/dal/db/mysql/ent/token"
	"kcers-survey/biz/dal/db/mysql/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetDelete sets the "delete" field.
func (uu *UserUpdate) SetDelete(i int64) *UserUpdate {
	uu.mutation.ResetDelete()
	uu.mutation.SetDelete(i)
	return uu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDelete(i *int64) *UserUpdate {
	if i != nil {
		uu.SetDelete(*i)
	}
	return uu
}

// AddDelete adds i to the "delete" field.
func (uu *UserUpdate) AddDelete(i int64) *UserUpdate {
	uu.mutation.AddDelete(i)
	return uu
}

// ClearDelete clears the value of the "delete" field.
func (uu *UserUpdate) ClearDelete() *UserUpdate {
	uu.mutation.ClearDelete()
	return uu
}

// SetCreatedID sets the "created_id" field.
func (uu *UserUpdate) SetCreatedID(i int64) *UserUpdate {
	uu.mutation.ResetCreatedID()
	uu.mutation.SetCreatedID(i)
	return uu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetCreatedID(*i)
	}
	return uu
}

// AddCreatedID adds i to the "created_id" field.
func (uu *UserUpdate) AddCreatedID(i int64) *UserUpdate {
	uu.mutation.AddCreatedID(i)
	return uu
}

// ClearCreatedID clears the value of the "created_id" field.
func (uu *UserUpdate) ClearCreatedID() *UserUpdate {
	uu.mutation.ClearCreatedID()
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(i int64) *UserUpdate {
	uu.mutation.ResetStatus()
	uu.mutation.SetStatus(i)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(i *int64) *UserUpdate {
	if i != nil {
		uu.SetStatus(*i)
	}
	return uu
}

// AddStatus adds i to the "status" field.
func (uu *UserUpdate) AddStatus(i int64) *UserUpdate {
	uu.mutation.AddStatus(i)
	return uu
}

// ClearStatus clears the value of the "status" field.
func (uu *UserUpdate) ClearStatus() *UserUpdate {
	uu.mutation.ClearStatus()
	return uu
}

// SetMobile sets the "mobile" field.
func (uu *UserUpdate) SetMobile(s string) *UserUpdate {
	uu.mutation.SetMobile(s)
	return uu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMobile(s *string) *UserUpdate {
	if s != nil {
		uu.SetMobile(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(i int64) *UserUpdate {
	uu.mutation.ResetGender()
	uu.mutation.SetGender(i)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(i *int64) *UserUpdate {
	if i != nil {
		uu.SetGender(*i)
	}
	return uu
}

// AddGender adds i to the "gender" field.
func (uu *UserUpdate) AddGender(i int64) *UserUpdate {
	uu.mutation.AddGender(i)
	return uu
}

// ClearGender clears the value of the "gender" field.
func (uu *UserUpdate) ClearGender() *UserUpdate {
	uu.mutation.ClearGender()
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetFunctions sets the "functions" field.
func (uu *UserUpdate) SetFunctions(s []string) *UserUpdate {
	uu.mutation.SetFunctions(s)
	return uu
}

// AppendFunctions appends s to the "functions" field.
func (uu *UserUpdate) AppendFunctions(s []string) *UserUpdate {
	uu.mutation.AppendFunctions(s)
	return uu
}

// SetJobTime sets the "job_time" field.
func (uu *UserUpdate) SetJobTime(i int64) *UserUpdate {
	uu.mutation.ResetJobTime()
	uu.mutation.SetJobTime(i)
	return uu
}

// SetNillableJobTime sets the "job_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableJobTime(i *int64) *UserUpdate {
	if i != nil {
		uu.SetJobTime(*i)
	}
	return uu
}

// AddJobTime adds i to the "job_time" field.
func (uu *UserUpdate) AddJobTime(i int64) *UserUpdate {
	uu.mutation.AddJobTime(i)
	return uu
}

// ClearJobTime clears the value of the "job_time" field.
func (uu *UserUpdate) ClearJobTime() *UserUpdate {
	uu.mutation.ClearJobTime()
	return uu
}

// SetDetail sets the "detail" field.
func (uu *UserUpdate) SetDetail(s string) *UserUpdate {
	uu.mutation.SetDetail(s)
	return uu
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDetail(s *string) *UserUpdate {
	if s != nil {
		uu.SetDetail(*s)
	}
	return uu
}

// ClearDetail clears the value of the "detail" field.
func (uu *UserUpdate) ClearDetail() *UserUpdate {
	uu.mutation.ClearDetail()
	return uu
}

// SetSideMode sets the "side_mode" field.
func (uu *UserUpdate) SetSideMode(s string) *UserUpdate {
	uu.mutation.SetSideMode(s)
	return uu
}

// SetNillableSideMode sets the "side_mode" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSideMode(s *string) *UserUpdate {
	if s != nil {
		uu.SetSideMode(*s)
	}
	return uu
}

// ClearSideMode clears the value of the "side_mode" field.
func (uu *UserUpdate) ClearSideMode() *UserUpdate {
	uu.mutation.ClearSideMode()
	return uu
}

// SetBaseColor sets the "base_color" field.
func (uu *UserUpdate) SetBaseColor(s string) *UserUpdate {
	uu.mutation.SetBaseColor(s)
	return uu
}

// SetNillableBaseColor sets the "base_color" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBaseColor(s *string) *UserUpdate {
	if s != nil {
		uu.SetBaseColor(*s)
	}
	return uu
}

// ClearBaseColor clears the value of the "base_color" field.
func (uu *UserUpdate) ClearBaseColor() *UserUpdate {
	uu.mutation.ClearBaseColor()
	return uu
}

// SetActiveColor sets the "active_color" field.
func (uu *UserUpdate) SetActiveColor(s string) *UserUpdate {
	uu.mutation.SetActiveColor(s)
	return uu
}

// SetNillableActiveColor sets the "active_color" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActiveColor(s *string) *UserUpdate {
	if s != nil {
		uu.SetActiveColor(*s)
	}
	return uu
}

// ClearActiveColor clears the value of the "active_color" field.
func (uu *UserUpdate) ClearActiveColor() *UserUpdate {
	uu.mutation.ClearActiveColor()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetWecom sets the "wecom" field.
func (uu *UserUpdate) SetWecom(s string) *UserUpdate {
	uu.mutation.SetWecom(s)
	return uu
}

// SetNillableWecom sets the "wecom" field if the given value is not nil.
func (uu *UserUpdate) SetNillableWecom(s *string) *UserUpdate {
	if s != nil {
		uu.SetWecom(*s)
	}
	return uu
}

// ClearWecom clears the value of the "wecom" field.
func (uu *UserUpdate) ClearWecom() *UserUpdate {
	uu.mutation.ClearWecom()
	return uu
}

// SetOrganization sets the "organization" field.
func (uu *UserUpdate) SetOrganization(s string) *UserUpdate {
	uu.mutation.SetOrganization(s)
	return uu
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOrganization(s *string) *UserUpdate {
	if s != nil {
		uu.SetOrganization(*s)
	}
	return uu
}

// ClearOrganization clears the value of the "organization" field.
func (uu *UserUpdate) ClearOrganization() *UserUpdate {
	uu.mutation.ClearOrganization()
	return uu
}

// SetDefaultVenueID sets the "default_venue_id" field.
func (uu *UserUpdate) SetDefaultVenueID(i int64) *UserUpdate {
	uu.mutation.ResetDefaultVenueID()
	uu.mutation.SetDefaultVenueID(i)
	return uu
}

// SetNillableDefaultVenueID sets the "default_venue_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDefaultVenueID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetDefaultVenueID(*i)
	}
	return uu
}

// AddDefaultVenueID adds i to the "default_venue_id" field.
func (uu *UserUpdate) AddDefaultVenueID(i int64) *UserUpdate {
	uu.mutation.AddDefaultVenueID(i)
	return uu
}

// ClearDefaultVenueID clears the value of the "default_venue_id" field.
func (uu *UserUpdate) ClearDefaultVenueID() *UserUpdate {
	uu.mutation.ClearDefaultVenueID()
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// ClearAvatar clears the value of the "avatar" field.
func (uu *UserUpdate) ClearAvatar() *UserUpdate {
	uu.mutation.ClearAvatar()
	return uu
}

// SetBirthday sets the "birthday" field.
func (uu *UserUpdate) SetBirthday(t time.Time) *UserUpdate {
	uu.mutation.SetBirthday(t)
	return uu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthday(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBirthday(*t)
	}
	return uu
}

// ClearBirthday clears the value of the "birthday" field.
func (uu *UserUpdate) ClearBirthday() *UserUpdate {
	uu.mutation.ClearBirthday()
	return uu
}

// SetTokenID sets the "token" edge to the Token entity by ID.
func (uu *UserUpdate) SetTokenID(id int64) *UserUpdate {
	uu.mutation.SetTokenID(id)
	return uu
}

// SetNillableTokenID sets the "token" edge to the Token entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableTokenID(id *int64) *UserUpdate {
	if id != nil {
		uu = uu.SetTokenID(*id)
	}
	return uu
}

// SetToken sets the "token" edge to the Token entity.
func (uu *UserUpdate) SetToken(t *Token) *UserUpdate {
	return uu.SetTokenID(t.ID)
}

// AddTagIDs adds the "tags" edge to the DictionaryDetail entity by IDs.
func (uu *UserUpdate) AddTagIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddTagIDs(ids...)
	return uu
}

// AddTags adds the "tags" edges to the DictionaryDetail entity.
func (uu *UserUpdate) AddTags(d ...*DictionaryDetail) *UserUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddTagIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uu *UserUpdate) AddRoleIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddRoleIDs(ids...)
	return uu
}

// AddRoles adds the "roles" edges to the Role entity.
func (uu *UserUpdate) AddRoles(r ...*Role) *UserUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRoleIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearToken clears the "token" edge to the Token entity.
func (uu *UserUpdate) ClearToken() *UserUpdate {
	uu.mutation.ClearToken()
	return uu
}

// ClearTags clears all "tags" edges to the DictionaryDetail entity.
func (uu *UserUpdate) ClearTags() *UserUpdate {
	uu.mutation.ClearTags()
	return uu
}

// RemoveTagIDs removes the "tags" edge to DictionaryDetail entities by IDs.
func (uu *UserUpdate) RemoveTagIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveTagIDs(ids...)
	return uu
}

// RemoveTags removes "tags" edges to DictionaryDetail entities.
func (uu *UserUpdate) RemoveTags(d ...*DictionaryDetail) *UserUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveTagIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (uu *UserUpdate) ClearRoles() *UserUpdate {
	uu.mutation.ClearRoles()
	return uu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (uu *UserUpdate) RemoveRoleIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveRoleIDs(ids...)
	return uu
}

// RemoveRoles removes "roles" edges to Role entities.
func (uu *UserUpdate) RemoveRoles(r ...*Role) *UserUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok && !uu.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Delete(); ok {
		_spec.SetField(user.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedDelete(); ok {
		_spec.AddField(user.FieldDelete, field.TypeInt64, value)
	}
	if uu.mutation.DeleteCleared() {
		_spec.ClearField(user.FieldDelete, field.TypeInt64)
	}
	if value, ok := uu.mutation.CreatedID(); ok {
		_spec.SetField(user.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedCreatedID(); ok {
		_spec.AddField(user.FieldCreatedID, field.TypeInt64, value)
	}
	if uu.mutation.CreatedIDCleared() {
		_spec.ClearField(user.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt64, value)
	}
	if uu.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeInt64)
	}
	if value, ok := uu.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt64, value)
	}
	if uu.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeInt64)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Functions(); ok {
		_spec.SetField(user.FieldFunctions, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedFunctions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldFunctions, value)
		})
	}
	if value, ok := uu.mutation.JobTime(); ok {
		_spec.SetField(user.FieldJobTime, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedJobTime(); ok {
		_spec.AddField(user.FieldJobTime, field.TypeInt64, value)
	}
	if uu.mutation.JobTimeCleared() {
		_spec.ClearField(user.FieldJobTime, field.TypeInt64)
	}
	if value, ok := uu.mutation.Detail(); ok {
		_spec.SetField(user.FieldDetail, field.TypeString, value)
	}
	if uu.mutation.DetailCleared() {
		_spec.ClearField(user.FieldDetail, field.TypeString)
	}
	if value, ok := uu.mutation.SideMode(); ok {
		_spec.SetField(user.FieldSideMode, field.TypeString, value)
	}
	if uu.mutation.SideModeCleared() {
		_spec.ClearField(user.FieldSideMode, field.TypeString)
	}
	if value, ok := uu.mutation.BaseColor(); ok {
		_spec.SetField(user.FieldBaseColor, field.TypeString, value)
	}
	if uu.mutation.BaseColorCleared() {
		_spec.ClearField(user.FieldBaseColor, field.TypeString)
	}
	if value, ok := uu.mutation.ActiveColor(); ok {
		_spec.SetField(user.FieldActiveColor, field.TypeString, value)
	}
	if uu.mutation.ActiveColorCleared() {
		_spec.ClearField(user.FieldActiveColor, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.Wecom(); ok {
		_spec.SetField(user.FieldWecom, field.TypeString, value)
	}
	if uu.mutation.WecomCleared() {
		_spec.ClearField(user.FieldWecom, field.TypeString)
	}
	if value, ok := uu.mutation.Organization(); ok {
		_spec.SetField(user.FieldOrganization, field.TypeString, value)
	}
	if uu.mutation.OrganizationCleared() {
		_spec.ClearField(user.FieldOrganization, field.TypeString)
	}
	if value, ok := uu.mutation.DefaultVenueID(); ok {
		_spec.SetField(user.FieldDefaultVenueID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedDefaultVenueID(); ok {
		_spec.AddField(user.FieldDefaultVenueID, field.TypeInt64, value)
	}
	if uu.mutation.DefaultVenueIDCleared() {
		_spec.ClearField(user.FieldDefaultVenueID, field.TypeInt64)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if uu.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := uu.mutation.Birthday(); ok {
		_spec.SetField(user.FieldBirthday, field.TypeTime, value)
	}
	if uu.mutation.BirthdayCleared() {
		_spec.ClearField(user.FieldBirthday, field.TypeTime)
	}
	if uu.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TokenTable,
			Columns: []string{user.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TokenTable,
			Columns: []string{user.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagsTable,
			Columns: []string{user.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !uu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagsTable,
			Columns: []string{user.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagsTable,
			Columns: []string{user.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !uu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetDelete sets the "delete" field.
func (uuo *UserUpdateOne) SetDelete(i int64) *UserUpdateOne {
	uuo.mutation.ResetDelete()
	uuo.mutation.SetDelete(i)
	return uuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDelete(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetDelete(*i)
	}
	return uuo
}

// AddDelete adds i to the "delete" field.
func (uuo *UserUpdateOne) AddDelete(i int64) *UserUpdateOne {
	uuo.mutation.AddDelete(i)
	return uuo
}

// ClearDelete clears the value of the "delete" field.
func (uuo *UserUpdateOne) ClearDelete() *UserUpdateOne {
	uuo.mutation.ClearDelete()
	return uuo
}

// SetCreatedID sets the "created_id" field.
func (uuo *UserUpdateOne) SetCreatedID(i int64) *UserUpdateOne {
	uuo.mutation.ResetCreatedID()
	uuo.mutation.SetCreatedID(i)
	return uuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetCreatedID(*i)
	}
	return uuo
}

// AddCreatedID adds i to the "created_id" field.
func (uuo *UserUpdateOne) AddCreatedID(i int64) *UserUpdateOne {
	uuo.mutation.AddCreatedID(i)
	return uuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (uuo *UserUpdateOne) ClearCreatedID() *UserUpdateOne {
	uuo.mutation.ClearCreatedID()
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(i int64) *UserUpdateOne {
	uuo.mutation.ResetStatus()
	uuo.mutation.SetStatus(i)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetStatus(*i)
	}
	return uuo
}

// AddStatus adds i to the "status" field.
func (uuo *UserUpdateOne) AddStatus(i int64) *UserUpdateOne {
	uuo.mutation.AddStatus(i)
	return uuo
}

// ClearStatus clears the value of the "status" field.
func (uuo *UserUpdateOne) ClearStatus() *UserUpdateOne {
	uuo.mutation.ClearStatus()
	return uuo
}

// SetMobile sets the "mobile" field.
func (uuo *UserUpdateOne) SetMobile(s string) *UserUpdateOne {
	uuo.mutation.SetMobile(s)
	return uuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMobile(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMobile(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(i int64) *UserUpdateOne {
	uuo.mutation.ResetGender()
	uuo.mutation.SetGender(i)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetGender(*i)
	}
	return uuo
}

// AddGender adds i to the "gender" field.
func (uuo *UserUpdateOne) AddGender(i int64) *UserUpdateOne {
	uuo.mutation.AddGender(i)
	return uuo
}

// ClearGender clears the value of the "gender" field.
func (uuo *UserUpdateOne) ClearGender() *UserUpdateOne {
	uuo.mutation.ClearGender()
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetFunctions sets the "functions" field.
func (uuo *UserUpdateOne) SetFunctions(s []string) *UserUpdateOne {
	uuo.mutation.SetFunctions(s)
	return uuo
}

// AppendFunctions appends s to the "functions" field.
func (uuo *UserUpdateOne) AppendFunctions(s []string) *UserUpdateOne {
	uuo.mutation.AppendFunctions(s)
	return uuo
}

// SetJobTime sets the "job_time" field.
func (uuo *UserUpdateOne) SetJobTime(i int64) *UserUpdateOne {
	uuo.mutation.ResetJobTime()
	uuo.mutation.SetJobTime(i)
	return uuo
}

// SetNillableJobTime sets the "job_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableJobTime(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetJobTime(*i)
	}
	return uuo
}

// AddJobTime adds i to the "job_time" field.
func (uuo *UserUpdateOne) AddJobTime(i int64) *UserUpdateOne {
	uuo.mutation.AddJobTime(i)
	return uuo
}

// ClearJobTime clears the value of the "job_time" field.
func (uuo *UserUpdateOne) ClearJobTime() *UserUpdateOne {
	uuo.mutation.ClearJobTime()
	return uuo
}

// SetDetail sets the "detail" field.
func (uuo *UserUpdateOne) SetDetail(s string) *UserUpdateOne {
	uuo.mutation.SetDetail(s)
	return uuo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDetail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDetail(*s)
	}
	return uuo
}

// ClearDetail clears the value of the "detail" field.
func (uuo *UserUpdateOne) ClearDetail() *UserUpdateOne {
	uuo.mutation.ClearDetail()
	return uuo
}

// SetSideMode sets the "side_mode" field.
func (uuo *UserUpdateOne) SetSideMode(s string) *UserUpdateOne {
	uuo.mutation.SetSideMode(s)
	return uuo
}

// SetNillableSideMode sets the "side_mode" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSideMode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSideMode(*s)
	}
	return uuo
}

// ClearSideMode clears the value of the "side_mode" field.
func (uuo *UserUpdateOne) ClearSideMode() *UserUpdateOne {
	uuo.mutation.ClearSideMode()
	return uuo
}

// SetBaseColor sets the "base_color" field.
func (uuo *UserUpdateOne) SetBaseColor(s string) *UserUpdateOne {
	uuo.mutation.SetBaseColor(s)
	return uuo
}

// SetNillableBaseColor sets the "base_color" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBaseColor(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBaseColor(*s)
	}
	return uuo
}

// ClearBaseColor clears the value of the "base_color" field.
func (uuo *UserUpdateOne) ClearBaseColor() *UserUpdateOne {
	uuo.mutation.ClearBaseColor()
	return uuo
}

// SetActiveColor sets the "active_color" field.
func (uuo *UserUpdateOne) SetActiveColor(s string) *UserUpdateOne {
	uuo.mutation.SetActiveColor(s)
	return uuo
}

// SetNillableActiveColor sets the "active_color" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActiveColor(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetActiveColor(*s)
	}
	return uuo
}

// ClearActiveColor clears the value of the "active_color" field.
func (uuo *UserUpdateOne) ClearActiveColor() *UserUpdateOne {
	uuo.mutation.ClearActiveColor()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetWecom sets the "wecom" field.
func (uuo *UserUpdateOne) SetWecom(s string) *UserUpdateOne {
	uuo.mutation.SetWecom(s)
	return uuo
}

// SetNillableWecom sets the "wecom" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWecom(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetWecom(*s)
	}
	return uuo
}

// ClearWecom clears the value of the "wecom" field.
func (uuo *UserUpdateOne) ClearWecom() *UserUpdateOne {
	uuo.mutation.ClearWecom()
	return uuo
}

// SetOrganization sets the "organization" field.
func (uuo *UserUpdateOne) SetOrganization(s string) *UserUpdateOne {
	uuo.mutation.SetOrganization(s)
	return uuo
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOrganization(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOrganization(*s)
	}
	return uuo
}

// ClearOrganization clears the value of the "organization" field.
func (uuo *UserUpdateOne) ClearOrganization() *UserUpdateOne {
	uuo.mutation.ClearOrganization()
	return uuo
}

// SetDefaultVenueID sets the "default_venue_id" field.
func (uuo *UserUpdateOne) SetDefaultVenueID(i int64) *UserUpdateOne {
	uuo.mutation.ResetDefaultVenueID()
	uuo.mutation.SetDefaultVenueID(i)
	return uuo
}

// SetNillableDefaultVenueID sets the "default_venue_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDefaultVenueID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetDefaultVenueID(*i)
	}
	return uuo
}

// AddDefaultVenueID adds i to the "default_venue_id" field.
func (uuo *UserUpdateOne) AddDefaultVenueID(i int64) *UserUpdateOne {
	uuo.mutation.AddDefaultVenueID(i)
	return uuo
}

// ClearDefaultVenueID clears the value of the "default_venue_id" field.
func (uuo *UserUpdateOne) ClearDefaultVenueID() *UserUpdateOne {
	uuo.mutation.ClearDefaultVenueID()
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// ClearAvatar clears the value of the "avatar" field.
func (uuo *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	uuo.mutation.ClearAvatar()
	return uuo
}

// SetBirthday sets the "birthday" field.
func (uuo *UserUpdateOne) SetBirthday(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBirthday(t)
	return uuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthday(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBirthday(*t)
	}
	return uuo
}

// ClearBirthday clears the value of the "birthday" field.
func (uuo *UserUpdateOne) ClearBirthday() *UserUpdateOne {
	uuo.mutation.ClearBirthday()
	return uuo
}

// SetTokenID sets the "token" edge to the Token entity by ID.
func (uuo *UserUpdateOne) SetTokenID(id int64) *UserUpdateOne {
	uuo.mutation.SetTokenID(id)
	return uuo
}

// SetNillableTokenID sets the "token" edge to the Token entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTokenID(id *int64) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetTokenID(*id)
	}
	return uuo
}

// SetToken sets the "token" edge to the Token entity.
func (uuo *UserUpdateOne) SetToken(t *Token) *UserUpdateOne {
	return uuo.SetTokenID(t.ID)
}

// AddTagIDs adds the "tags" edge to the DictionaryDetail entity by IDs.
func (uuo *UserUpdateOne) AddTagIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddTagIDs(ids...)
	return uuo
}

// AddTags adds the "tags" edges to the DictionaryDetail entity.
func (uuo *UserUpdateOne) AddTags(d ...*DictionaryDetail) *UserUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddTagIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uuo *UserUpdateOne) AddRoleIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddRoleIDs(ids...)
	return uuo
}

// AddRoles adds the "roles" edges to the Role entity.
func (uuo *UserUpdateOne) AddRoles(r ...*Role) *UserUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRoleIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearToken clears the "token" edge to the Token entity.
func (uuo *UserUpdateOne) ClearToken() *UserUpdateOne {
	uuo.mutation.ClearToken()
	return uuo
}

// ClearTags clears all "tags" edges to the DictionaryDetail entity.
func (uuo *UserUpdateOne) ClearTags() *UserUpdateOne {
	uuo.mutation.ClearTags()
	return uuo
}

// RemoveTagIDs removes the "tags" edge to DictionaryDetail entities by IDs.
func (uuo *UserUpdateOne) RemoveTagIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveTagIDs(ids...)
	return uuo
}

// RemoveTags removes "tags" edges to DictionaryDetail entities.
func (uuo *UserUpdateOne) RemoveTags(d ...*DictionaryDetail) *UserUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveTagIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (uuo *UserUpdateOne) ClearRoles() *UserUpdateOne {
	uuo.mutation.ClearRoles()
	return uuo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (uuo *UserUpdateOne) RemoveRoleIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveRoleIDs(ids...)
	return uuo
}

// RemoveRoles removes "roles" edges to Role entities.
func (uuo *UserUpdateOne) RemoveRoles(r ...*Role) *UserUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok && !uuo.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Delete(); ok {
		_spec.SetField(user.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedDelete(); ok {
		_spec.AddField(user.FieldDelete, field.TypeInt64, value)
	}
	if uuo.mutation.DeleteCleared() {
		_spec.ClearField(user.FieldDelete, field.TypeInt64)
	}
	if value, ok := uuo.mutation.CreatedID(); ok {
		_spec.SetField(user.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(user.FieldCreatedID, field.TypeInt64, value)
	}
	if uuo.mutation.CreatedIDCleared() {
		_spec.ClearField(user.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt64, value)
	}
	if uuo.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt64, value)
	}
	if uuo.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Functions(); ok {
		_spec.SetField(user.FieldFunctions, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedFunctions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldFunctions, value)
		})
	}
	if value, ok := uuo.mutation.JobTime(); ok {
		_spec.SetField(user.FieldJobTime, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedJobTime(); ok {
		_spec.AddField(user.FieldJobTime, field.TypeInt64, value)
	}
	if uuo.mutation.JobTimeCleared() {
		_spec.ClearField(user.FieldJobTime, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Detail(); ok {
		_spec.SetField(user.FieldDetail, field.TypeString, value)
	}
	if uuo.mutation.DetailCleared() {
		_spec.ClearField(user.FieldDetail, field.TypeString)
	}
	if value, ok := uuo.mutation.SideMode(); ok {
		_spec.SetField(user.FieldSideMode, field.TypeString, value)
	}
	if uuo.mutation.SideModeCleared() {
		_spec.ClearField(user.FieldSideMode, field.TypeString)
	}
	if value, ok := uuo.mutation.BaseColor(); ok {
		_spec.SetField(user.FieldBaseColor, field.TypeString, value)
	}
	if uuo.mutation.BaseColorCleared() {
		_spec.ClearField(user.FieldBaseColor, field.TypeString)
	}
	if value, ok := uuo.mutation.ActiveColor(); ok {
		_spec.SetField(user.FieldActiveColor, field.TypeString, value)
	}
	if uuo.mutation.ActiveColorCleared() {
		_spec.ClearField(user.FieldActiveColor, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.Wecom(); ok {
		_spec.SetField(user.FieldWecom, field.TypeString, value)
	}
	if uuo.mutation.WecomCleared() {
		_spec.ClearField(user.FieldWecom, field.TypeString)
	}
	if value, ok := uuo.mutation.Organization(); ok {
		_spec.SetField(user.FieldOrganization, field.TypeString, value)
	}
	if uuo.mutation.OrganizationCleared() {
		_spec.ClearField(user.FieldOrganization, field.TypeString)
	}
	if value, ok := uuo.mutation.DefaultVenueID(); ok {
		_spec.SetField(user.FieldDefaultVenueID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedDefaultVenueID(); ok {
		_spec.AddField(user.FieldDefaultVenueID, field.TypeInt64, value)
	}
	if uuo.mutation.DefaultVenueIDCleared() {
		_spec.ClearField(user.FieldDefaultVenueID, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if uuo.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := uuo.mutation.Birthday(); ok {
		_spec.SetField(user.FieldBirthday, field.TypeTime, value)
	}
	if uuo.mutation.BirthdayCleared() {
		_spec.ClearField(user.FieldBirthday, field.TypeTime)
	}
	if uuo.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TokenTable,
			Columns: []string{user.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TokenTable,
			Columns: []string{user.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagsTable,
			Columns: []string{user.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !uuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagsTable,
			Columns: []string{user.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagsTable,
			Columns: []string{user.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !uuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
