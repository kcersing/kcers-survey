// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/predicate"
	"kcers-survey/biz/dal/db/mysql/ent/survey"
	"kcers-survey/biz/dal/db/mysql/ent/surveyquestion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyQuestionUpdate is the builder for updating SurveyQuestion entities.
type SurveyQuestionUpdate struct {
	config
	hooks     []Hook
	mutation  *SurveyQuestionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SurveyQuestionUpdate builder.
func (squ *SurveyQuestionUpdate) Where(ps ...predicate.SurveyQuestion) *SurveyQuestionUpdate {
	squ.mutation.Where(ps...)
	return squ
}

// SetUpdatedAt sets the "updated_at" field.
func (squ *SurveyQuestionUpdate) SetUpdatedAt(t time.Time) *SurveyQuestionUpdate {
	squ.mutation.SetUpdatedAt(t)
	return squ
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (squ *SurveyQuestionUpdate) ClearUpdatedAt() *SurveyQuestionUpdate {
	squ.mutation.ClearUpdatedAt()
	return squ
}

// SetDelete sets the "delete" field.
func (squ *SurveyQuestionUpdate) SetDelete(i int64) *SurveyQuestionUpdate {
	squ.mutation.ResetDelete()
	squ.mutation.SetDelete(i)
	return squ
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (squ *SurveyQuestionUpdate) SetNillableDelete(i *int64) *SurveyQuestionUpdate {
	if i != nil {
		squ.SetDelete(*i)
	}
	return squ
}

// AddDelete adds i to the "delete" field.
func (squ *SurveyQuestionUpdate) AddDelete(i int64) *SurveyQuestionUpdate {
	squ.mutation.AddDelete(i)
	return squ
}

// ClearDelete clears the value of the "delete" field.
func (squ *SurveyQuestionUpdate) ClearDelete() *SurveyQuestionUpdate {
	squ.mutation.ClearDelete()
	return squ
}

// SetCreatedID sets the "created_id" field.
func (squ *SurveyQuestionUpdate) SetCreatedID(i int64) *SurveyQuestionUpdate {
	squ.mutation.ResetCreatedID()
	squ.mutation.SetCreatedID(i)
	return squ
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (squ *SurveyQuestionUpdate) SetNillableCreatedID(i *int64) *SurveyQuestionUpdate {
	if i != nil {
		squ.SetCreatedID(*i)
	}
	return squ
}

// AddCreatedID adds i to the "created_id" field.
func (squ *SurveyQuestionUpdate) AddCreatedID(i int64) *SurveyQuestionUpdate {
	squ.mutation.AddCreatedID(i)
	return squ
}

// ClearCreatedID clears the value of the "created_id" field.
func (squ *SurveyQuestionUpdate) ClearCreatedID() *SurveyQuestionUpdate {
	squ.mutation.ClearCreatedID()
	return squ
}

// SetStatus sets the "status" field.
func (squ *SurveyQuestionUpdate) SetStatus(i int64) *SurveyQuestionUpdate {
	squ.mutation.ResetStatus()
	squ.mutation.SetStatus(i)
	return squ
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (squ *SurveyQuestionUpdate) SetNillableStatus(i *int64) *SurveyQuestionUpdate {
	if i != nil {
		squ.SetStatus(*i)
	}
	return squ
}

// AddStatus adds i to the "status" field.
func (squ *SurveyQuestionUpdate) AddStatus(i int64) *SurveyQuestionUpdate {
	squ.mutation.AddStatus(i)
	return squ
}

// ClearStatus clears the value of the "status" field.
func (squ *SurveyQuestionUpdate) ClearStatus() *SurveyQuestionUpdate {
	squ.mutation.ClearStatus()
	return squ
}

// SetSurveyID sets the "survey_id" field.
func (squ *SurveyQuestionUpdate) SetSurveyID(i int64) *SurveyQuestionUpdate {
	squ.mutation.SetSurveyID(i)
	return squ
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (squ *SurveyQuestionUpdate) SetNillableSurveyID(i *int64) *SurveyQuestionUpdate {
	if i != nil {
		squ.SetSurveyID(*i)
	}
	return squ
}

// ClearSurveyID clears the value of the "survey_id" field.
func (squ *SurveyQuestionUpdate) ClearSurveyID() *SurveyQuestionUpdate {
	squ.mutation.ClearSurveyID()
	return squ
}

// SetParentID sets the "parent_id" field.
func (squ *SurveyQuestionUpdate) SetParentID(i int64) *SurveyQuestionUpdate {
	squ.mutation.ResetParentID()
	squ.mutation.SetParentID(i)
	return squ
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (squ *SurveyQuestionUpdate) SetNillableParentID(i *int64) *SurveyQuestionUpdate {
	if i != nil {
		squ.SetParentID(*i)
	}
	return squ
}

// AddParentID adds i to the "parent_id" field.
func (squ *SurveyQuestionUpdate) AddParentID(i int64) *SurveyQuestionUpdate {
	squ.mutation.AddParentID(i)
	return squ
}

// ClearParentID clears the value of the "parent_id" field.
func (squ *SurveyQuestionUpdate) ClearParentID() *SurveyQuestionUpdate {
	squ.mutation.ClearParentID()
	return squ
}

// SetContent sets the "content" field.
func (squ *SurveyQuestionUpdate) SetContent(s string) *SurveyQuestionUpdate {
	squ.mutation.SetContent(s)
	return squ
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (squ *SurveyQuestionUpdate) SetNillableContent(s *string) *SurveyQuestionUpdate {
	if s != nil {
		squ.SetContent(*s)
	}
	return squ
}

// ClearContent clears the value of the "content" field.
func (squ *SurveyQuestionUpdate) ClearContent() *SurveyQuestionUpdate {
	squ.mutation.ClearContent()
	return squ
}

// SetType sets the "type" field.
func (squ *SurveyQuestionUpdate) SetType(s string) *SurveyQuestionUpdate {
	squ.mutation.SetType(s)
	return squ
}

// SetNillableType sets the "type" field if the given value is not nil.
func (squ *SurveyQuestionUpdate) SetNillableType(s *string) *SurveyQuestionUpdate {
	if s != nil {
		squ.SetType(*s)
	}
	return squ
}

// ClearType clears the value of the "type" field.
func (squ *SurveyQuestionUpdate) ClearType() *SurveyQuestionUpdate {
	squ.mutation.ClearType()
	return squ
}

// SetSort sets the "sort" field.
func (squ *SurveyQuestionUpdate) SetSort(i int64) *SurveyQuestionUpdate {
	squ.mutation.ResetSort()
	squ.mutation.SetSort(i)
	return squ
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (squ *SurveyQuestionUpdate) SetNillableSort(i *int64) *SurveyQuestionUpdate {
	if i != nil {
		squ.SetSort(*i)
	}
	return squ
}

// AddSort adds i to the "sort" field.
func (squ *SurveyQuestionUpdate) AddSort(i int64) *SurveyQuestionUpdate {
	squ.mutation.AddSort(i)
	return squ
}

// ClearSort clears the value of the "sort" field.
func (squ *SurveyQuestionUpdate) ClearSort() *SurveyQuestionUpdate {
	squ.mutation.ClearSort()
	return squ
}

// SetRequired sets the "required" field.
func (squ *SurveyQuestionUpdate) SetRequired(i int64) *SurveyQuestionUpdate {
	squ.mutation.ResetRequired()
	squ.mutation.SetRequired(i)
	return squ
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (squ *SurveyQuestionUpdate) SetNillableRequired(i *int64) *SurveyQuestionUpdate {
	if i != nil {
		squ.SetRequired(*i)
	}
	return squ
}

// AddRequired adds i to the "required" field.
func (squ *SurveyQuestionUpdate) AddRequired(i int64) *SurveyQuestionUpdate {
	squ.mutation.AddRequired(i)
	return squ
}

// ClearRequired clears the value of the "required" field.
func (squ *SurveyQuestionUpdate) ClearRequired() *SurveyQuestionUpdate {
	squ.mutation.ClearRequired()
	return squ
}

// SetOptions sets the "options" field.
func (squ *SurveyQuestionUpdate) SetOptions(m map[string]string) *SurveyQuestionUpdate {
	squ.mutation.SetOptions(m)
	return squ
}

// ClearOptions clears the value of the "options" field.
func (squ *SurveyQuestionUpdate) ClearOptions() *SurveyQuestionUpdate {
	squ.mutation.ClearOptions()
	return squ
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (squ *SurveyQuestionUpdate) SetSurvey(s *Survey) *SurveyQuestionUpdate {
	return squ.SetSurveyID(s.ID)
}

// Mutation returns the SurveyQuestionMutation object of the builder.
func (squ *SurveyQuestionUpdate) Mutation() *SurveyQuestionMutation {
	return squ.mutation
}

// ClearSurvey clears the "survey" edge to the Survey entity.
func (squ *SurveyQuestionUpdate) ClearSurvey() *SurveyQuestionUpdate {
	squ.mutation.ClearSurvey()
	return squ
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (squ *SurveyQuestionUpdate) Save(ctx context.Context) (int, error) {
	squ.defaults()
	return withHooks(ctx, squ.sqlSave, squ.mutation, squ.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (squ *SurveyQuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := squ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (squ *SurveyQuestionUpdate) Exec(ctx context.Context) error {
	_, err := squ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (squ *SurveyQuestionUpdate) ExecX(ctx context.Context) {
	if err := squ.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (squ *SurveyQuestionUpdate) defaults() {
	if _, ok := squ.mutation.UpdatedAt(); !ok && !squ.mutation.UpdatedAtCleared() {
		v := surveyquestion.UpdateDefaultUpdatedAt()
		squ.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (squ *SurveyQuestionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyQuestionUpdate {
	squ.modifiers = append(squ.modifiers, modifiers...)
	return squ
}

func (squ *SurveyQuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyquestion.Table, surveyquestion.Columns, sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64))
	if ps := squ.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if squ.mutation.CreatedAtCleared() {
		_spec.ClearField(surveyquestion.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := squ.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if squ.mutation.UpdatedAtCleared() {
		_spec.ClearField(surveyquestion.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := squ.mutation.Delete(); ok {
		_spec.SetField(surveyquestion.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.AddedDelete(); ok {
		_spec.AddField(surveyquestion.FieldDelete, field.TypeInt64, value)
	}
	if squ.mutation.DeleteCleared() {
		_spec.ClearField(surveyquestion.FieldDelete, field.TypeInt64)
	}
	if value, ok := squ.mutation.CreatedID(); ok {
		_spec.SetField(surveyquestion.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.AddedCreatedID(); ok {
		_spec.AddField(surveyquestion.FieldCreatedID, field.TypeInt64, value)
	}
	if squ.mutation.CreatedIDCleared() {
		_spec.ClearField(surveyquestion.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := squ.mutation.Status(); ok {
		_spec.SetField(surveyquestion.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.AddedStatus(); ok {
		_spec.AddField(surveyquestion.FieldStatus, field.TypeInt64, value)
	}
	if squ.mutation.StatusCleared() {
		_spec.ClearField(surveyquestion.FieldStatus, field.TypeInt64)
	}
	if value, ok := squ.mutation.ParentID(); ok {
		_spec.SetField(surveyquestion.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.AddedParentID(); ok {
		_spec.AddField(surveyquestion.FieldParentID, field.TypeInt64, value)
	}
	if squ.mutation.ParentIDCleared() {
		_spec.ClearField(surveyquestion.FieldParentID, field.TypeInt64)
	}
	if value, ok := squ.mutation.Content(); ok {
		_spec.SetField(surveyquestion.FieldContent, field.TypeString, value)
	}
	if squ.mutation.ContentCleared() {
		_spec.ClearField(surveyquestion.FieldContent, field.TypeString)
	}
	if value, ok := squ.mutation.GetType(); ok {
		_spec.SetField(surveyquestion.FieldType, field.TypeString, value)
	}
	if squ.mutation.TypeCleared() {
		_spec.ClearField(surveyquestion.FieldType, field.TypeString)
	}
	if value, ok := squ.mutation.Sort(); ok {
		_spec.SetField(surveyquestion.FieldSort, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.AddedSort(); ok {
		_spec.AddField(surveyquestion.FieldSort, field.TypeInt64, value)
	}
	if squ.mutation.SortCleared() {
		_spec.ClearField(surveyquestion.FieldSort, field.TypeInt64)
	}
	if value, ok := squ.mutation.Required(); ok {
		_spec.SetField(surveyquestion.FieldRequired, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.AddedRequired(); ok {
		_spec.AddField(surveyquestion.FieldRequired, field.TypeInt64, value)
	}
	if squ.mutation.RequiredCleared() {
		_spec.ClearField(surveyquestion.FieldRequired, field.TypeInt64)
	}
	if value, ok := squ.mutation.Options(); ok {
		_spec.SetField(surveyquestion.FieldOptions, field.TypeJSON, value)
	}
	if squ.mutation.OptionsCleared() {
		_spec.ClearField(surveyquestion.FieldOptions, field.TypeJSON)
	}
	if squ.mutation.SurveyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestion.SurveyTable,
			Columns: []string{surveyquestion.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := squ.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestion.SurveyTable,
			Columns: []string{surveyquestion.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(squ.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, squ.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	squ.mutation.done = true
	return n, nil
}

// SurveyQuestionUpdateOne is the builder for updating a single SurveyQuestion entity.
type SurveyQuestionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SurveyQuestionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (squo *SurveyQuestionUpdateOne) SetUpdatedAt(t time.Time) *SurveyQuestionUpdateOne {
	squo.mutation.SetUpdatedAt(t)
	return squo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (squo *SurveyQuestionUpdateOne) ClearUpdatedAt() *SurveyQuestionUpdateOne {
	squo.mutation.ClearUpdatedAt()
	return squo
}

// SetDelete sets the "delete" field.
func (squo *SurveyQuestionUpdateOne) SetDelete(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.ResetDelete()
	squo.mutation.SetDelete(i)
	return squo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (squo *SurveyQuestionUpdateOne) SetNillableDelete(i *int64) *SurveyQuestionUpdateOne {
	if i != nil {
		squo.SetDelete(*i)
	}
	return squo
}

// AddDelete adds i to the "delete" field.
func (squo *SurveyQuestionUpdateOne) AddDelete(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.AddDelete(i)
	return squo
}

// ClearDelete clears the value of the "delete" field.
func (squo *SurveyQuestionUpdateOne) ClearDelete() *SurveyQuestionUpdateOne {
	squo.mutation.ClearDelete()
	return squo
}

// SetCreatedID sets the "created_id" field.
func (squo *SurveyQuestionUpdateOne) SetCreatedID(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.ResetCreatedID()
	squo.mutation.SetCreatedID(i)
	return squo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (squo *SurveyQuestionUpdateOne) SetNillableCreatedID(i *int64) *SurveyQuestionUpdateOne {
	if i != nil {
		squo.SetCreatedID(*i)
	}
	return squo
}

// AddCreatedID adds i to the "created_id" field.
func (squo *SurveyQuestionUpdateOne) AddCreatedID(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.AddCreatedID(i)
	return squo
}

// ClearCreatedID clears the value of the "created_id" field.
func (squo *SurveyQuestionUpdateOne) ClearCreatedID() *SurveyQuestionUpdateOne {
	squo.mutation.ClearCreatedID()
	return squo
}

// SetStatus sets the "status" field.
func (squo *SurveyQuestionUpdateOne) SetStatus(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.ResetStatus()
	squo.mutation.SetStatus(i)
	return squo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (squo *SurveyQuestionUpdateOne) SetNillableStatus(i *int64) *SurveyQuestionUpdateOne {
	if i != nil {
		squo.SetStatus(*i)
	}
	return squo
}

// AddStatus adds i to the "status" field.
func (squo *SurveyQuestionUpdateOne) AddStatus(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.AddStatus(i)
	return squo
}

// ClearStatus clears the value of the "status" field.
func (squo *SurveyQuestionUpdateOne) ClearStatus() *SurveyQuestionUpdateOne {
	squo.mutation.ClearStatus()
	return squo
}

// SetSurveyID sets the "survey_id" field.
func (squo *SurveyQuestionUpdateOne) SetSurveyID(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.SetSurveyID(i)
	return squo
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (squo *SurveyQuestionUpdateOne) SetNillableSurveyID(i *int64) *SurveyQuestionUpdateOne {
	if i != nil {
		squo.SetSurveyID(*i)
	}
	return squo
}

// ClearSurveyID clears the value of the "survey_id" field.
func (squo *SurveyQuestionUpdateOne) ClearSurveyID() *SurveyQuestionUpdateOne {
	squo.mutation.ClearSurveyID()
	return squo
}

// SetParentID sets the "parent_id" field.
func (squo *SurveyQuestionUpdateOne) SetParentID(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.ResetParentID()
	squo.mutation.SetParentID(i)
	return squo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (squo *SurveyQuestionUpdateOne) SetNillableParentID(i *int64) *SurveyQuestionUpdateOne {
	if i != nil {
		squo.SetParentID(*i)
	}
	return squo
}

// AddParentID adds i to the "parent_id" field.
func (squo *SurveyQuestionUpdateOne) AddParentID(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.AddParentID(i)
	return squo
}

// ClearParentID clears the value of the "parent_id" field.
func (squo *SurveyQuestionUpdateOne) ClearParentID() *SurveyQuestionUpdateOne {
	squo.mutation.ClearParentID()
	return squo
}

// SetContent sets the "content" field.
func (squo *SurveyQuestionUpdateOne) SetContent(s string) *SurveyQuestionUpdateOne {
	squo.mutation.SetContent(s)
	return squo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (squo *SurveyQuestionUpdateOne) SetNillableContent(s *string) *SurveyQuestionUpdateOne {
	if s != nil {
		squo.SetContent(*s)
	}
	return squo
}

// ClearContent clears the value of the "content" field.
func (squo *SurveyQuestionUpdateOne) ClearContent() *SurveyQuestionUpdateOne {
	squo.mutation.ClearContent()
	return squo
}

// SetType sets the "type" field.
func (squo *SurveyQuestionUpdateOne) SetType(s string) *SurveyQuestionUpdateOne {
	squo.mutation.SetType(s)
	return squo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (squo *SurveyQuestionUpdateOne) SetNillableType(s *string) *SurveyQuestionUpdateOne {
	if s != nil {
		squo.SetType(*s)
	}
	return squo
}

// ClearType clears the value of the "type" field.
func (squo *SurveyQuestionUpdateOne) ClearType() *SurveyQuestionUpdateOne {
	squo.mutation.ClearType()
	return squo
}

// SetSort sets the "sort" field.
func (squo *SurveyQuestionUpdateOne) SetSort(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.ResetSort()
	squo.mutation.SetSort(i)
	return squo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (squo *SurveyQuestionUpdateOne) SetNillableSort(i *int64) *SurveyQuestionUpdateOne {
	if i != nil {
		squo.SetSort(*i)
	}
	return squo
}

// AddSort adds i to the "sort" field.
func (squo *SurveyQuestionUpdateOne) AddSort(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.AddSort(i)
	return squo
}

// ClearSort clears the value of the "sort" field.
func (squo *SurveyQuestionUpdateOne) ClearSort() *SurveyQuestionUpdateOne {
	squo.mutation.ClearSort()
	return squo
}

// SetRequired sets the "required" field.
func (squo *SurveyQuestionUpdateOne) SetRequired(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.ResetRequired()
	squo.mutation.SetRequired(i)
	return squo
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (squo *SurveyQuestionUpdateOne) SetNillableRequired(i *int64) *SurveyQuestionUpdateOne {
	if i != nil {
		squo.SetRequired(*i)
	}
	return squo
}

// AddRequired adds i to the "required" field.
func (squo *SurveyQuestionUpdateOne) AddRequired(i int64) *SurveyQuestionUpdateOne {
	squo.mutation.AddRequired(i)
	return squo
}

// ClearRequired clears the value of the "required" field.
func (squo *SurveyQuestionUpdateOne) ClearRequired() *SurveyQuestionUpdateOne {
	squo.mutation.ClearRequired()
	return squo
}

// SetOptions sets the "options" field.
func (squo *SurveyQuestionUpdateOne) SetOptions(m map[string]string) *SurveyQuestionUpdateOne {
	squo.mutation.SetOptions(m)
	return squo
}

// ClearOptions clears the value of the "options" field.
func (squo *SurveyQuestionUpdateOne) ClearOptions() *SurveyQuestionUpdateOne {
	squo.mutation.ClearOptions()
	return squo
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (squo *SurveyQuestionUpdateOne) SetSurvey(s *Survey) *SurveyQuestionUpdateOne {
	return squo.SetSurveyID(s.ID)
}

// Mutation returns the SurveyQuestionMutation object of the builder.
func (squo *SurveyQuestionUpdateOne) Mutation() *SurveyQuestionMutation {
	return squo.mutation
}

// ClearSurvey clears the "survey" edge to the Survey entity.
func (squo *SurveyQuestionUpdateOne) ClearSurvey() *SurveyQuestionUpdateOne {
	squo.mutation.ClearSurvey()
	return squo
}

// Where appends a list predicates to the SurveyQuestionUpdate builder.
func (squo *SurveyQuestionUpdateOne) Where(ps ...predicate.SurveyQuestion) *SurveyQuestionUpdateOne {
	squo.mutation.Where(ps...)
	return squo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (squo *SurveyQuestionUpdateOne) Select(field string, fields ...string) *SurveyQuestionUpdateOne {
	squo.fields = append([]string{field}, fields...)
	return squo
}

// Save executes the query and returns the updated SurveyQuestion entity.
func (squo *SurveyQuestionUpdateOne) Save(ctx context.Context) (*SurveyQuestion, error) {
	squo.defaults()
	return withHooks(ctx, squo.sqlSave, squo.mutation, squo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (squo *SurveyQuestionUpdateOne) SaveX(ctx context.Context) *SurveyQuestion {
	node, err := squo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (squo *SurveyQuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := squo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (squo *SurveyQuestionUpdateOne) ExecX(ctx context.Context) {
	if err := squo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (squo *SurveyQuestionUpdateOne) defaults() {
	if _, ok := squo.mutation.UpdatedAt(); !ok && !squo.mutation.UpdatedAtCleared() {
		v := surveyquestion.UpdateDefaultUpdatedAt()
		squo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (squo *SurveyQuestionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyQuestionUpdateOne {
	squo.modifiers = append(squo.modifiers, modifiers...)
	return squo
}

func (squo *SurveyQuestionUpdateOne) sqlSave(ctx context.Context) (_node *SurveyQuestion, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyquestion.Table, surveyquestion.Columns, sqlgraph.NewFieldSpec(surveyquestion.FieldID, field.TypeInt64))
	id, ok := squo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SurveyQuestion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := squo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, surveyquestion.FieldID)
		for _, f := range fields {
			if !surveyquestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != surveyquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := squo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if squo.mutation.CreatedAtCleared() {
		_spec.ClearField(surveyquestion.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := squo.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if squo.mutation.UpdatedAtCleared() {
		_spec.ClearField(surveyquestion.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := squo.mutation.Delete(); ok {
		_spec.SetField(surveyquestion.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.AddedDelete(); ok {
		_spec.AddField(surveyquestion.FieldDelete, field.TypeInt64, value)
	}
	if squo.mutation.DeleteCleared() {
		_spec.ClearField(surveyquestion.FieldDelete, field.TypeInt64)
	}
	if value, ok := squo.mutation.CreatedID(); ok {
		_spec.SetField(surveyquestion.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.AddedCreatedID(); ok {
		_spec.AddField(surveyquestion.FieldCreatedID, field.TypeInt64, value)
	}
	if squo.mutation.CreatedIDCleared() {
		_spec.ClearField(surveyquestion.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := squo.mutation.Status(); ok {
		_spec.SetField(surveyquestion.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.AddedStatus(); ok {
		_spec.AddField(surveyquestion.FieldStatus, field.TypeInt64, value)
	}
	if squo.mutation.StatusCleared() {
		_spec.ClearField(surveyquestion.FieldStatus, field.TypeInt64)
	}
	if value, ok := squo.mutation.ParentID(); ok {
		_spec.SetField(surveyquestion.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.AddedParentID(); ok {
		_spec.AddField(surveyquestion.FieldParentID, field.TypeInt64, value)
	}
	if squo.mutation.ParentIDCleared() {
		_spec.ClearField(surveyquestion.FieldParentID, field.TypeInt64)
	}
	if value, ok := squo.mutation.Content(); ok {
		_spec.SetField(surveyquestion.FieldContent, field.TypeString, value)
	}
	if squo.mutation.ContentCleared() {
		_spec.ClearField(surveyquestion.FieldContent, field.TypeString)
	}
	if value, ok := squo.mutation.GetType(); ok {
		_spec.SetField(surveyquestion.FieldType, field.TypeString, value)
	}
	if squo.mutation.TypeCleared() {
		_spec.ClearField(surveyquestion.FieldType, field.TypeString)
	}
	if value, ok := squo.mutation.Sort(); ok {
		_spec.SetField(surveyquestion.FieldSort, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.AddedSort(); ok {
		_spec.AddField(surveyquestion.FieldSort, field.TypeInt64, value)
	}
	if squo.mutation.SortCleared() {
		_spec.ClearField(surveyquestion.FieldSort, field.TypeInt64)
	}
	if value, ok := squo.mutation.Required(); ok {
		_spec.SetField(surveyquestion.FieldRequired, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.AddedRequired(); ok {
		_spec.AddField(surveyquestion.FieldRequired, field.TypeInt64, value)
	}
	if squo.mutation.RequiredCleared() {
		_spec.ClearField(surveyquestion.FieldRequired, field.TypeInt64)
	}
	if value, ok := squo.mutation.Options(); ok {
		_spec.SetField(surveyquestion.FieldOptions, field.TypeJSON, value)
	}
	if squo.mutation.OptionsCleared() {
		_spec.ClearField(surveyquestion.FieldOptions, field.TypeJSON)
	}
	if squo.mutation.SurveyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestion.SurveyTable,
			Columns: []string{surveyquestion.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := squo.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyquestion.SurveyTable,
			Columns: []string{surveyquestion.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(squo.modifiers...)
	_node = &SurveyQuestion{config: squo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, squo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	squo.mutation.done = true
	return _node, nil
}
