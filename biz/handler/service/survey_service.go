// Code generated by hertz generator.

package service

import (
	"context"
	surveyService "kcers-survey/biz/infras/service/survey"
	"kcers-survey/biz/pkg/errno"
	"kcers-survey/biz/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	base "kcers-survey/idl_gen/model/base"
	service "kcers-survey/idl_gen/model/service"
)

// CreateSurvey .
// @router /service/survey/create [POST]
func CreateSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateSurveyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = surveyService.NewSurvey(ctx, c).CreateSurvey(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateSurvey .
// @router /service/survey/update [POST]
func UpdateSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateSurveyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = surveyService.NewSurvey(ctx, c).UpdateSurvey(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// GetSurvey .
// @router /service/survey/info [POST]
func GetSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	info, err := surveyService.NewSurvey(ctx, c).GetSurvey(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// ListSurvey .
// @router /service/survey/list [POST]
func ListSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.SurveyListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	list, total, err := surveyService.NewSurvey(ctx, c).ListSurvey(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// DeleteSurvey .
// @router /service/survey/delete [POST]
func DeleteSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = surveyService.NewSurvey(ctx, c).DeleteSurvey(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// CreateQuestion .
// @router /service/survey/question-create [POST]
func CreateQuestion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateQuestionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = surveyService.NewSurvey(ctx, c).CreateQuestion(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateQuestion .
// @router /service/survey/question-update [POST]
func UpdateQuestion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateQuestionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = surveyService.NewSurvey(ctx, c).UpdateQuestion(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// DeleteQuestion .
// @router /service/survey/question-delete [POST]
func DeleteQuestion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = surveyService.NewSurvey(ctx, c).DeleteQuestion(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// CreateResponse .
// @router /service/survey/response-create [POST]
func CreateResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateResponseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = surveyService.NewSurvey(ctx, c).CreateResponse(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateResponse .
// @router /service/survey/response-update [POST]
func UpdateResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateResponseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = surveyService.NewSurvey(ctx, c).UpdateResponse(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// GetResponse .
// @router /service/survey/response-info [POST]
func GetResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	info, err := surveyService.NewSurvey(ctx, c).GetResponse(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// ListResponse .
// @router /service/survey/response-list [POST]
func ListResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.ResponseListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	list, total, err := surveyService.NewSurvey(ctx, c).ListResponse(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// DeleteResponse .
// @router /service/survey/response-delete [POST]
func DeleteResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = surveyService.NewSurvey(ctx, c).DeleteResponse(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}
