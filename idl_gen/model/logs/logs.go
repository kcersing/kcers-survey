// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package logs

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"kcers-survey/idl_gen/model/base"
)

// 日志列表请求数据
type LogsListReq struct {
	Page       int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize   int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Type       string `thrift:"type,3,optional" form:"type" json:"type" query:"type"`
	Method     string `thrift:"method,4,optional" form:"method" json:"method" query:"method"`
	API        string `thrift:"api,5,optional" form:"api" json:"api" query:"api"`
	Success    bool   `thrift:"success,6,optional" form:"success" json:"success" query:"success"`
	Operatorsr string `thrift:"operatorsr,7,optional" form:"operatorsr" json:"operatorsr" query:"operatorsr"`
	Identity   int64  `thrift:"identity,8,optional" form:"identity" json:"identity" query:"identity"`
}

func NewLogsListReq() *LogsListReq {
	return &LogsListReq{

		Page:       0,
		PageSize:   0,
		Type:       "",
		Method:     "",
		API:        "",
		Success:    true,
		Operatorsr: "",
		Identity:   0,
	}
}

func (p *LogsListReq) InitDefault() {
	p.Page = 0
	p.PageSize = 0
	p.Type = ""
	p.Method = ""
	p.API = ""
	p.Success = true
	p.Operatorsr = ""
	p.Identity = 0
}

var LogsListReq_Page_DEFAULT int64 = 0

func (p *LogsListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return LogsListReq_Page_DEFAULT
	}
	return p.Page
}

var LogsListReq_PageSize_DEFAULT int64 = 0

func (p *LogsListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return LogsListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var LogsListReq_Type_DEFAULT string = ""

func (p *LogsListReq) GetType() (v string) {
	if !p.IsSetType() {
		return LogsListReq_Type_DEFAULT
	}
	return p.Type
}

var LogsListReq_Method_DEFAULT string = ""

func (p *LogsListReq) GetMethod() (v string) {
	if !p.IsSetMethod() {
		return LogsListReq_Method_DEFAULT
	}
	return p.Method
}

var LogsListReq_API_DEFAULT string = ""

func (p *LogsListReq) GetAPI() (v string) {
	if !p.IsSetAPI() {
		return LogsListReq_API_DEFAULT
	}
	return p.API
}

var LogsListReq_Success_DEFAULT bool = true

func (p *LogsListReq) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return LogsListReq_Success_DEFAULT
	}
	return p.Success
}

var LogsListReq_Operatorsr_DEFAULT string = ""

func (p *LogsListReq) GetOperatorsr() (v string) {
	if !p.IsSetOperatorsr() {
		return LogsListReq_Operatorsr_DEFAULT
	}
	return p.Operatorsr
}

var LogsListReq_Identity_DEFAULT int64 = 0

func (p *LogsListReq) GetIdentity() (v int64) {
	if !p.IsSetIdentity() {
		return LogsListReq_Identity_DEFAULT
	}
	return p.Identity
}

var fieldIDToName_LogsListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "type",
	4: "method",
	5: "api",
	6: "success",
	7: "operatorsr",
	8: "identity",
}

func (p *LogsListReq) IsSetPage() bool {
	return p.Page != LogsListReq_Page_DEFAULT
}

func (p *LogsListReq) IsSetPageSize() bool {
	return p.PageSize != LogsListReq_PageSize_DEFAULT
}

func (p *LogsListReq) IsSetType() bool {
	return p.Type != LogsListReq_Type_DEFAULT
}

func (p *LogsListReq) IsSetMethod() bool {
	return p.Method != LogsListReq_Method_DEFAULT
}

func (p *LogsListReq) IsSetAPI() bool {
	return p.API != LogsListReq_API_DEFAULT
}

func (p *LogsListReq) IsSetSuccess() bool {
	return p.Success != LogsListReq_Success_DEFAULT
}

func (p *LogsListReq) IsSetOperatorsr() bool {
	return p.Operatorsr != LogsListReq_Operatorsr_DEFAULT
}

func (p *LogsListReq) IsSetIdentity() bool {
	return p.Identity != LogsListReq_Identity_DEFAULT
}

func (p *LogsListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LogsListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LogsListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *LogsListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *LogsListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *LogsListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Method = _field
	return nil
}
func (p *LogsListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.API = _field
	return nil
}
func (p *LogsListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Success = _field
	return nil
}
func (p *LogsListReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Operatorsr = _field
	return nil
}
func (p *LogsListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Identity = _field
	return nil
}

func (p *LogsListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LogsListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LogsListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LogsListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LogsListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LogsListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMethod() {
		if err = oprot.WriteFieldBegin("method", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Method); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LogsListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAPI() {
		if err = oprot.WriteFieldBegin("api", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.API); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *LogsListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *LogsListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorsr() {
		if err = oprot.WriteFieldBegin("operatorsr", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Operatorsr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *LogsListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentity() {
		if err = oprot.WriteFieldBegin("identity", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Identity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *LogsListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogsListReq(%+v)", *p)

}

// 日志信息
type LogsInfo struct {
	Type        string `thrift:"type,1,optional" form:"type" json:"type" query:"type"`
	Method      string `thrift:"method,2,optional" form:"method" json:"method" query:"method"`
	API         string `thrift:"api,3,optional" form:"api" json:"api" query:"api"`
	Success     bool   `thrift:"success,4,optional" form:"success" json:"success" query:"success"`
	ReqContent  string `thrift:"reqContent,5,optional" form:"reqContent" json:"reqContent" query:"reqContent"`
	RespContent string `thrift:"respContent,6,optional" form:"respContent" json:"respContent" query:"respContent"`
	IP          string `thrift:"ip,7,optional" form:"ip" json:"ip" query:"ip"`
	UserAgent   string `thrift:"userAgent,8,optional" form:"userAgent" json:"userAgent" query:"userAgent"`
	Operatorsr  string `thrift:"operatorsr,9,optional" form:"operatorsr" json:"operatorsr" query:"operatorsr"`
	Time        int64  `thrift:"time,10,optional" form:"time" json:"time" query:"time"`
	CreatedAt   string `thrift:"createdAt,11,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt   string `thrift:"updatedAt,12,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
	Identity    int64  `thrift:"identity,13,optional" form:"identity" json:"identity" query:"identity"`
	ID          int64  `thrift:"id,251,optional" form:"id" json:"id" query:"id"`
}

func NewLogsInfo() *LogsInfo {
	return &LogsInfo{

		Type:        "",
		Method:      "",
		API:         "",
		Success:     true,
		ReqContent:  "",
		RespContent: "",
		IP:          "",
		UserAgent:   "",
		Operatorsr:  "",
		Time:        0,
		CreatedAt:   "",
		UpdatedAt:   "",
		Identity:    0,
		ID:          0,
	}
}

func (p *LogsInfo) InitDefault() {
	p.Type = ""
	p.Method = ""
	p.API = ""
	p.Success = true
	p.ReqContent = ""
	p.RespContent = ""
	p.IP = ""
	p.UserAgent = ""
	p.Operatorsr = ""
	p.Time = 0
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Identity = 0
	p.ID = 0
}

var LogsInfo_Type_DEFAULT string = ""

func (p *LogsInfo) GetType() (v string) {
	if !p.IsSetType() {
		return LogsInfo_Type_DEFAULT
	}
	return p.Type
}

var LogsInfo_Method_DEFAULT string = ""

func (p *LogsInfo) GetMethod() (v string) {
	if !p.IsSetMethod() {
		return LogsInfo_Method_DEFAULT
	}
	return p.Method
}

var LogsInfo_API_DEFAULT string = ""

func (p *LogsInfo) GetAPI() (v string) {
	if !p.IsSetAPI() {
		return LogsInfo_API_DEFAULT
	}
	return p.API
}

var LogsInfo_Success_DEFAULT bool = true

func (p *LogsInfo) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return LogsInfo_Success_DEFAULT
	}
	return p.Success
}

var LogsInfo_ReqContent_DEFAULT string = ""

func (p *LogsInfo) GetReqContent() (v string) {
	if !p.IsSetReqContent() {
		return LogsInfo_ReqContent_DEFAULT
	}
	return p.ReqContent
}

var LogsInfo_RespContent_DEFAULT string = ""

func (p *LogsInfo) GetRespContent() (v string) {
	if !p.IsSetRespContent() {
		return LogsInfo_RespContent_DEFAULT
	}
	return p.RespContent
}

var LogsInfo_IP_DEFAULT string = ""

func (p *LogsInfo) GetIP() (v string) {
	if !p.IsSetIP() {
		return LogsInfo_IP_DEFAULT
	}
	return p.IP
}

var LogsInfo_UserAgent_DEFAULT string = ""

func (p *LogsInfo) GetUserAgent() (v string) {
	if !p.IsSetUserAgent() {
		return LogsInfo_UserAgent_DEFAULT
	}
	return p.UserAgent
}

var LogsInfo_Operatorsr_DEFAULT string = ""

func (p *LogsInfo) GetOperatorsr() (v string) {
	if !p.IsSetOperatorsr() {
		return LogsInfo_Operatorsr_DEFAULT
	}
	return p.Operatorsr
}

var LogsInfo_Time_DEFAULT int64 = 0

func (p *LogsInfo) GetTime() (v int64) {
	if !p.IsSetTime() {
		return LogsInfo_Time_DEFAULT
	}
	return p.Time
}

var LogsInfo_CreatedAt_DEFAULT string = ""

func (p *LogsInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return LogsInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var LogsInfo_UpdatedAt_DEFAULT string = ""

func (p *LogsInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return LogsInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var LogsInfo_Identity_DEFAULT int64 = 0

func (p *LogsInfo) GetIdentity() (v int64) {
	if !p.IsSetIdentity() {
		return LogsInfo_Identity_DEFAULT
	}
	return p.Identity
}

var LogsInfo_ID_DEFAULT int64 = 0

func (p *LogsInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return LogsInfo_ID_DEFAULT
	}
	return p.ID
}

var fieldIDToName_LogsInfo = map[int16]string{
	1:   "type",
	2:   "method",
	3:   "api",
	4:   "success",
	5:   "reqContent",
	6:   "respContent",
	7:   "ip",
	8:   "userAgent",
	9:   "operatorsr",
	10:  "time",
	11:  "createdAt",
	12:  "updatedAt",
	13:  "identity",
	251: "id",
}

func (p *LogsInfo) IsSetType() bool {
	return p.Type != LogsInfo_Type_DEFAULT
}

func (p *LogsInfo) IsSetMethod() bool {
	return p.Method != LogsInfo_Method_DEFAULT
}

func (p *LogsInfo) IsSetAPI() bool {
	return p.API != LogsInfo_API_DEFAULT
}

func (p *LogsInfo) IsSetSuccess() bool {
	return p.Success != LogsInfo_Success_DEFAULT
}

func (p *LogsInfo) IsSetReqContent() bool {
	return p.ReqContent != LogsInfo_ReqContent_DEFAULT
}

func (p *LogsInfo) IsSetRespContent() bool {
	return p.RespContent != LogsInfo_RespContent_DEFAULT
}

func (p *LogsInfo) IsSetIP() bool {
	return p.IP != LogsInfo_IP_DEFAULT
}

func (p *LogsInfo) IsSetUserAgent() bool {
	return p.UserAgent != LogsInfo_UserAgent_DEFAULT
}

func (p *LogsInfo) IsSetOperatorsr() bool {
	return p.Operatorsr != LogsInfo_Operatorsr_DEFAULT
}

func (p *LogsInfo) IsSetTime() bool {
	return p.Time != LogsInfo_Time_DEFAULT
}

func (p *LogsInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != LogsInfo_CreatedAt_DEFAULT
}

func (p *LogsInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != LogsInfo_UpdatedAt_DEFAULT
}

func (p *LogsInfo) IsSetIdentity() bool {
	return p.Identity != LogsInfo_Identity_DEFAULT
}

func (p *LogsInfo) IsSetID() bool {
	return p.ID != LogsInfo_ID_DEFAULT
}

func (p *LogsInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 251:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField251(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LogsInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LogsInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *LogsInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Method = _field
	return nil
}
func (p *LogsInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.API = _field
	return nil
}
func (p *LogsInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Success = _field
	return nil
}
func (p *LogsInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ReqContent = _field
	return nil
}
func (p *LogsInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RespContent = _field
	return nil
}
func (p *LogsInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IP = _field
	return nil
}
func (p *LogsInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserAgent = _field
	return nil
}
func (p *LogsInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Operatorsr = _field
	return nil
}
func (p *LogsInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Time = _field
	return nil
}
func (p *LogsInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *LogsInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *LogsInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Identity = _field
	return nil
}
func (p *LogsInfo) ReadField251(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}

func (p *LogsInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LogsInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField251(oprot); err != nil {
			fieldId = 251
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LogsInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LogsInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMethod() {
		if err = oprot.WriteFieldBegin("method", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Method); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LogsInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAPI() {
		if err = oprot.WriteFieldBegin("api", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.API); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LogsInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LogsInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqContent() {
		if err = oprot.WriteFieldBegin("reqContent", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ReqContent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *LogsInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRespContent() {
		if err = oprot.WriteFieldBegin("respContent", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.RespContent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *LogsInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIP() {
		if err = oprot.WriteFieldBegin("ip", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.IP); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *LogsInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserAgent() {
		if err = oprot.WriteFieldBegin("userAgent", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UserAgent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *LogsInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorsr() {
		if err = oprot.WriteFieldBegin("operatorsr", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Operatorsr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *LogsInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTime() {
		if err = oprot.WriteFieldBegin("time", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Time); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *LogsInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *LogsInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *LogsInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentity() {
		if err = oprot.WriteFieldBegin("identity", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Identity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *LogsInfo) writeField251(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 251); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 end error: ", p), err)
}

func (p *LogsInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogsInfo(%+v)", *p)

}

type LogsService interface {
	// Get logs list | 获取日志列表
	GetLogsList(ctx context.Context, req *LogsListReq) (r *base.NilResponse, err error)
	// Delete logs | 删除日志信息
	DeleteLogs(ctx context.Context, req *base.Empty) (r *base.NilResponse, err error)
}

type LogsServiceClient struct {
	c thrift.TClient
}

func NewLogsServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LogsServiceClient {
	return &LogsServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLogsServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LogsServiceClient {
	return &LogsServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLogsServiceClient(c thrift.TClient) *LogsServiceClient {
	return &LogsServiceClient{
		c: c,
	}
}

func (p *LogsServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LogsServiceClient) GetLogsList(ctx context.Context, req *LogsListReq) (r *base.NilResponse, err error) {
	var _args LogsServiceGetLogsListArgs
	_args.Req = req
	var _result LogsServiceGetLogsListResult
	if err = p.Client_().Call(ctx, "GetLogsList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LogsServiceClient) DeleteLogs(ctx context.Context, req *base.Empty) (r *base.NilResponse, err error) {
	var _args LogsServiceDeleteLogsArgs
	_args.Req = req
	var _result LogsServiceDeleteLogsResult
	if err = p.Client_().Call(ctx, "DeleteLogs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type LogsServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LogsService
}

func (p *LogsServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LogsServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LogsServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLogsServiceProcessor(handler LogsService) *LogsServiceProcessor {
	self := &LogsServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetLogsList", &logsServiceProcessorGetLogsList{handler: handler})
	self.AddToProcessorMap("DeleteLogs", &logsServiceProcessorDeleteLogs{handler: handler})
	return self
}
func (p *LogsServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type logsServiceProcessorGetLogsList struct {
	handler LogsService
}

func (p *logsServiceProcessorGetLogsList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LogsServiceGetLogsListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLogsList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LogsServiceGetLogsListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.GetLogsList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLogsList: "+err2.Error())
		oprot.WriteMessageBegin("GetLogsList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLogsList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type logsServiceProcessorDeleteLogs struct {
	handler LogsService
}

func (p *logsServiceProcessorDeleteLogs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LogsServiceDeleteLogsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteLogs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LogsServiceDeleteLogsResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.DeleteLogs(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteLogs: "+err2.Error())
		oprot.WriteMessageBegin("DeleteLogs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteLogs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type LogsServiceGetLogsListArgs struct {
	Req *LogsListReq `thrift:"req,1"`
}

func NewLogsServiceGetLogsListArgs() *LogsServiceGetLogsListArgs {
	return &LogsServiceGetLogsListArgs{}
}

func (p *LogsServiceGetLogsListArgs) InitDefault() {
}

var LogsServiceGetLogsListArgs_Req_DEFAULT *LogsListReq

func (p *LogsServiceGetLogsListArgs) GetReq() (v *LogsListReq) {
	if !p.IsSetReq() {
		return LogsServiceGetLogsListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_LogsServiceGetLogsListArgs = map[int16]string{
	1: "req",
}

func (p *LogsServiceGetLogsListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LogsServiceGetLogsListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LogsServiceGetLogsListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LogsServiceGetLogsListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewLogsListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LogsServiceGetLogsListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLogsList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LogsServiceGetLogsListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LogsServiceGetLogsListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogsServiceGetLogsListArgs(%+v)", *p)

}

type LogsServiceGetLogsListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewLogsServiceGetLogsListResult() *LogsServiceGetLogsListResult {
	return &LogsServiceGetLogsListResult{}
}

func (p *LogsServiceGetLogsListResult) InitDefault() {
}

var LogsServiceGetLogsListResult_Success_DEFAULT *base.NilResponse

func (p *LogsServiceGetLogsListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return LogsServiceGetLogsListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_LogsServiceGetLogsListResult = map[int16]string{
	0: "success",
}

func (p *LogsServiceGetLogsListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LogsServiceGetLogsListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LogsServiceGetLogsListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LogsServiceGetLogsListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LogsServiceGetLogsListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLogsList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LogsServiceGetLogsListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LogsServiceGetLogsListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogsServiceGetLogsListResult(%+v)", *p)

}

type LogsServiceDeleteLogsArgs struct {
	Req *base.Empty `thrift:"req,1"`
}

func NewLogsServiceDeleteLogsArgs() *LogsServiceDeleteLogsArgs {
	return &LogsServiceDeleteLogsArgs{}
}

func (p *LogsServiceDeleteLogsArgs) InitDefault() {
}

var LogsServiceDeleteLogsArgs_Req_DEFAULT *base.Empty

func (p *LogsServiceDeleteLogsArgs) GetReq() (v *base.Empty) {
	if !p.IsSetReq() {
		return LogsServiceDeleteLogsArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_LogsServiceDeleteLogsArgs = map[int16]string{
	1: "req",
}

func (p *LogsServiceDeleteLogsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LogsServiceDeleteLogsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LogsServiceDeleteLogsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LogsServiceDeleteLogsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LogsServiceDeleteLogsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteLogs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LogsServiceDeleteLogsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LogsServiceDeleteLogsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogsServiceDeleteLogsArgs(%+v)", *p)

}

type LogsServiceDeleteLogsResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewLogsServiceDeleteLogsResult() *LogsServiceDeleteLogsResult {
	return &LogsServiceDeleteLogsResult{}
}

func (p *LogsServiceDeleteLogsResult) InitDefault() {
}

var LogsServiceDeleteLogsResult_Success_DEFAULT *base.NilResponse

func (p *LogsServiceDeleteLogsResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return LogsServiceDeleteLogsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_LogsServiceDeleteLogsResult = map[int16]string{
	0: "success",
}

func (p *LogsServiceDeleteLogsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LogsServiceDeleteLogsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LogsServiceDeleteLogsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LogsServiceDeleteLogsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LogsServiceDeleteLogsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteLogs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LogsServiceDeleteLogsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LogsServiceDeleteLogsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogsServiceDeleteLogsResult(%+v)", *p)

}
