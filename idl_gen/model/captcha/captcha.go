// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package captcha

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"kcers-survey/idl_gen/model/base"
)

type CaptchaReq struct {
	Mobile string `thrift:"mobile,1,optional" form:"mobile" json:"mobile" query:"mobile"`
	Type   int64  `thrift:"type,2,optional" form:"type" json:"type" query:"type"`
}

func NewCaptchaReq() *CaptchaReq {
	return &CaptchaReq{

		Mobile: "",
		Type:   1,
	}
}

func (p *CaptchaReq) InitDefault() {
	p.Mobile = ""
	p.Type = 1
}

var CaptchaReq_Mobile_DEFAULT string = ""

func (p *CaptchaReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return CaptchaReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var CaptchaReq_Type_DEFAULT int64 = 1

func (p *CaptchaReq) GetType() (v int64) {
	if !p.IsSetType() {
		return CaptchaReq_Type_DEFAULT
	}
	return p.Type
}

var fieldIDToName_CaptchaReq = map[int16]string{
	1: "mobile",
	2: "type",
}

func (p *CaptchaReq) IsSetMobile() bool {
	return p.Mobile != CaptchaReq_Mobile_DEFAULT
}

func (p *CaptchaReq) IsSetType() bool {
	return p.Type != CaptchaReq_Type_DEFAULT
}

func (p *CaptchaReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CaptchaReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CaptchaReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *CaptchaReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}

func (p *CaptchaReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CaptchaReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CaptchaReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CaptchaReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CaptchaReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CaptchaReq(%+v)", *p)

}

type CaptchaAdminService interface {
	//获取验证码
	Captcha(ctx context.Context, req *base.Empty) (r *base.NilResponse, err error)

	SmsCaptcha(ctx context.Context, req *CaptchaReq) (r *base.NilResponse, err error)

	ImgCaptcha(ctx context.Context, req *base.Empty) (r *base.NilResponse, err error)
}

type CaptchaAdminServiceClient struct {
	c thrift.TClient
}

func NewCaptchaAdminServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CaptchaAdminServiceClient {
	return &CaptchaAdminServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCaptchaAdminServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CaptchaAdminServiceClient {
	return &CaptchaAdminServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCaptchaAdminServiceClient(c thrift.TClient) *CaptchaAdminServiceClient {
	return &CaptchaAdminServiceClient{
		c: c,
	}
}

func (p *CaptchaAdminServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CaptchaAdminServiceClient) Captcha(ctx context.Context, req *base.Empty) (r *base.NilResponse, err error) {
	var _args CaptchaAdminServiceCaptchaArgs
	_args.Req = req
	var _result CaptchaAdminServiceCaptchaResult
	if err = p.Client_().Call(ctx, "Captcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CaptchaAdminServiceClient) SmsCaptcha(ctx context.Context, req *CaptchaReq) (r *base.NilResponse, err error) {
	var _args CaptchaAdminServiceSmsCaptchaArgs
	_args.Req = req
	var _result CaptchaAdminServiceSmsCaptchaResult
	if err = p.Client_().Call(ctx, "SmsCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CaptchaAdminServiceClient) ImgCaptcha(ctx context.Context, req *base.Empty) (r *base.NilResponse, err error) {
	var _args CaptchaAdminServiceImgCaptchaArgs
	_args.Req = req
	var _result CaptchaAdminServiceImgCaptchaResult
	if err = p.Client_().Call(ctx, "ImgCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CaptchaAdminServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CaptchaAdminService
}

func (p *CaptchaAdminServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CaptchaAdminServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CaptchaAdminServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCaptchaAdminServiceProcessor(handler CaptchaAdminService) *CaptchaAdminServiceProcessor {
	self := &CaptchaAdminServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Captcha", &captchaAdminServiceProcessorCaptcha{handler: handler})
	self.AddToProcessorMap("SmsCaptcha", &captchaAdminServiceProcessorSmsCaptcha{handler: handler})
	self.AddToProcessorMap("ImgCaptcha", &captchaAdminServiceProcessorImgCaptcha{handler: handler})
	return self
}
func (p *CaptchaAdminServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type captchaAdminServiceProcessorCaptcha struct {
	handler CaptchaAdminService
}

func (p *captchaAdminServiceProcessorCaptcha) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CaptchaAdminServiceCaptchaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Captcha", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CaptchaAdminServiceCaptchaResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.Captcha(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Captcha: "+err2.Error())
		oprot.WriteMessageBegin("Captcha", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Captcha", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type captchaAdminServiceProcessorSmsCaptcha struct {
	handler CaptchaAdminService
}

func (p *captchaAdminServiceProcessorSmsCaptcha) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CaptchaAdminServiceSmsCaptchaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SmsCaptcha", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CaptchaAdminServiceSmsCaptchaResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.SmsCaptcha(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SmsCaptcha: "+err2.Error())
		oprot.WriteMessageBegin("SmsCaptcha", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SmsCaptcha", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type captchaAdminServiceProcessorImgCaptcha struct {
	handler CaptchaAdminService
}

func (p *captchaAdminServiceProcessorImgCaptcha) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CaptchaAdminServiceImgCaptchaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ImgCaptcha", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CaptchaAdminServiceImgCaptchaResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ImgCaptcha(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ImgCaptcha: "+err2.Error())
		oprot.WriteMessageBegin("ImgCaptcha", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ImgCaptcha", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CaptchaAdminServiceCaptchaArgs struct {
	Req *base.Empty `thrift:"req,1"`
}

func NewCaptchaAdminServiceCaptchaArgs() *CaptchaAdminServiceCaptchaArgs {
	return &CaptchaAdminServiceCaptchaArgs{}
}

func (p *CaptchaAdminServiceCaptchaArgs) InitDefault() {
}

var CaptchaAdminServiceCaptchaArgs_Req_DEFAULT *base.Empty

func (p *CaptchaAdminServiceCaptchaArgs) GetReq() (v *base.Empty) {
	if !p.IsSetReq() {
		return CaptchaAdminServiceCaptchaArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CaptchaAdminServiceCaptchaArgs = map[int16]string{
	1: "req",
}

func (p *CaptchaAdminServiceCaptchaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CaptchaAdminServiceCaptchaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CaptchaAdminServiceCaptchaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CaptchaAdminServiceCaptchaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CaptchaAdminServiceCaptchaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Captcha_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CaptchaAdminServiceCaptchaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CaptchaAdminServiceCaptchaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CaptchaAdminServiceCaptchaArgs(%+v)", *p)

}

type CaptchaAdminServiceCaptchaResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCaptchaAdminServiceCaptchaResult() *CaptchaAdminServiceCaptchaResult {
	return &CaptchaAdminServiceCaptchaResult{}
}

func (p *CaptchaAdminServiceCaptchaResult) InitDefault() {
}

var CaptchaAdminServiceCaptchaResult_Success_DEFAULT *base.NilResponse

func (p *CaptchaAdminServiceCaptchaResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CaptchaAdminServiceCaptchaResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CaptchaAdminServiceCaptchaResult = map[int16]string{
	0: "success",
}

func (p *CaptchaAdminServiceCaptchaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CaptchaAdminServiceCaptchaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CaptchaAdminServiceCaptchaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CaptchaAdminServiceCaptchaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CaptchaAdminServiceCaptchaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Captcha_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CaptchaAdminServiceCaptchaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CaptchaAdminServiceCaptchaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CaptchaAdminServiceCaptchaResult(%+v)", *p)

}

type CaptchaAdminServiceSmsCaptchaArgs struct {
	Req *CaptchaReq `thrift:"req,1"`
}

func NewCaptchaAdminServiceSmsCaptchaArgs() *CaptchaAdminServiceSmsCaptchaArgs {
	return &CaptchaAdminServiceSmsCaptchaArgs{}
}

func (p *CaptchaAdminServiceSmsCaptchaArgs) InitDefault() {
}

var CaptchaAdminServiceSmsCaptchaArgs_Req_DEFAULT *CaptchaReq

func (p *CaptchaAdminServiceSmsCaptchaArgs) GetReq() (v *CaptchaReq) {
	if !p.IsSetReq() {
		return CaptchaAdminServiceSmsCaptchaArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CaptchaAdminServiceSmsCaptchaArgs = map[int16]string{
	1: "req",
}

func (p *CaptchaAdminServiceSmsCaptchaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CaptchaAdminServiceSmsCaptchaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CaptchaAdminServiceSmsCaptchaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CaptchaAdminServiceSmsCaptchaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCaptchaReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CaptchaAdminServiceSmsCaptchaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SmsCaptcha_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CaptchaAdminServiceSmsCaptchaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CaptchaAdminServiceSmsCaptchaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CaptchaAdminServiceSmsCaptchaArgs(%+v)", *p)

}

type CaptchaAdminServiceSmsCaptchaResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCaptchaAdminServiceSmsCaptchaResult() *CaptchaAdminServiceSmsCaptchaResult {
	return &CaptchaAdminServiceSmsCaptchaResult{}
}

func (p *CaptchaAdminServiceSmsCaptchaResult) InitDefault() {
}

var CaptchaAdminServiceSmsCaptchaResult_Success_DEFAULT *base.NilResponse

func (p *CaptchaAdminServiceSmsCaptchaResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CaptchaAdminServiceSmsCaptchaResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CaptchaAdminServiceSmsCaptchaResult = map[int16]string{
	0: "success",
}

func (p *CaptchaAdminServiceSmsCaptchaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CaptchaAdminServiceSmsCaptchaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CaptchaAdminServiceSmsCaptchaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CaptchaAdminServiceSmsCaptchaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CaptchaAdminServiceSmsCaptchaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SmsCaptcha_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CaptchaAdminServiceSmsCaptchaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CaptchaAdminServiceSmsCaptchaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CaptchaAdminServiceSmsCaptchaResult(%+v)", *p)

}

type CaptchaAdminServiceImgCaptchaArgs struct {
	Req *base.Empty `thrift:"req,1"`
}

func NewCaptchaAdminServiceImgCaptchaArgs() *CaptchaAdminServiceImgCaptchaArgs {
	return &CaptchaAdminServiceImgCaptchaArgs{}
}

func (p *CaptchaAdminServiceImgCaptchaArgs) InitDefault() {
}

var CaptchaAdminServiceImgCaptchaArgs_Req_DEFAULT *base.Empty

func (p *CaptchaAdminServiceImgCaptchaArgs) GetReq() (v *base.Empty) {
	if !p.IsSetReq() {
		return CaptchaAdminServiceImgCaptchaArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CaptchaAdminServiceImgCaptchaArgs = map[int16]string{
	1: "req",
}

func (p *CaptchaAdminServiceImgCaptchaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CaptchaAdminServiceImgCaptchaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CaptchaAdminServiceImgCaptchaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CaptchaAdminServiceImgCaptchaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CaptchaAdminServiceImgCaptchaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImgCaptcha_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CaptchaAdminServiceImgCaptchaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CaptchaAdminServiceImgCaptchaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CaptchaAdminServiceImgCaptchaArgs(%+v)", *p)

}

type CaptchaAdminServiceImgCaptchaResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCaptchaAdminServiceImgCaptchaResult() *CaptchaAdminServiceImgCaptchaResult {
	return &CaptchaAdminServiceImgCaptchaResult{}
}

func (p *CaptchaAdminServiceImgCaptchaResult) InitDefault() {
}

var CaptchaAdminServiceImgCaptchaResult_Success_DEFAULT *base.NilResponse

func (p *CaptchaAdminServiceImgCaptchaResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CaptchaAdminServiceImgCaptchaResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CaptchaAdminServiceImgCaptchaResult = map[int16]string{
	0: "success",
}

func (p *CaptchaAdminServiceImgCaptchaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CaptchaAdminServiceImgCaptchaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CaptchaAdminServiceImgCaptchaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CaptchaAdminServiceImgCaptchaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CaptchaAdminServiceImgCaptchaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImgCaptcha_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CaptchaAdminServiceImgCaptchaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CaptchaAdminServiceImgCaptchaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CaptchaAdminServiceImgCaptchaResult(%+v)", *p)

}
