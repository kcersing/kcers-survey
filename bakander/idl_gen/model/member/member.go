// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package member

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"kcers-survey/idl_gen/model/base"
)

// Create or update user information request | 创建或更新用户信息
type CreateOrUpdateMemberReq struct {
	ID        int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name      string `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	Username  string `thrift:"username,3,optional" form:"username" json:"username" query:"username"`
	Mobile    string `thrift:"mobile,4,optional" form:"mobile" json:"mobile" query:"mobile"`
	Gender    string `thrift:"gender,5,optional" form:"gender" json:"gender" query:"gender"`
	Birthday  string `thrift:"birthday,6,optional" form:"birthday" json:"birthday" query:"birthday"`
	Source    int64  `thrift:"source,7,optional" form:"source" json:"source" query:"source"`
	Grade     int64  `thrift:"grade,8,optional" form:"grade" json:"grade" query:"grade"`
	Intention int64  `thrift:"intention,9,optional" form:"intention" json:"intention" query:"intention"`
	Email     string `thrift:"email,10,optional" form:"email" json:"email" query:"email"`
	Wecom     string `thrift:"wecom,11,optional" form:"wecom" json:"wecom" query:"wecom"`
}

func NewCreateOrUpdateMemberReq() *CreateOrUpdateMemberReq {
	return &CreateOrUpdateMemberReq{

		ID:        0,
		Name:      "",
		Username:  "",
		Mobile:    "",
		Gender:    "未知",
		Birthday:  "",
		Source:    0,
		Grade:     0,
		Intention: 0,
		Email:     "",
		Wecom:     "",
	}
}

func (p *CreateOrUpdateMemberReq) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.Username = ""
	p.Mobile = ""
	p.Gender = "未知"
	p.Birthday = ""
	p.Source = 0
	p.Grade = 0
	p.Intention = 0
	p.Email = ""
	p.Wecom = ""
}

var CreateOrUpdateMemberReq_ID_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetID() (v int64) {
	if !p.IsSetID() {
		return CreateOrUpdateMemberReq_ID_DEFAULT
	}
	return p.ID
}

var CreateOrUpdateMemberReq_Name_DEFAULT string = ""

func (p *CreateOrUpdateMemberReq) GetName() (v string) {
	if !p.IsSetName() {
		return CreateOrUpdateMemberReq_Name_DEFAULT
	}
	return p.Name
}

var CreateOrUpdateMemberReq_Username_DEFAULT string = ""

func (p *CreateOrUpdateMemberReq) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return CreateOrUpdateMemberReq_Username_DEFAULT
	}
	return p.Username
}

var CreateOrUpdateMemberReq_Mobile_DEFAULT string = ""

func (p *CreateOrUpdateMemberReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return CreateOrUpdateMemberReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var CreateOrUpdateMemberReq_Gender_DEFAULT string = "未知"

func (p *CreateOrUpdateMemberReq) GetGender() (v string) {
	if !p.IsSetGender() {
		return CreateOrUpdateMemberReq_Gender_DEFAULT
	}
	return p.Gender
}

var CreateOrUpdateMemberReq_Birthday_DEFAULT string = ""

func (p *CreateOrUpdateMemberReq) GetBirthday() (v string) {
	if !p.IsSetBirthday() {
		return CreateOrUpdateMemberReq_Birthday_DEFAULT
	}
	return p.Birthday
}

var CreateOrUpdateMemberReq_Source_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetSource() (v int64) {
	if !p.IsSetSource() {
		return CreateOrUpdateMemberReq_Source_DEFAULT
	}
	return p.Source
}

var CreateOrUpdateMemberReq_Grade_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetGrade() (v int64) {
	if !p.IsSetGrade() {
		return CreateOrUpdateMemberReq_Grade_DEFAULT
	}
	return p.Grade
}

var CreateOrUpdateMemberReq_Intention_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetIntention() (v int64) {
	if !p.IsSetIntention() {
		return CreateOrUpdateMemberReq_Intention_DEFAULT
	}
	return p.Intention
}

var CreateOrUpdateMemberReq_Email_DEFAULT string = ""

func (p *CreateOrUpdateMemberReq) GetEmail() (v string) {
	if !p.IsSetEmail() {
		return CreateOrUpdateMemberReq_Email_DEFAULT
	}
	return p.Email
}

var CreateOrUpdateMemberReq_Wecom_DEFAULT string = ""

func (p *CreateOrUpdateMemberReq) GetWecom() (v string) {
	if !p.IsSetWecom() {
		return CreateOrUpdateMemberReq_Wecom_DEFAULT
	}
	return p.Wecom
}

var fieldIDToName_CreateOrUpdateMemberReq = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "username",
	4:  "mobile",
	5:  "gender",
	6:  "birthday",
	7:  "source",
	8:  "grade",
	9:  "intention",
	10: "email",
	11: "wecom",
}

func (p *CreateOrUpdateMemberReq) IsSetID() bool {
	return p.ID != CreateOrUpdateMemberReq_ID_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetName() bool {
	return p.Name != CreateOrUpdateMemberReq_Name_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetUsername() bool {
	return p.Username != CreateOrUpdateMemberReq_Username_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetMobile() bool {
	return p.Mobile != CreateOrUpdateMemberReq_Mobile_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetGender() bool {
	return p.Gender != CreateOrUpdateMemberReq_Gender_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetBirthday() bool {
	return p.Birthday != CreateOrUpdateMemberReq_Birthday_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetSource() bool {
	return p.Source != CreateOrUpdateMemberReq_Source_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetGrade() bool {
	return p.Grade != CreateOrUpdateMemberReq_Grade_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetIntention() bool {
	return p.Intention != CreateOrUpdateMemberReq_Intention_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetEmail() bool {
	return p.Email != CreateOrUpdateMemberReq_Email_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetWecom() bool {
	return p.Wecom != CreateOrUpdateMemberReq_Wecom_DEFAULT
}

func (p *CreateOrUpdateMemberReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateOrUpdateMemberReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Username = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Gender = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Birthday = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Source = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Grade = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Intention = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Wecom = _field
	return nil
}

func (p *CreateOrUpdateMemberReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOrUpdateMemberReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("username", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err = oprot.WriteFieldBegin("gender", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Gender); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthday() {
		if err = oprot.WriteFieldBegin("birthday", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Birthday); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Source); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrade() {
		if err = oprot.WriteFieldBegin("grade", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Grade); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntention() {
		if err = oprot.WriteFieldBegin("intention", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Intention); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err = oprot.WriteFieldBegin("email", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Email); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetWecom() {
		if err = oprot.WriteFieldBegin("wecom", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Wecom); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrUpdateMemberReq(%+v)", *p)

}

type CreateOrUpdateMemberAvatarReq struct {
	MemberId int64  `thrift:"memberId,1,optional" form:"memberId" json:"memberId" query:"memberId"`
	Avatar   string `thrift:"avatar,2,optional" form:"avatar" json:"avatar" query:"avatar"`
}

func NewCreateOrUpdateMemberAvatarReq() *CreateOrUpdateMemberAvatarReq {
	return &CreateOrUpdateMemberAvatarReq{

		MemberId: 0,
		Avatar:   "",
	}
}

func (p *CreateOrUpdateMemberAvatarReq) InitDefault() {
	p.MemberId = 0
	p.Avatar = ""
}

var CreateOrUpdateMemberAvatarReq_MemberId_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberAvatarReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return CreateOrUpdateMemberAvatarReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var CreateOrUpdateMemberAvatarReq_Avatar_DEFAULT string = ""

func (p *CreateOrUpdateMemberAvatarReq) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return CreateOrUpdateMemberAvatarReq_Avatar_DEFAULT
	}
	return p.Avatar
}

var fieldIDToName_CreateOrUpdateMemberAvatarReq = map[int16]string{
	1: "memberId",
	2: "avatar",
}

func (p *CreateOrUpdateMemberAvatarReq) IsSetMemberId() bool {
	return p.MemberId != CreateOrUpdateMemberAvatarReq_MemberId_DEFAULT
}

func (p *CreateOrUpdateMemberAvatarReq) IsSetAvatar() bool {
	return p.Avatar != CreateOrUpdateMemberAvatarReq_Avatar_DEFAULT
}

func (p *CreateOrUpdateMemberAvatarReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateOrUpdateMemberAvatarReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateOrUpdateMemberAvatarReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *CreateOrUpdateMemberAvatarReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}

func (p *CreateOrUpdateMemberAvatarReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOrUpdateMemberAvatarReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateOrUpdateMemberAvatarReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateOrUpdateMemberAvatarReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Avatar); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateOrUpdateMemberAvatarReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrUpdateMemberAvatarReq(%+v)", *p)

}

type MemberInfo struct {
	ID            int64          `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name          string         `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	Status        int64          `thrift:"status,4,optional" form:"status" json:"status" query:"status"`
	Username      string         `thrift:"username,5,optional" form:"username" json:"username" query:"username"`
	Mobile        string         `thrift:"mobile,6,optional" form:"mobile" json:"mobile" query:"mobile"`
	Avatar        string         `thrift:"avatar,7,optional" form:"avatar" json:"avatar" query:"avatar"`
	CreatedAt     string         `thrift:"createdAt,8,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt     string         `thrift:"updatedAt,9,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
	Condition     int64          `thrift:"condition,10,optional" form:"condition" json:"condition" query:"condition"`
	ConditionName string         `thrift:"conditionName,11,optional" form:"conditionName" json:"conditionName" query:"conditionName"`
	CreatedId     int64          `thrift:"createdId,12,optional" form:"createdId" json:"createdId" query:"createdId"`
	CreatedName   string         `thrift:"createdName,13,optional" form:"createdName" json:"createdName" query:"createdName"`
	Profile       *MemberProfile `thrift:"profile,250,optional" form:"profile" json:"profile" query:"profile"`
	Privacy       *MemberPrivacy `thrift:"privacy,251,optional" form:"privacy" json:"privacy" query:"privacy"`
	Detail        *MemberDetail  `thrift:"detail,252,optional" form:"detail" json:"detail" query:"detail"`
}

func NewMemberInfo() *MemberInfo {
	return &MemberInfo{

		ID:            0,
		Name:          "",
		Status:        0,
		Username:      "",
		Mobile:        "",
		Avatar:        "",
		CreatedAt:     "",
		UpdatedAt:     "",
		Condition:     0,
		ConditionName: "",
		CreatedId:     0,
		CreatedName:   "",
		Profile:       &MemberProfile{},
		Privacy:       &MemberPrivacy{},
		Detail:        &MemberDetail{},
	}
}

func (p *MemberInfo) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.Status = 0
	p.Username = ""
	p.Mobile = ""
	p.Avatar = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Condition = 0
	p.ConditionName = ""
	p.CreatedId = 0
	p.CreatedName = ""
	p.Profile = &MemberProfile{}
	p.Privacy = &MemberPrivacy{}
	p.Detail = &MemberDetail{}
}

var MemberInfo_ID_DEFAULT int64 = 0

func (p *MemberInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return MemberInfo_ID_DEFAULT
	}
	return p.ID
}

var MemberInfo_Name_DEFAULT string = ""

func (p *MemberInfo) GetName() (v string) {
	if !p.IsSetName() {
		return MemberInfo_Name_DEFAULT
	}
	return p.Name
}

var MemberInfo_Status_DEFAULT int64 = 0

func (p *MemberInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return MemberInfo_Status_DEFAULT
	}
	return p.Status
}

var MemberInfo_Username_DEFAULT string = ""

func (p *MemberInfo) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return MemberInfo_Username_DEFAULT
	}
	return p.Username
}

var MemberInfo_Mobile_DEFAULT string = ""

func (p *MemberInfo) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return MemberInfo_Mobile_DEFAULT
	}
	return p.Mobile
}

var MemberInfo_Avatar_DEFAULT string = ""

func (p *MemberInfo) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return MemberInfo_Avatar_DEFAULT
	}
	return p.Avatar
}

var MemberInfo_CreatedAt_DEFAULT string = ""

func (p *MemberInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return MemberInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var MemberInfo_UpdatedAt_DEFAULT string = ""

func (p *MemberInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return MemberInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var MemberInfo_Condition_DEFAULT int64 = 0

func (p *MemberInfo) GetCondition() (v int64) {
	if !p.IsSetCondition() {
		return MemberInfo_Condition_DEFAULT
	}
	return p.Condition
}

var MemberInfo_ConditionName_DEFAULT string = ""

func (p *MemberInfo) GetConditionName() (v string) {
	if !p.IsSetConditionName() {
		return MemberInfo_ConditionName_DEFAULT
	}
	return p.ConditionName
}

var MemberInfo_CreatedId_DEFAULT int64 = 0

func (p *MemberInfo) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return MemberInfo_CreatedId_DEFAULT
	}
	return p.CreatedId
}

var MemberInfo_CreatedName_DEFAULT string = ""

func (p *MemberInfo) GetCreatedName() (v string) {
	if !p.IsSetCreatedName() {
		return MemberInfo_CreatedName_DEFAULT
	}
	return p.CreatedName
}

var MemberInfo_Profile_DEFAULT *MemberProfile = &MemberProfile{}

func (p *MemberInfo) GetProfile() (v *MemberProfile) {
	if !p.IsSetProfile() {
		return MemberInfo_Profile_DEFAULT
	}
	return p.Profile
}

var MemberInfo_Privacy_DEFAULT *MemberPrivacy = &MemberPrivacy{}

func (p *MemberInfo) GetPrivacy() (v *MemberPrivacy) {
	if !p.IsSetPrivacy() {
		return MemberInfo_Privacy_DEFAULT
	}
	return p.Privacy
}

var MemberInfo_Detail_DEFAULT *MemberDetail = &MemberDetail{}

func (p *MemberInfo) GetDetail() (v *MemberDetail) {
	if !p.IsSetDetail() {
		return MemberInfo_Detail_DEFAULT
	}
	return p.Detail
}

var fieldIDToName_MemberInfo = map[int16]string{
	1:   "id",
	2:   "name",
	4:   "status",
	5:   "username",
	6:   "mobile",
	7:   "avatar",
	8:   "createdAt",
	9:   "updatedAt",
	10:  "condition",
	11:  "conditionName",
	12:  "createdId",
	13:  "createdName",
	250: "profile",
	251: "privacy",
	252: "detail",
}

func (p *MemberInfo) IsSetID() bool {
	return p.ID != MemberInfo_ID_DEFAULT
}

func (p *MemberInfo) IsSetName() bool {
	return p.Name != MemberInfo_Name_DEFAULT
}

func (p *MemberInfo) IsSetStatus() bool {
	return p.Status != MemberInfo_Status_DEFAULT
}

func (p *MemberInfo) IsSetUsername() bool {
	return p.Username != MemberInfo_Username_DEFAULT
}

func (p *MemberInfo) IsSetMobile() bool {
	return p.Mobile != MemberInfo_Mobile_DEFAULT
}

func (p *MemberInfo) IsSetAvatar() bool {
	return p.Avatar != MemberInfo_Avatar_DEFAULT
}

func (p *MemberInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != MemberInfo_CreatedAt_DEFAULT
}

func (p *MemberInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != MemberInfo_UpdatedAt_DEFAULT
}

func (p *MemberInfo) IsSetCondition() bool {
	return p.Condition != MemberInfo_Condition_DEFAULT
}

func (p *MemberInfo) IsSetConditionName() bool {
	return p.ConditionName != MemberInfo_ConditionName_DEFAULT
}

func (p *MemberInfo) IsSetCreatedId() bool {
	return p.CreatedId != MemberInfo_CreatedId_DEFAULT
}

func (p *MemberInfo) IsSetCreatedName() bool {
	return p.CreatedName != MemberInfo_CreatedName_DEFAULT
}

func (p *MemberInfo) IsSetProfile() bool {
	return p.Profile != nil
}

func (p *MemberInfo) IsSetPrivacy() bool {
	return p.Privacy != nil
}

func (p *MemberInfo) IsSetDetail() bool {
	return p.Detail != nil
}

func (p *MemberInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 250:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField250(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 251:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField251(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 252:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField252(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *MemberInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *MemberInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Username = _field
	return nil
}
func (p *MemberInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *MemberInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *MemberInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *MemberInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *MemberInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Condition = _field
	return nil
}
func (p *MemberInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConditionName = _field
	return nil
}
func (p *MemberInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedId = _field
	return nil
}
func (p *MemberInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedName = _field
	return nil
}
func (p *MemberInfo) ReadField250(iprot thrift.TProtocol) error {
	_field := NewMemberProfile()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Profile = _field
	return nil
}
func (p *MemberInfo) ReadField251(iprot thrift.TProtocol) error {
	_field := NewMemberPrivacy()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Privacy = _field
	return nil
}
func (p *MemberInfo) ReadField252(iprot thrift.TProtocol) error {
	_field := NewMemberDetail()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Detail = _field
	return nil
}

func (p *MemberInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField250(oprot); err != nil {
			fieldId = 250
			goto WriteFieldError
		}
		if err = p.writeField251(oprot); err != nil {
			fieldId = 251
			goto WriteFieldError
		}
		if err = p.writeField252(oprot); err != nil {
			fieldId = 252
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("username", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Avatar); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCondition() {
		if err = oprot.WriteFieldBegin("condition", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Condition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetConditionName() {
		if err = oprot.WriteFieldBegin("conditionName", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ConditionName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MemberInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedId() {
		if err = oprot.WriteFieldBegin("createdId", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CreatedId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MemberInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedName() {
		if err = oprot.WriteFieldBegin("createdName", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MemberInfo) writeField250(oprot thrift.TProtocol) (err error) {
	if p.IsSetProfile() {
		if err = oprot.WriteFieldBegin("profile", thrift.STRUCT, 250); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Profile.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 250 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 250 end error: ", p), err)
}

func (p *MemberInfo) writeField251(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivacy() {
		if err = oprot.WriteFieldBegin("privacy", thrift.STRUCT, 251); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Privacy.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 end error: ", p), err)
}

func (p *MemberInfo) writeField252(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetail() {
		if err = oprot.WriteFieldBegin("detail", thrift.STRUCT, 252); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Detail.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 end error: ", p), err)
}

func (p *MemberInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberInfo(%+v)", *p)

}

type MemberDetail struct {
	/**消费总金额*/
	MoneySum float64 `thrift:"moneySum,2,optional" form:"moneySum" json:"moneySum" query:"moneySum"`
	/**首次的产品*/
	ProductId   int64  `thrift:"productId,3,optional" form:"productId" json:"productId" query:"productId"`
	ProductName string `thrift:"productName,4,optional" form:"productName" json:"productName" query:"productName"`
	/**进馆总次数*/
	EntrySum int64 `thrift:"entrySum,7,optional" form:"entrySum" json:"entrySum" query:"entrySum"`
	/**最后一次进馆时间*/
	EntryLastAt string `thrift:"entryLastAt,8,optional" form:"entryLastAt" json:"entryLastAt" query:"entryLastAt"`
	/**进馆最后期限时间*/
	EntryDeadlineAt string `thrift:"entryDeadlineAt,9,optional" form:"entryDeadlineAt" json:"entryDeadlineAt" query:"entryDeadlineAt"`
	/**最后一次上课时间*/
	ClassLastAt string `thrift:"classLastAt,10,optional" form:"classLastAt" json:"classLastAt" query:"classLastAt"`
}

func NewMemberDetail() *MemberDetail {
	return &MemberDetail{

		MoneySum:        0.0,
		ProductId:       0,
		ProductName:     "",
		EntrySum:        0,
		EntryLastAt:     "",
		EntryDeadlineAt: "",
		ClassLastAt:     "",
	}
}

func (p *MemberDetail) InitDefault() {
	p.MoneySum = 0.0
	p.ProductId = 0
	p.ProductName = ""
	p.EntrySum = 0
	p.EntryLastAt = ""
	p.EntryDeadlineAt = ""
	p.ClassLastAt = ""
}

var MemberDetail_MoneySum_DEFAULT float64 = 0.0

func (p *MemberDetail) GetMoneySum() (v float64) {
	if !p.IsSetMoneySum() {
		return MemberDetail_MoneySum_DEFAULT
	}
	return p.MoneySum
}

var MemberDetail_ProductId_DEFAULT int64 = 0

func (p *MemberDetail) GetProductId() (v int64) {
	if !p.IsSetProductId() {
		return MemberDetail_ProductId_DEFAULT
	}
	return p.ProductId
}

var MemberDetail_ProductName_DEFAULT string = ""

func (p *MemberDetail) GetProductName() (v string) {
	if !p.IsSetProductName() {
		return MemberDetail_ProductName_DEFAULT
	}
	return p.ProductName
}

var MemberDetail_EntrySum_DEFAULT int64 = 0

func (p *MemberDetail) GetEntrySum() (v int64) {
	if !p.IsSetEntrySum() {
		return MemberDetail_EntrySum_DEFAULT
	}
	return p.EntrySum
}

var MemberDetail_EntryLastAt_DEFAULT string = ""

func (p *MemberDetail) GetEntryLastAt() (v string) {
	if !p.IsSetEntryLastAt() {
		return MemberDetail_EntryLastAt_DEFAULT
	}
	return p.EntryLastAt
}

var MemberDetail_EntryDeadlineAt_DEFAULT string = ""

func (p *MemberDetail) GetEntryDeadlineAt() (v string) {
	if !p.IsSetEntryDeadlineAt() {
		return MemberDetail_EntryDeadlineAt_DEFAULT
	}
	return p.EntryDeadlineAt
}

var MemberDetail_ClassLastAt_DEFAULT string = ""

func (p *MemberDetail) GetClassLastAt() (v string) {
	if !p.IsSetClassLastAt() {
		return MemberDetail_ClassLastAt_DEFAULT
	}
	return p.ClassLastAt
}

var fieldIDToName_MemberDetail = map[int16]string{
	2:  "moneySum",
	3:  "productId",
	4:  "productName",
	7:  "entrySum",
	8:  "entryLastAt",
	9:  "entryDeadlineAt",
	10: "classLastAt",
}

func (p *MemberDetail) IsSetMoneySum() bool {
	return p.MoneySum != MemberDetail_MoneySum_DEFAULT
}

func (p *MemberDetail) IsSetProductId() bool {
	return p.ProductId != MemberDetail_ProductId_DEFAULT
}

func (p *MemberDetail) IsSetProductName() bool {
	return p.ProductName != MemberDetail_ProductName_DEFAULT
}

func (p *MemberDetail) IsSetEntrySum() bool {
	return p.EntrySum != MemberDetail_EntrySum_DEFAULT
}

func (p *MemberDetail) IsSetEntryLastAt() bool {
	return p.EntryLastAt != MemberDetail_EntryLastAt_DEFAULT
}

func (p *MemberDetail) IsSetEntryDeadlineAt() bool {
	return p.EntryDeadlineAt != MemberDetail_EntryDeadlineAt_DEFAULT
}

func (p *MemberDetail) IsSetClassLastAt() bool {
	return p.ClassLastAt != MemberDetail_ClassLastAt_DEFAULT
}

func (p *MemberDetail) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberDetail[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberDetail) ReadField2(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MoneySum = _field
	return nil
}
func (p *MemberDetail) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ProductId = _field
	return nil
}
func (p *MemberDetail) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ProductName = _field
	return nil
}
func (p *MemberDetail) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EntrySum = _field
	return nil
}
func (p *MemberDetail) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EntryLastAt = _field
	return nil
}
func (p *MemberDetail) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EntryDeadlineAt = _field
	return nil
}
func (p *MemberDetail) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassLastAt = _field
	return nil
}

func (p *MemberDetail) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberDetail"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberDetail) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMoneySum() {
		if err = oprot.WriteFieldBegin("moneySum", thrift.DOUBLE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.MoneySum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberDetail) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductId() {
		if err = oprot.WriteFieldBegin("productId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberDetail) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductName() {
		if err = oprot.WriteFieldBegin("productName", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ProductName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberDetail) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntrySum() {
		if err = oprot.WriteFieldBegin("entrySum", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.EntrySum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberDetail) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryLastAt() {
		if err = oprot.WriteFieldBegin("entryLastAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EntryLastAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberDetail) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryDeadlineAt() {
		if err = oprot.WriteFieldBegin("entryDeadlineAt", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EntryDeadlineAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberDetail) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetClassLastAt() {
		if err = oprot.WriteFieldBegin("classLastAt", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ClassLastAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberDetail) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberDetail(%+v)", *p)

}

type MemberProfile struct {
	Name          string `thrift:"name,1,optional" form:"name" json:"name" query:"name"`
	FatherName    string `thrift:"fatherName,2,optional" form:"fatherName" json:"fatherName" query:"fatherName"`
	MotherName    string `thrift:"motherName,3,optional" form:"motherName" json:"motherName" query:"motherName"`
	Grade         int64  `thrift:"grade,4,optional" form:"grade" json:"grade" query:"grade"`
	Intention     int64  `thrift:"intention,5,optional" form:"intention" json:"intention" query:"intention"`
	Source        int64  `thrift:"source,6,optional" form:"source" json:"source" query:"source"`
	GradeName     string `thrift:"gradeName,7,optional" form:"gradeName" json:"gradeName" query:"gradeName"`
	IntentionName string `thrift:"intentionName,8,optional" form:"intentionName" json:"intentionName" query:"intentionName"`
	SourceName    string `thrift:"sourceName,9,optional" form:"sourceName" json:"sourceName" query:"sourceName"`
	Email         string `thrift:"email,10,optional" form:"email" json:"email" query:"email"`
	Gender        string `thrift:"gender,11,optional" form:"gender" json:"gender" query:"gender"`
	Age           int64  `thrift:"age,12,optional" form:"age" json:"age" query:"age"`
	Wecom         string `thrift:"wecom,13,optional" form:"wecom" json:"wecom" query:"wecom"`
	Birthday      string `thrift:"birthday,14,optional" form:"birthday" json:"birthday" query:"birthday"`
	/**关联会员*/
	RelationMid   int64  `thrift:"relationMid,15,optional" form:"relationMid" json:"relationMid" query:"relationMid"`
	RelationMname string `thrift:"relationMname,16,optional" form:"relationMname" json:"relationMname" query:"relationMname"`
	/**关联员工*/
	RelationUid   int64  `thrift:"relationUid,17,optional" form:"relationUid" json:"relationUid" query:"relationUid"`
	RelationUname string `thrift:"relationUname,18,optional" form:"relationUname" json:"relationUname" query:"relationUname"`
}

func NewMemberProfile() *MemberProfile {
	return &MemberProfile{

		Name:          "",
		FatherName:    "",
		MotherName:    "",
		Grade:         0,
		Intention:     0,
		Source:        0,
		GradeName:     "",
		IntentionName: "",
		SourceName:    "",
		Email:         "",
		Gender:        "",
		Age:           0,
		Wecom:         "",
		Birthday:      "",
		RelationMid:   0,
		RelationMname: "",
		RelationUid:   0,
		RelationUname: "",
	}
}

func (p *MemberProfile) InitDefault() {
	p.Name = ""
	p.FatherName = ""
	p.MotherName = ""
	p.Grade = 0
	p.Intention = 0
	p.Source = 0
	p.GradeName = ""
	p.IntentionName = ""
	p.SourceName = ""
	p.Email = ""
	p.Gender = ""
	p.Age = 0
	p.Wecom = ""
	p.Birthday = ""
	p.RelationMid = 0
	p.RelationMname = ""
	p.RelationUid = 0
	p.RelationUname = ""
}

var MemberProfile_Name_DEFAULT string = ""

func (p *MemberProfile) GetName() (v string) {
	if !p.IsSetName() {
		return MemberProfile_Name_DEFAULT
	}
	return p.Name
}

var MemberProfile_FatherName_DEFAULT string = ""

func (p *MemberProfile) GetFatherName() (v string) {
	if !p.IsSetFatherName() {
		return MemberProfile_FatherName_DEFAULT
	}
	return p.FatherName
}

var MemberProfile_MotherName_DEFAULT string = ""

func (p *MemberProfile) GetMotherName() (v string) {
	if !p.IsSetMotherName() {
		return MemberProfile_MotherName_DEFAULT
	}
	return p.MotherName
}

var MemberProfile_Grade_DEFAULT int64 = 0

func (p *MemberProfile) GetGrade() (v int64) {
	if !p.IsSetGrade() {
		return MemberProfile_Grade_DEFAULT
	}
	return p.Grade
}

var MemberProfile_Intention_DEFAULT int64 = 0

func (p *MemberProfile) GetIntention() (v int64) {
	if !p.IsSetIntention() {
		return MemberProfile_Intention_DEFAULT
	}
	return p.Intention
}

var MemberProfile_Source_DEFAULT int64 = 0

func (p *MemberProfile) GetSource() (v int64) {
	if !p.IsSetSource() {
		return MemberProfile_Source_DEFAULT
	}
	return p.Source
}

var MemberProfile_GradeName_DEFAULT string = ""

func (p *MemberProfile) GetGradeName() (v string) {
	if !p.IsSetGradeName() {
		return MemberProfile_GradeName_DEFAULT
	}
	return p.GradeName
}

var MemberProfile_IntentionName_DEFAULT string = ""

func (p *MemberProfile) GetIntentionName() (v string) {
	if !p.IsSetIntentionName() {
		return MemberProfile_IntentionName_DEFAULT
	}
	return p.IntentionName
}

var MemberProfile_SourceName_DEFAULT string = ""

func (p *MemberProfile) GetSourceName() (v string) {
	if !p.IsSetSourceName() {
		return MemberProfile_SourceName_DEFAULT
	}
	return p.SourceName
}

var MemberProfile_Email_DEFAULT string = ""

func (p *MemberProfile) GetEmail() (v string) {
	if !p.IsSetEmail() {
		return MemberProfile_Email_DEFAULT
	}
	return p.Email
}

var MemberProfile_Gender_DEFAULT string = ""

func (p *MemberProfile) GetGender() (v string) {
	if !p.IsSetGender() {
		return MemberProfile_Gender_DEFAULT
	}
	return p.Gender
}

var MemberProfile_Age_DEFAULT int64 = 0

func (p *MemberProfile) GetAge() (v int64) {
	if !p.IsSetAge() {
		return MemberProfile_Age_DEFAULT
	}
	return p.Age
}

var MemberProfile_Wecom_DEFAULT string = ""

func (p *MemberProfile) GetWecom() (v string) {
	if !p.IsSetWecom() {
		return MemberProfile_Wecom_DEFAULT
	}
	return p.Wecom
}

var MemberProfile_Birthday_DEFAULT string = ""

func (p *MemberProfile) GetBirthday() (v string) {
	if !p.IsSetBirthday() {
		return MemberProfile_Birthday_DEFAULT
	}
	return p.Birthday
}

var MemberProfile_RelationMid_DEFAULT int64 = 0

func (p *MemberProfile) GetRelationMid() (v int64) {
	if !p.IsSetRelationMid() {
		return MemberProfile_RelationMid_DEFAULT
	}
	return p.RelationMid
}

var MemberProfile_RelationMname_DEFAULT string = ""

func (p *MemberProfile) GetRelationMname() (v string) {
	if !p.IsSetRelationMname() {
		return MemberProfile_RelationMname_DEFAULT
	}
	return p.RelationMname
}

var MemberProfile_RelationUid_DEFAULT int64 = 0

func (p *MemberProfile) GetRelationUid() (v int64) {
	if !p.IsSetRelationUid() {
		return MemberProfile_RelationUid_DEFAULT
	}
	return p.RelationUid
}

var MemberProfile_RelationUname_DEFAULT string = ""

func (p *MemberProfile) GetRelationUname() (v string) {
	if !p.IsSetRelationUname() {
		return MemberProfile_RelationUname_DEFAULT
	}
	return p.RelationUname
}

var fieldIDToName_MemberProfile = map[int16]string{
	1:  "name",
	2:  "fatherName",
	3:  "motherName",
	4:  "grade",
	5:  "intention",
	6:  "source",
	7:  "gradeName",
	8:  "intentionName",
	9:  "sourceName",
	10: "email",
	11: "gender",
	12: "age",
	13: "wecom",
	14: "birthday",
	15: "relationMid",
	16: "relationMname",
	17: "relationUid",
	18: "relationUname",
}

func (p *MemberProfile) IsSetName() bool {
	return p.Name != MemberProfile_Name_DEFAULT
}

func (p *MemberProfile) IsSetFatherName() bool {
	return p.FatherName != MemberProfile_FatherName_DEFAULT
}

func (p *MemberProfile) IsSetMotherName() bool {
	return p.MotherName != MemberProfile_MotherName_DEFAULT
}

func (p *MemberProfile) IsSetGrade() bool {
	return p.Grade != MemberProfile_Grade_DEFAULT
}

func (p *MemberProfile) IsSetIntention() bool {
	return p.Intention != MemberProfile_Intention_DEFAULT
}

func (p *MemberProfile) IsSetSource() bool {
	return p.Source != MemberProfile_Source_DEFAULT
}

func (p *MemberProfile) IsSetGradeName() bool {
	return p.GradeName != MemberProfile_GradeName_DEFAULT
}

func (p *MemberProfile) IsSetIntentionName() bool {
	return p.IntentionName != MemberProfile_IntentionName_DEFAULT
}

func (p *MemberProfile) IsSetSourceName() bool {
	return p.SourceName != MemberProfile_SourceName_DEFAULT
}

func (p *MemberProfile) IsSetEmail() bool {
	return p.Email != MemberProfile_Email_DEFAULT
}

func (p *MemberProfile) IsSetGender() bool {
	return p.Gender != MemberProfile_Gender_DEFAULT
}

func (p *MemberProfile) IsSetAge() bool {
	return p.Age != MemberProfile_Age_DEFAULT
}

func (p *MemberProfile) IsSetWecom() bool {
	return p.Wecom != MemberProfile_Wecom_DEFAULT
}

func (p *MemberProfile) IsSetBirthday() bool {
	return p.Birthday != MemberProfile_Birthday_DEFAULT
}

func (p *MemberProfile) IsSetRelationMid() bool {
	return p.RelationMid != MemberProfile_RelationMid_DEFAULT
}

func (p *MemberProfile) IsSetRelationMname() bool {
	return p.RelationMname != MemberProfile_RelationMname_DEFAULT
}

func (p *MemberProfile) IsSetRelationUid() bool {
	return p.RelationUid != MemberProfile_RelationUid_DEFAULT
}

func (p *MemberProfile) IsSetRelationUname() bool {
	return p.RelationUname != MemberProfile_RelationUname_DEFAULT
}

func (p *MemberProfile) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProfile[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProfile) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberProfile) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FatherName = _field
	return nil
}
func (p *MemberProfile) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MotherName = _field
	return nil
}
func (p *MemberProfile) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Grade = _field
	return nil
}
func (p *MemberProfile) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Intention = _field
	return nil
}
func (p *MemberProfile) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Source = _field
	return nil
}
func (p *MemberProfile) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GradeName = _field
	return nil
}
func (p *MemberProfile) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IntentionName = _field
	return nil
}
func (p *MemberProfile) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SourceName = _field
	return nil
}
func (p *MemberProfile) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *MemberProfile) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Gender = _field
	return nil
}
func (p *MemberProfile) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Age = _field
	return nil
}
func (p *MemberProfile) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Wecom = _field
	return nil
}
func (p *MemberProfile) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Birthday = _field
	return nil
}
func (p *MemberProfile) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RelationMid = _field
	return nil
}
func (p *MemberProfile) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RelationMname = _field
	return nil
}
func (p *MemberProfile) ReadField17(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RelationUid = _field
	return nil
}
func (p *MemberProfile) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RelationUname = _field
	return nil
}

func (p *MemberProfile) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProfile"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFatherName() {
		if err = oprot.WriteFieldBegin("fatherName", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.FatherName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMotherName() {
		if err = oprot.WriteFieldBegin("motherName", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MotherName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberProfile) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrade() {
		if err = oprot.WriteFieldBegin("grade", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Grade); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberProfile) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntention() {
		if err = oprot.WriteFieldBegin("intention", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Intention); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberProfile) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Source); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberProfile) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetGradeName() {
		if err = oprot.WriteFieldBegin("gradeName", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.GradeName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberProfile) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntentionName() {
		if err = oprot.WriteFieldBegin("intentionName", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.IntentionName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberProfile) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceName() {
		if err = oprot.WriteFieldBegin("sourceName", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SourceName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberProfile) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err = oprot.WriteFieldBegin("email", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Email); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberProfile) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err = oprot.WriteFieldBegin("gender", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Gender); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MemberProfile) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAge() {
		if err = oprot.WriteFieldBegin("age", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Age); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MemberProfile) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetWecom() {
		if err = oprot.WriteFieldBegin("wecom", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Wecom); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MemberProfile) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthday() {
		if err = oprot.WriteFieldBegin("birthday", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Birthday); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *MemberProfile) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationMid() {
		if err = oprot.WriteFieldBegin("relationMid", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.RelationMid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *MemberProfile) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationMname() {
		if err = oprot.WriteFieldBegin("relationMname", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.RelationMname); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *MemberProfile) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationUid() {
		if err = oprot.WriteFieldBegin("relationUid", thrift.I64, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.RelationUid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *MemberProfile) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationUname() {
		if err = oprot.WriteFieldBegin("relationUname", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.RelationUname); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *MemberProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProfile(%+v)", *p)

}

type MemberPrivacy struct {
	//身份证号
	IdentityCard string `thrift:"identityCard,1" form:"identityCard" json:"identityCard" query:"identityCard"`
	//正面
	FaceIdentityCard string `thrift:"faceIdentityCard,2" form:"faceIdentityCard" json:"faceIdentityCard" query:"faceIdentityCard"`
	//反面
	BackIdentityCard string `thrift:"backIdentityCard,3" form:"backIdentityCard" json:"backIdentityCard" query:"backIdentityCard"`
	//人脸照片
	FacePic string `thrift:"facePic,4" form:"facePic" json:"facePic" query:"facePic"`
	//特征值
	FaceEigenvalue string `thrift:"faceEigenvalue,5" form:"faceEigenvalue" json:"faceEigenvalue" query:"faceEigenvalue"`
	//人脸更新时间
	FaceUpdateAt     string `thrift:"faceUpdateAt,6" form:"faceUpdateAt" json:"faceUpdateAt" query:"faceUpdateAt"`
	FacePicUpdatedAt string `thrift:"facePicUpdatedAt,7" form:"facePicUpdatedAt" json:"facePicUpdatedAt" query:"facePicUpdatedAt"`
}

func NewMemberPrivacy() *MemberPrivacy {
	return &MemberPrivacy{}
}

func (p *MemberPrivacy) InitDefault() {
}

func (p *MemberPrivacy) GetIdentityCard() (v string) {
	return p.IdentityCard
}

func (p *MemberPrivacy) GetFaceIdentityCard() (v string) {
	return p.FaceIdentityCard
}

func (p *MemberPrivacy) GetBackIdentityCard() (v string) {
	return p.BackIdentityCard
}

func (p *MemberPrivacy) GetFacePic() (v string) {
	return p.FacePic
}

func (p *MemberPrivacy) GetFaceEigenvalue() (v string) {
	return p.FaceEigenvalue
}

func (p *MemberPrivacy) GetFaceUpdateAt() (v string) {
	return p.FaceUpdateAt
}

func (p *MemberPrivacy) GetFacePicUpdatedAt() (v string) {
	return p.FacePicUpdatedAt
}

var fieldIDToName_MemberPrivacy = map[int16]string{
	1: "identityCard",
	2: "faceIdentityCard",
	3: "backIdentityCard",
	4: "facePic",
	5: "faceEigenvalue",
	6: "faceUpdateAt",
	7: "facePicUpdatedAt",
}

func (p *MemberPrivacy) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberPrivacy[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberPrivacy) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IdentityCard = _field
	return nil
}
func (p *MemberPrivacy) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FaceIdentityCard = _field
	return nil
}
func (p *MemberPrivacy) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BackIdentityCard = _field
	return nil
}
func (p *MemberPrivacy) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FacePic = _field
	return nil
}
func (p *MemberPrivacy) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FaceEigenvalue = _field
	return nil
}
func (p *MemberPrivacy) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FaceUpdateAt = _field
	return nil
}
func (p *MemberPrivacy) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FacePicUpdatedAt = _field
	return nil
}

func (p *MemberPrivacy) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPrivacy"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberPrivacy) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("identityCard", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdentityCard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberPrivacy) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("faceIdentityCard", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FaceIdentityCard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberPrivacy) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("backIdentityCard", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BackIdentityCard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberPrivacy) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("facePic", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FacePic); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberPrivacy) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("faceEigenvalue", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FaceEigenvalue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberPrivacy) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("faceUpdateAt", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FaceUpdateAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberPrivacy) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("facePicUpdatedAt", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FacePicUpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberPrivacy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberPrivacy(%+v)", *p)

}

// Get user list request | 获取用户列表请求参数
type MemberListReq struct {
	Page           int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize       int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Name           string `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	Mobile         string `thrift:"mobile,4,optional" form:"mobile" json:"mobile" query:"mobile"`
	Source         int64  `thrift:"source,5,optional" form:"source" json:"source" query:"source"`
	Intention      int64  `thrift:"intention,6,optional" form:"intention" json:"intention" query:"intention"`
	CreatedId      int64  `thrift:"createdId,7,optional" form:"createdId" json:"createdId" query:"createdId"`
	StartCreatedAt string `thrift:"startCreatedAt,8,optional" form:"startCreatedAt" json:"startCreatedAt" query:"startCreatedAt"`
	EndCreatedAt   string `thrift:"endCreatedAt,9,optional" form:"endCreatedAt" json:"endCreatedAt" query:"endCreatedAt"`
}

func NewMemberListReq() *MemberListReq {
	return &MemberListReq{

		Page:           1,
		PageSize:       100,
		Name:           "",
		Mobile:         "",
		Source:         0,
		Intention:      0,
		CreatedId:      0,
		StartCreatedAt: "",
		EndCreatedAt:   "",
	}
}

func (p *MemberListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Name = ""
	p.Mobile = ""
	p.Source = 0
	p.Intention = 0
	p.CreatedId = 0
	p.StartCreatedAt = ""
	p.EndCreatedAt = ""
}

var MemberListReq_Page_DEFAULT int64 = 1

func (p *MemberListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return MemberListReq_Page_DEFAULT
	}
	return p.Page
}

var MemberListReq_PageSize_DEFAULT int64 = 100

func (p *MemberListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return MemberListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var MemberListReq_Name_DEFAULT string = ""

func (p *MemberListReq) GetName() (v string) {
	if !p.IsSetName() {
		return MemberListReq_Name_DEFAULT
	}
	return p.Name
}

var MemberListReq_Mobile_DEFAULT string = ""

func (p *MemberListReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return MemberListReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var MemberListReq_Source_DEFAULT int64 = 0

func (p *MemberListReq) GetSource() (v int64) {
	if !p.IsSetSource() {
		return MemberListReq_Source_DEFAULT
	}
	return p.Source
}

var MemberListReq_Intention_DEFAULT int64 = 0

func (p *MemberListReq) GetIntention() (v int64) {
	if !p.IsSetIntention() {
		return MemberListReq_Intention_DEFAULT
	}
	return p.Intention
}

var MemberListReq_CreatedId_DEFAULT int64 = 0

func (p *MemberListReq) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return MemberListReq_CreatedId_DEFAULT
	}
	return p.CreatedId
}

var MemberListReq_StartCreatedAt_DEFAULT string = ""

func (p *MemberListReq) GetStartCreatedAt() (v string) {
	if !p.IsSetStartCreatedAt() {
		return MemberListReq_StartCreatedAt_DEFAULT
	}
	return p.StartCreatedAt
}

var MemberListReq_EndCreatedAt_DEFAULT string = ""

func (p *MemberListReq) GetEndCreatedAt() (v string) {
	if !p.IsSetEndCreatedAt() {
		return MemberListReq_EndCreatedAt_DEFAULT
	}
	return p.EndCreatedAt
}

var fieldIDToName_MemberListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "name",
	4: "mobile",
	5: "source",
	6: "intention",
	7: "createdId",
	8: "startCreatedAt",
	9: "endCreatedAt",
}

func (p *MemberListReq) IsSetPage() bool {
	return p.Page != MemberListReq_Page_DEFAULT
}

func (p *MemberListReq) IsSetPageSize() bool {
	return p.PageSize != MemberListReq_PageSize_DEFAULT
}

func (p *MemberListReq) IsSetName() bool {
	return p.Name != MemberListReq_Name_DEFAULT
}

func (p *MemberListReq) IsSetMobile() bool {
	return p.Mobile != MemberListReq_Mobile_DEFAULT
}

func (p *MemberListReq) IsSetSource() bool {
	return p.Source != MemberListReq_Source_DEFAULT
}

func (p *MemberListReq) IsSetIntention() bool {
	return p.Intention != MemberListReq_Intention_DEFAULT
}

func (p *MemberListReq) IsSetCreatedId() bool {
	return p.CreatedId != MemberListReq_CreatedId_DEFAULT
}

func (p *MemberListReq) IsSetStartCreatedAt() bool {
	return p.StartCreatedAt != MemberListReq_StartCreatedAt_DEFAULT
}

func (p *MemberListReq) IsSetEndCreatedAt() bool {
	return p.EndCreatedAt != MemberListReq_EndCreatedAt_DEFAULT
}

func (p *MemberListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *MemberListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *MemberListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *MemberListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Source = _field
	return nil
}
func (p *MemberListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Intention = _field
	return nil
}
func (p *MemberListReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedId = _field
	return nil
}
func (p *MemberListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartCreatedAt = _field
	return nil
}
func (p *MemberListReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndCreatedAt = _field
	return nil
}

func (p *MemberListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Source); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntention() {
		if err = oprot.WriteFieldBegin("intention", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Intention); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedId() {
		if err = oprot.WriteFieldBegin("createdId", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CreatedId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartCreatedAt() {
		if err = oprot.WriteFieldBegin("startCreatedAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartCreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberListReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndCreatedAt() {
		if err = oprot.WriteFieldBegin("endCreatedAt", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EndCreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberListReq(%+v)", *p)

}

type MemberSearchReq struct {
	Value  string `thrift:"value,1" form:"value" json:"value" query:"value"`
	Option string `thrift:"option,2" form:"option" json:"option" query:"option"`
}

func NewMemberSearchReq() *MemberSearchReq {
	return &MemberSearchReq{

		Value:  "",
		Option: "",
	}
}

func (p *MemberSearchReq) InitDefault() {
	p.Value = ""
	p.Option = ""
}

func (p *MemberSearchReq) GetValue() (v string) {
	return p.Value
}

func (p *MemberSearchReq) GetOption() (v string) {
	return p.Option
}

var fieldIDToName_MemberSearchReq = map[int16]string{
	1: "value",
	2: "option",
}

func (p *MemberSearchReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberSearchReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberSearchReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}
func (p *MemberSearchReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Option = _field
	return nil
}

func (p *MemberSearchReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberSearchReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberSearchReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberSearchReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("option", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Option); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberSearchReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberSearchReq(%+v)", *p)

}

type MemberProductListReq struct {
	Page     int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	MemberId int64  `thrift:"memberId,3,optional" form:"memberId" json:"memberId" query:"memberId"`
	Name     string `thrift:"name,4,optional" form:"name" json:"name" query:"name"`
	VenueId  int64  `thrift:"venueId,5,optional" form:"venueId" json:"venueId" query:"venueId"`
	Status   int64  `thrift:"status,6,optional" form:"status" json:"status" query:"status"`
}

func NewMemberProductListReq() *MemberProductListReq {
	return &MemberProductListReq{

		Page:     1,
		PageSize: 10,
		MemberId: 0,
		Name:     "",
		VenueId:  0,
		Status:   0,
	}
}

func (p *MemberProductListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 10
	p.MemberId = 0
	p.Name = ""
	p.VenueId = 0
	p.Status = 0
}

var MemberProductListReq_Page_DEFAULT int64 = 1

func (p *MemberProductListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return MemberProductListReq_Page_DEFAULT
	}
	return p.Page
}

var MemberProductListReq_PageSize_DEFAULT int64 = 10

func (p *MemberProductListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return MemberProductListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var MemberProductListReq_MemberId_DEFAULT int64 = 0

func (p *MemberProductListReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberProductListReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var MemberProductListReq_Name_DEFAULT string = ""

func (p *MemberProductListReq) GetName() (v string) {
	if !p.IsSetName() {
		return MemberProductListReq_Name_DEFAULT
	}
	return p.Name
}

var MemberProductListReq_VenueId_DEFAULT int64 = 0

func (p *MemberProductListReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberProductListReq_VenueId_DEFAULT
	}
	return p.VenueId
}

var MemberProductListReq_Status_DEFAULT int64 = 0

func (p *MemberProductListReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return MemberProductListReq_Status_DEFAULT
	}
	return p.Status
}

var fieldIDToName_MemberProductListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "memberId",
	4: "name",
	5: "venueId",
	6: "status",
}

func (p *MemberProductListReq) IsSetPage() bool {
	return p.Page != MemberProductListReq_Page_DEFAULT
}

func (p *MemberProductListReq) IsSetPageSize() bool {
	return p.PageSize != MemberProductListReq_PageSize_DEFAULT
}

func (p *MemberProductListReq) IsSetMemberId() bool {
	return p.MemberId != MemberProductListReq_MemberId_DEFAULT
}

func (p *MemberProductListReq) IsSetName() bool {
	return p.Name != MemberProductListReq_Name_DEFAULT
}

func (p *MemberProductListReq) IsSetVenueId() bool {
	return p.VenueId != MemberProductListReq_VenueId_DEFAULT
}

func (p *MemberProductListReq) IsSetStatus() bool {
	return p.Status != MemberProductListReq_Status_DEFAULT
}

func (p *MemberProductListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *MemberProductListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *MemberProductListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberProductListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberProductListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *MemberProductListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}

func (p *MemberProductListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProductListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberProductListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberProductListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberProductListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberProductListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberProductListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductListReq(%+v)", *p)

}

type MemberPropertyListReq struct {
	Page            int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize        int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	MemberId        int64  `thrift:"memberId,3,optional" form:"memberId" json:"memberId" query:"memberId"`
	Type            string `thrift:"type,4,optional" form:"type" json:"type" query:"type"`
	Name            string `thrift:"name,5,optional" form:"name" json:"name" query:"name"`
	VenueId         int64  `thrift:"venueId,6,optional" form:"venueId" json:"venueId" query:"venueId"`
	Status          int64  `thrift:"status,7,optional" form:"status" json:"status" query:"status"`
	MemberProductId int64  `thrift:"memberProductId,8,optional" form:"memberProductId" json:"memberProductId" query:"memberProductId"`
}

func NewMemberPropertyListReq() *MemberPropertyListReq {
	return &MemberPropertyListReq{

		Page:            1,
		PageSize:        10,
		MemberId:        0,
		Type:            "",
		Name:            "",
		VenueId:         0,
		Status:          0,
		MemberProductId: 0,
	}
}

func (p *MemberPropertyListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 10
	p.MemberId = 0
	p.Type = ""
	p.Name = ""
	p.VenueId = 0
	p.Status = 0
	p.MemberProductId = 0
}

var MemberPropertyListReq_Page_DEFAULT int64 = 1

func (p *MemberPropertyListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return MemberPropertyListReq_Page_DEFAULT
	}
	return p.Page
}

var MemberPropertyListReq_PageSize_DEFAULT int64 = 10

func (p *MemberPropertyListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return MemberPropertyListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var MemberPropertyListReq_MemberId_DEFAULT int64 = 0

func (p *MemberPropertyListReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberPropertyListReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var MemberPropertyListReq_Type_DEFAULT string = ""

func (p *MemberPropertyListReq) GetType() (v string) {
	if !p.IsSetType() {
		return MemberPropertyListReq_Type_DEFAULT
	}
	return p.Type
}

var MemberPropertyListReq_Name_DEFAULT string = ""

func (p *MemberPropertyListReq) GetName() (v string) {
	if !p.IsSetName() {
		return MemberPropertyListReq_Name_DEFAULT
	}
	return p.Name
}

var MemberPropertyListReq_VenueId_DEFAULT int64 = 0

func (p *MemberPropertyListReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberPropertyListReq_VenueId_DEFAULT
	}
	return p.VenueId
}

var MemberPropertyListReq_Status_DEFAULT int64 = 0

func (p *MemberPropertyListReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return MemberPropertyListReq_Status_DEFAULT
	}
	return p.Status
}

var MemberPropertyListReq_MemberProductId_DEFAULT int64 = 0

func (p *MemberPropertyListReq) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return MemberPropertyListReq_MemberProductId_DEFAULT
	}
	return p.MemberProductId
}

var fieldIDToName_MemberPropertyListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "memberId",
	4: "type",
	5: "name",
	6: "venueId",
	7: "status",
	8: "memberProductId",
}

func (p *MemberPropertyListReq) IsSetPage() bool {
	return p.Page != MemberPropertyListReq_Page_DEFAULT
}

func (p *MemberPropertyListReq) IsSetPageSize() bool {
	return p.PageSize != MemberPropertyListReq_PageSize_DEFAULT
}

func (p *MemberPropertyListReq) IsSetMemberId() bool {
	return p.MemberId != MemberPropertyListReq_MemberId_DEFAULT
}

func (p *MemberPropertyListReq) IsSetType() bool {
	return p.Type != MemberPropertyListReq_Type_DEFAULT
}

func (p *MemberPropertyListReq) IsSetName() bool {
	return p.Name != MemberPropertyListReq_Name_DEFAULT
}

func (p *MemberPropertyListReq) IsSetVenueId() bool {
	return p.VenueId != MemberPropertyListReq_VenueId_DEFAULT
}

func (p *MemberPropertyListReq) IsSetStatus() bool {
	return p.Status != MemberPropertyListReq_Status_DEFAULT
}

func (p *MemberPropertyListReq) IsSetMemberProductId() bool {
	return p.MemberProductId != MemberPropertyListReq_MemberProductId_DEFAULT
}

func (p *MemberPropertyListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberPropertyListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberPropertyListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *MemberPropertyListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *MemberPropertyListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberPropertyListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *MemberPropertyListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberPropertyListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *MemberPropertyListReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *MemberPropertyListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}

func (p *MemberPropertyListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertyListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberPropertyListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberPropertyListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberPropertyListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberPropertyListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberPropertyListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberPropertyListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberPropertyListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberPropertyListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberPropertyListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberPropertyListReq(%+v)", *p)

}

type MemberContractListReq struct {
	Page       int64 `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize   int64 `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	MemberId   int64 `thrift:"memberId,3,optional" form:"memberId" json:"memberId" query:"memberId"`
	VenueId    int64 `thrift:"venueId,4,optional" form:"venueId" json:"venueId" query:"venueId"`
	ContractId int64 `thrift:"contractId,5,optional" form:"contractId" json:"contractId" query:"contractId"`
}

func NewMemberContractListReq() *MemberContractListReq {
	return &MemberContractListReq{

		Page:       1,
		PageSize:   100,
		MemberId:   0,
		VenueId:    0,
		ContractId: 0,
	}
}

func (p *MemberContractListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.MemberId = 0
	p.VenueId = 0
	p.ContractId = 0
}

var MemberContractListReq_Page_DEFAULT int64 = 1

func (p *MemberContractListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return MemberContractListReq_Page_DEFAULT
	}
	return p.Page
}

var MemberContractListReq_PageSize_DEFAULT int64 = 100

func (p *MemberContractListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return MemberContractListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var MemberContractListReq_MemberId_DEFAULT int64 = 0

func (p *MemberContractListReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberContractListReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var MemberContractListReq_VenueId_DEFAULT int64 = 0

func (p *MemberContractListReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberContractListReq_VenueId_DEFAULT
	}
	return p.VenueId
}

var MemberContractListReq_ContractId_DEFAULT int64 = 0

func (p *MemberContractListReq) GetContractId() (v int64) {
	if !p.IsSetContractId() {
		return MemberContractListReq_ContractId_DEFAULT
	}
	return p.ContractId
}

var fieldIDToName_MemberContractListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "memberId",
	4: "venueId",
	5: "contractId",
}

func (p *MemberContractListReq) IsSetPage() bool {
	return p.Page != MemberContractListReq_Page_DEFAULT
}

func (p *MemberContractListReq) IsSetPageSize() bool {
	return p.PageSize != MemberContractListReq_PageSize_DEFAULT
}

func (p *MemberContractListReq) IsSetMemberId() bool {
	return p.MemberId != MemberContractListReq_MemberId_DEFAULT
}

func (p *MemberContractListReq) IsSetVenueId() bool {
	return p.VenueId != MemberContractListReq_VenueId_DEFAULT
}

func (p *MemberContractListReq) IsSetContractId() bool {
	return p.ContractId != MemberContractListReq_ContractId_DEFAULT
}

func (p *MemberContractListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberContractListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberContractListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *MemberContractListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *MemberContractListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberContractListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *MemberContractListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ContractId = _field
	return nil
}

func (p *MemberContractListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberContractListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberContractListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberContractListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberContractListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberContractListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberContractListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContractId() {
		if err = oprot.WriteFieldBegin("contractId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ContractId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberContractListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberContractListReq(%+v)", *p)

}

type MemberContractInfo struct {
	Name              string `thrift:"name,1,optional" form:"name" json:"name" query:"name"`
	MemberId          int64  `thrift:"memberId,2,optional" form:"memberId" json:"memberId" query:"memberId"`
	MemberName        string `thrift:"memberName,3,optional" form:"memberName" json:"memberName" query:"memberName"`
	VenueId           int64  `thrift:"venueId,4,optional" form:"venueId" json:"venueId" query:"venueId"`
	VenueName         string `thrift:"venueName,5,optional" form:"venueName" json:"venueName" query:"venueName"`
	MemberProductId   int64  `thrift:"memberProductId,6,optional" form:"memberProductId" json:"memberProductId" query:"memberProductId"`
	MemberProductName string `thrift:"memberProductName,7,optional" form:"memberProductName" json:"memberProductName" query:"memberProductName"`
	ContractId        int64  `thrift:"contractId,8,optional" form:"contractId" json:"contractId" query:"contractId"`
	Sign              string `thrift:"sign,10,optional" form:"sign" json:"sign" query:"sign"`
	SignImg           string `thrift:"signImg,11,optional" form:"signImg" json:"signImg" query:"signImg"`
	Content           string `thrift:"content,12,optional" form:"content" json:"content" query:"content"`
	CreatedAt         string `thrift:"createdAt,13,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt         string `thrift:"updatedAt,14,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
}

func NewMemberContractInfo() *MemberContractInfo {
	return &MemberContractInfo{

		Name:              "",
		MemberId:          0,
		MemberName:        "",
		VenueId:           0,
		VenueName:         "",
		MemberProductId:   0,
		MemberProductName: "",
		ContractId:        0,
		Sign:              "",
		SignImg:           "",
		Content:           "",
		CreatedAt:         "",
		UpdatedAt:         "",
	}
}

func (p *MemberContractInfo) InitDefault() {
	p.Name = ""
	p.MemberId = 0
	p.MemberName = ""
	p.VenueId = 0
	p.VenueName = ""
	p.MemberProductId = 0
	p.MemberProductName = ""
	p.ContractId = 0
	p.Sign = ""
	p.SignImg = ""
	p.Content = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
}

var MemberContractInfo_Name_DEFAULT string = ""

func (p *MemberContractInfo) GetName() (v string) {
	if !p.IsSetName() {
		return MemberContractInfo_Name_DEFAULT
	}
	return p.Name
}

var MemberContractInfo_MemberId_DEFAULT int64 = 0

func (p *MemberContractInfo) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberContractInfo_MemberId_DEFAULT
	}
	return p.MemberId
}

var MemberContractInfo_MemberName_DEFAULT string = ""

func (p *MemberContractInfo) GetMemberName() (v string) {
	if !p.IsSetMemberName() {
		return MemberContractInfo_MemberName_DEFAULT
	}
	return p.MemberName
}

var MemberContractInfo_VenueId_DEFAULT int64 = 0

func (p *MemberContractInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberContractInfo_VenueId_DEFAULT
	}
	return p.VenueId
}

var MemberContractInfo_VenueName_DEFAULT string = ""

func (p *MemberContractInfo) GetVenueName() (v string) {
	if !p.IsSetVenueName() {
		return MemberContractInfo_VenueName_DEFAULT
	}
	return p.VenueName
}

var MemberContractInfo_MemberProductId_DEFAULT int64 = 0

func (p *MemberContractInfo) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return MemberContractInfo_MemberProductId_DEFAULT
	}
	return p.MemberProductId
}

var MemberContractInfo_MemberProductName_DEFAULT string = ""

func (p *MemberContractInfo) GetMemberProductName() (v string) {
	if !p.IsSetMemberProductName() {
		return MemberContractInfo_MemberProductName_DEFAULT
	}
	return p.MemberProductName
}

var MemberContractInfo_ContractId_DEFAULT int64 = 0

func (p *MemberContractInfo) GetContractId() (v int64) {
	if !p.IsSetContractId() {
		return MemberContractInfo_ContractId_DEFAULT
	}
	return p.ContractId
}

var MemberContractInfo_Sign_DEFAULT string = ""

func (p *MemberContractInfo) GetSign() (v string) {
	if !p.IsSetSign() {
		return MemberContractInfo_Sign_DEFAULT
	}
	return p.Sign
}

var MemberContractInfo_SignImg_DEFAULT string = ""

func (p *MemberContractInfo) GetSignImg() (v string) {
	if !p.IsSetSignImg() {
		return MemberContractInfo_SignImg_DEFAULT
	}
	return p.SignImg
}

var MemberContractInfo_Content_DEFAULT string = ""

func (p *MemberContractInfo) GetContent() (v string) {
	if !p.IsSetContent() {
		return MemberContractInfo_Content_DEFAULT
	}
	return p.Content
}

var MemberContractInfo_CreatedAt_DEFAULT string = ""

func (p *MemberContractInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return MemberContractInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var MemberContractInfo_UpdatedAt_DEFAULT string = ""

func (p *MemberContractInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return MemberContractInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var fieldIDToName_MemberContractInfo = map[int16]string{
	1:  "name",
	2:  "memberId",
	3:  "memberName",
	4:  "venueId",
	5:  "venueName",
	6:  "memberProductId",
	7:  "memberProductName",
	8:  "contractId",
	10: "sign",
	11: "signImg",
	12: "content",
	13: "createdAt",
	14: "updatedAt",
}

func (p *MemberContractInfo) IsSetName() bool {
	return p.Name != MemberContractInfo_Name_DEFAULT
}

func (p *MemberContractInfo) IsSetMemberId() bool {
	return p.MemberId != MemberContractInfo_MemberId_DEFAULT
}

func (p *MemberContractInfo) IsSetMemberName() bool {
	return p.MemberName != MemberContractInfo_MemberName_DEFAULT
}

func (p *MemberContractInfo) IsSetVenueId() bool {
	return p.VenueId != MemberContractInfo_VenueId_DEFAULT
}

func (p *MemberContractInfo) IsSetVenueName() bool {
	return p.VenueName != MemberContractInfo_VenueName_DEFAULT
}

func (p *MemberContractInfo) IsSetMemberProductId() bool {
	return p.MemberProductId != MemberContractInfo_MemberProductId_DEFAULT
}

func (p *MemberContractInfo) IsSetMemberProductName() bool {
	return p.MemberProductName != MemberContractInfo_MemberProductName_DEFAULT
}

func (p *MemberContractInfo) IsSetContractId() bool {
	return p.ContractId != MemberContractInfo_ContractId_DEFAULT
}

func (p *MemberContractInfo) IsSetSign() bool {
	return p.Sign != MemberContractInfo_Sign_DEFAULT
}

func (p *MemberContractInfo) IsSetSignImg() bool {
	return p.SignImg != MemberContractInfo_SignImg_DEFAULT
}

func (p *MemberContractInfo) IsSetContent() bool {
	return p.Content != MemberContractInfo_Content_DEFAULT
}

func (p *MemberContractInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != MemberContractInfo_CreatedAt_DEFAULT
}

func (p *MemberContractInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != MemberContractInfo_UpdatedAt_DEFAULT
}

func (p *MemberContractInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberContractInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberContractInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberContractInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberContractInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberName = _field
	return nil
}
func (p *MemberContractInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *MemberContractInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueName = _field
	return nil
}
func (p *MemberContractInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}
func (p *MemberContractInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductName = _field
	return nil
}
func (p *MemberContractInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ContractId = _field
	return nil
}
func (p *MemberContractInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sign = _field
	return nil
}
func (p *MemberContractInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignImg = _field
	return nil
}
func (p *MemberContractInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Content = _field
	return nil
}
func (p *MemberContractInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *MemberContractInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *MemberContractInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberContractInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberContractInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberContractInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberContractInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberName() {
		if err = oprot.WriteFieldBegin("memberName", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemberName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberContractInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberContractInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueName() {
		if err = oprot.WriteFieldBegin("venueName", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.VenueName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberContractInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberContractInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductName() {
		if err = oprot.WriteFieldBegin("memberProductName", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemberProductName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberContractInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetContractId() {
		if err = oprot.WriteFieldBegin("contractId", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ContractId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberContractInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSign() {
		if err = oprot.WriteFieldBegin("sign", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Sign); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberContractInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignImg() {
		if err = oprot.WriteFieldBegin("signImg", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignImg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MemberContractInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MemberContractInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MemberContractInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *MemberContractInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberContractInfo(%+v)", *p)

}

type MemberProductSearchReq struct {
	Members []int64 `thrift:"members,1,optional" form:"members" json:"members" query:"members"`
}

func NewMemberProductSearchReq() *MemberProductSearchReq {
	return &MemberProductSearchReq{}
}

func (p *MemberProductSearchReq) InitDefault() {
}

var MemberProductSearchReq_Members_DEFAULT []int64

func (p *MemberProductSearchReq) GetMembers() (v []int64) {
	if !p.IsSetMembers() {
		return MemberProductSearchReq_Members_DEFAULT
	}
	return p.Members
}

var fieldIDToName_MemberProductSearchReq = map[int16]string{
	1: "members",
}

func (p *MemberProductSearchReq) IsSetMembers() bool {
	return p.Members != nil
}

func (p *MemberProductSearchReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductSearchReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductSearchReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Members = _field
	return nil
}

func (p *MemberProductSearchReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductSearchReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductSearchReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMembers() {
		if err = oprot.WriteFieldBegin("members", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Members)); err != nil {
			return err
		}
		for _, v := range p.Members {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProductSearchReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductSearchReq(%+v)", *p)

}

type MemberPropertySearchReq struct {
	MemberProductIds []int64 `thrift:"memberProductIds,1,optional" form:"memberProductIds" json:"memberProductIds" query:"memberProductIds"`
}

func NewMemberPropertySearchReq() *MemberPropertySearchReq {
	return &MemberPropertySearchReq{}
}

func (p *MemberPropertySearchReq) InitDefault() {
}

var MemberPropertySearchReq_MemberProductIds_DEFAULT []int64

func (p *MemberPropertySearchReq) GetMemberProductIds() (v []int64) {
	if !p.IsSetMemberProductIds() {
		return MemberPropertySearchReq_MemberProductIds_DEFAULT
	}
	return p.MemberProductIds
}

var fieldIDToName_MemberPropertySearchReq = map[int16]string{
	1: "memberProductIds",
}

func (p *MemberPropertySearchReq) IsSetMemberProductIds() bool {
	return p.MemberProductIds != nil
}

func (p *MemberPropertySearchReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberPropertySearchReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberPropertySearchReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MemberProductIds = _field
	return nil
}

func (p *MemberPropertySearchReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertySearchReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberPropertySearchReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductIds() {
		if err = oprot.WriteFieldBegin("memberProductIds", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.MemberProductIds)); err != nil {
			return err
		}
		for _, v := range p.MemberProductIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberPropertySearchReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberPropertySearchReq(%+v)", *p)

}

type UpdateMemberFollowReq struct {
	MemberId []int64 `thrift:"memberId,1,optional" form:"memberId" json:"memberId" query:"memberId"`
	FollowId int64   `thrift:"followId,2,optional" form:"followId" json:"followId" query:"followId"`
}

func NewUpdateMemberFollowReq() *UpdateMemberFollowReq {
	return &UpdateMemberFollowReq{

		MemberId: []int64{},
		FollowId: 0,
	}
}

func (p *UpdateMemberFollowReq) InitDefault() {
	p.MemberId = []int64{}
	p.FollowId = 0
}

var UpdateMemberFollowReq_MemberId_DEFAULT []int64 = []int64{}

func (p *UpdateMemberFollowReq) GetMemberId() (v []int64) {
	if !p.IsSetMemberId() {
		return UpdateMemberFollowReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var UpdateMemberFollowReq_FollowId_DEFAULT int64 = 0

func (p *UpdateMemberFollowReq) GetFollowId() (v int64) {
	if !p.IsSetFollowId() {
		return UpdateMemberFollowReq_FollowId_DEFAULT
	}
	return p.FollowId
}

var fieldIDToName_UpdateMemberFollowReq = map[int16]string{
	1: "memberId",
	2: "followId",
}

func (p *UpdateMemberFollowReq) IsSetMemberId() bool {
	return p.MemberId != nil
}

func (p *UpdateMemberFollowReq) IsSetFollowId() bool {
	return p.FollowId != UpdateMemberFollowReq_FollowId_DEFAULT
}

func (p *UpdateMemberFollowReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateMemberFollowReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateMemberFollowReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MemberId = _field
	return nil
}
func (p *UpdateMemberFollowReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FollowId = _field
	return nil
}

func (p *UpdateMemberFollowReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberFollowReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateMemberFollowReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.MemberId)); err != nil {
			return err
		}
		for _, v := range p.MemberId {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateMemberFollowReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFollowId() {
		if err = oprot.WriteFieldBegin("followId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.FollowId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateMemberFollowReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMemberFollowReq(%+v)", *p)

}

type MemberProductInfo struct {
	ID         int64                 `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name       string                `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	Price      float64               `thrift:"price,3,optional" form:"price" json:"price" query:"price"`
	Status     int64                 `thrift:"status,4,optional" form:"status" json:"status" query:"status"`
	StatusName string                `thrift:"statusName,5,optional" form:"statusName" json:"statusName" query:"statusName"`
	CreatedAt  string                `thrift:"createdAt,6,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	Sn         string                `thrift:"sn,7,optional" form:"sn" json:"sn" query:"sn"`
	MemberId   int64                 `thrift:"memberId,8,optional" form:"memberId" json:"memberId" query:"memberId"`
	OrderId    int64                 `thrift:"orderId,9,optional" form:"orderId" json:"orderId" query:"orderId"`
	VenueId    int64                 `thrift:"venueId,10,optional" form:"venueId" json:"venueId" query:"venueId"`
	VenueName  string                `thrift:"venueName,11,optional" form:"venueName" json:"venueName" query:"venueName"`
	ProductId  int64                 `thrift:"productId,12,optional" form:"productId" json:"productId" query:"productId"`
	Propertys  []*MemberPropertyInfo `thrift:"propertys,13,optional" form:"propertys" json:"propertys" query:"propertys"`
}

func NewMemberProductInfo() *MemberProductInfo {
	return &MemberProductInfo{

		ID:         0,
		Name:       "",
		Price:      0.0,
		Status:     0,
		StatusName: "",
		CreatedAt:  "",
		Sn:         "",
		MemberId:   0,
		OrderId:    0,
		VenueId:    0,
		VenueName:  "",
		ProductId:  0,
		Propertys:  []*MemberPropertyInfo{},
	}
}

func (p *MemberProductInfo) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.Price = 0.0
	p.Status = 0
	p.StatusName = ""
	p.CreatedAt = ""
	p.Sn = ""
	p.MemberId = 0
	p.OrderId = 0
	p.VenueId = 0
	p.VenueName = ""
	p.ProductId = 0
	p.Propertys = []*MemberPropertyInfo{}
}

var MemberProductInfo_ID_DEFAULT int64 = 0

func (p *MemberProductInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return MemberProductInfo_ID_DEFAULT
	}
	return p.ID
}

var MemberProductInfo_Name_DEFAULT string = ""

func (p *MemberProductInfo) GetName() (v string) {
	if !p.IsSetName() {
		return MemberProductInfo_Name_DEFAULT
	}
	return p.Name
}

var MemberProductInfo_Price_DEFAULT float64 = 0.0

func (p *MemberProductInfo) GetPrice() (v float64) {
	if !p.IsSetPrice() {
		return MemberProductInfo_Price_DEFAULT
	}
	return p.Price
}

var MemberProductInfo_Status_DEFAULT int64 = 0

func (p *MemberProductInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return MemberProductInfo_Status_DEFAULT
	}
	return p.Status
}

var MemberProductInfo_StatusName_DEFAULT string = ""

func (p *MemberProductInfo) GetStatusName() (v string) {
	if !p.IsSetStatusName() {
		return MemberProductInfo_StatusName_DEFAULT
	}
	return p.StatusName
}

var MemberProductInfo_CreatedAt_DEFAULT string = ""

func (p *MemberProductInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return MemberProductInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var MemberProductInfo_Sn_DEFAULT string = ""

func (p *MemberProductInfo) GetSn() (v string) {
	if !p.IsSetSn() {
		return MemberProductInfo_Sn_DEFAULT
	}
	return p.Sn
}

var MemberProductInfo_MemberId_DEFAULT int64 = 0

func (p *MemberProductInfo) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberProductInfo_MemberId_DEFAULT
	}
	return p.MemberId
}

var MemberProductInfo_OrderId_DEFAULT int64 = 0

func (p *MemberProductInfo) GetOrderId() (v int64) {
	if !p.IsSetOrderId() {
		return MemberProductInfo_OrderId_DEFAULT
	}
	return p.OrderId
}

var MemberProductInfo_VenueId_DEFAULT int64 = 0

func (p *MemberProductInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberProductInfo_VenueId_DEFAULT
	}
	return p.VenueId
}

var MemberProductInfo_VenueName_DEFAULT string = ""

func (p *MemberProductInfo) GetVenueName() (v string) {
	if !p.IsSetVenueName() {
		return MemberProductInfo_VenueName_DEFAULT
	}
	return p.VenueName
}

var MemberProductInfo_ProductId_DEFAULT int64 = 0

func (p *MemberProductInfo) GetProductId() (v int64) {
	if !p.IsSetProductId() {
		return MemberProductInfo_ProductId_DEFAULT
	}
	return p.ProductId
}

var MemberProductInfo_Propertys_DEFAULT []*MemberPropertyInfo = []*MemberPropertyInfo{}

func (p *MemberProductInfo) GetPropertys() (v []*MemberPropertyInfo) {
	if !p.IsSetPropertys() {
		return MemberProductInfo_Propertys_DEFAULT
	}
	return p.Propertys
}

var fieldIDToName_MemberProductInfo = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "price",
	4:  "status",
	5:  "statusName",
	6:  "createdAt",
	7:  "sn",
	8:  "memberId",
	9:  "orderId",
	10: "venueId",
	11: "venueName",
	12: "productId",
	13: "propertys",
}

func (p *MemberProductInfo) IsSetID() bool {
	return p.ID != MemberProductInfo_ID_DEFAULT
}

func (p *MemberProductInfo) IsSetName() bool {
	return p.Name != MemberProductInfo_Name_DEFAULT
}

func (p *MemberProductInfo) IsSetPrice() bool {
	return p.Price != MemberProductInfo_Price_DEFAULT
}

func (p *MemberProductInfo) IsSetStatus() bool {
	return p.Status != MemberProductInfo_Status_DEFAULT
}

func (p *MemberProductInfo) IsSetStatusName() bool {
	return p.StatusName != MemberProductInfo_StatusName_DEFAULT
}

func (p *MemberProductInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != MemberProductInfo_CreatedAt_DEFAULT
}

func (p *MemberProductInfo) IsSetSn() bool {
	return p.Sn != MemberProductInfo_Sn_DEFAULT
}

func (p *MemberProductInfo) IsSetMemberId() bool {
	return p.MemberId != MemberProductInfo_MemberId_DEFAULT
}

func (p *MemberProductInfo) IsSetOrderId() bool {
	return p.OrderId != MemberProductInfo_OrderId_DEFAULT
}

func (p *MemberProductInfo) IsSetVenueId() bool {
	return p.VenueId != MemberProductInfo_VenueId_DEFAULT
}

func (p *MemberProductInfo) IsSetVenueName() bool {
	return p.VenueName != MemberProductInfo_VenueName_DEFAULT
}

func (p *MemberProductInfo) IsSetProductId() bool {
	return p.ProductId != MemberProductInfo_ProductId_DEFAULT
}

func (p *MemberProductInfo) IsSetPropertys() bool {
	return p.Propertys != nil
}

func (p *MemberProductInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *MemberProductInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberProductInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Price = _field
	return nil
}
func (p *MemberProductInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *MemberProductInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StatusName = _field
	return nil
}
func (p *MemberProductInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *MemberProductInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sn = _field
	return nil
}
func (p *MemberProductInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberProductInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderId = _field
	return nil
}
func (p *MemberProductInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *MemberProductInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueName = _field
	return nil
}
func (p *MemberProductInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ProductId = _field
	return nil
}
func (p *MemberProductInfo) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*MemberPropertyInfo, 0, size)
	values := make([]MemberPropertyInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Propertys = _field
	return nil
}

func (p *MemberProductInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProductInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberProductInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err = oprot.WriteFieldBegin("price", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.Price); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberProductInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberProductInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusName() {
		if err = oprot.WriteFieldBegin("statusName", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StatusName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberProductInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberProductInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSn() {
		if err = oprot.WriteFieldBegin("sn", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Sn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberProductInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberProductInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderId() {
		if err = oprot.WriteFieldBegin("orderId", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.OrderId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberProductInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberProductInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueName() {
		if err = oprot.WriteFieldBegin("venueName", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.VenueName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MemberProductInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductId() {
		if err = oprot.WriteFieldBegin("productId", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MemberProductInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertys() {
		if err = oprot.WriteFieldBegin("propertys", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Propertys)); err != nil {
			return err
		}
		for _, v := range p.Propertys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MemberProductInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductInfo(%+v)", *p)

}

type MemberPropertyInfo struct {
	ID              int64        `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Sn              string       `thrift:"sn,2,optional" form:"sn" json:"sn" query:"sn"`
	MemberId        int64        `thrift:"memberId,3,optional" form:"memberId" json:"memberId" query:"memberId"`
	MemberProductId int64        `thrift:"memberProductId,4,optional" form:"memberProductId" json:"memberProductId" query:"memberProductId"`
	PropertyId      int64        `thrift:"propertyId,5,optional" form:"propertyId" json:"propertyId" query:"propertyId"`
	Name            string       `thrift:"name,6,optional" form:"name" json:"name" query:"name"`
	Price           float64      `thrift:"price,7,optional" form:"price" json:"price" query:"price"`
	Duration        int64        `thrift:"duration,8,optional" form:"duration" json:"duration" query:"duration"`
	Length          int64        `thrift:"length,9,optional" form:"length" json:"length" query:"length"`
	Count           int64        `thrift:"count,10,optional" form:"count" json:"count" query:"count"`
	CountSurplus    int64        `thrift:"countSurplus,11,optional" form:"countSurplus" json:"countSurplus" query:"countSurplus"`
	Type            string       `thrift:"type,12,optional" form:"type" json:"type" query:"type"`
	Status          int64        `thrift:"status,13,optional" form:"status" json:"status" query:"status"`
	CreatedAt       string       `thrift:"createdAt,14,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	ValidityAt      string       `thrift:"validityAt,15,optional" form:"validityAt" json:"validityAt" query:"validityAt"`
	CancelAt        string       `thrift:"cancelAt,16,optional" form:"cancelAt" json:"cancelAt" query:"cancelAt"`
	Venue           []*base.List `thrift:"venue,17,optional" form:"venue" json:"venue" query:"venue"`
	VenueId         []int64      `thrift:"venueId,18,optional" form:"venueId" json:"venueId" query:"venueId"`
	Venues          string       `thrift:"venues,19,optional" form:"venues" json:"venues" query:"venues"`
}

func NewMemberPropertyInfo() *MemberPropertyInfo {
	return &MemberPropertyInfo{

		ID:              0,
		Sn:              "",
		MemberId:        0,
		MemberProductId: 0,
		PropertyId:      0,
		Name:            "",
		Price:           0.0,
		Duration:        0,
		Length:          0,
		Count:           0,
		CountSurplus:    0,
		Type:            "",
		Status:          0,
		CreatedAt:       "",
		ValidityAt:      "",
		CancelAt:        "",
		Venue:           []*base.List{},
		VenueId:         []int64{},
		Venues:          "",
	}
}

func (p *MemberPropertyInfo) InitDefault() {
	p.ID = 0
	p.Sn = ""
	p.MemberId = 0
	p.MemberProductId = 0
	p.PropertyId = 0
	p.Name = ""
	p.Price = 0.0
	p.Duration = 0
	p.Length = 0
	p.Count = 0
	p.CountSurplus = 0
	p.Type = ""
	p.Status = 0
	p.CreatedAt = ""
	p.ValidityAt = ""
	p.CancelAt = ""
	p.Venue = []*base.List{}
	p.VenueId = []int64{}
	p.Venues = ""
}

var MemberPropertyInfo_ID_DEFAULT int64 = 0

func (p *MemberPropertyInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return MemberPropertyInfo_ID_DEFAULT
	}
	return p.ID
}

var MemberPropertyInfo_Sn_DEFAULT string = ""

func (p *MemberPropertyInfo) GetSn() (v string) {
	if !p.IsSetSn() {
		return MemberPropertyInfo_Sn_DEFAULT
	}
	return p.Sn
}

var MemberPropertyInfo_MemberId_DEFAULT int64 = 0

func (p *MemberPropertyInfo) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberPropertyInfo_MemberId_DEFAULT
	}
	return p.MemberId
}

var MemberPropertyInfo_MemberProductId_DEFAULT int64 = 0

func (p *MemberPropertyInfo) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return MemberPropertyInfo_MemberProductId_DEFAULT
	}
	return p.MemberProductId
}

var MemberPropertyInfo_PropertyId_DEFAULT int64 = 0

func (p *MemberPropertyInfo) GetPropertyId() (v int64) {
	if !p.IsSetPropertyId() {
		return MemberPropertyInfo_PropertyId_DEFAULT
	}
	return p.PropertyId
}

var MemberPropertyInfo_Name_DEFAULT string = ""

func (p *MemberPropertyInfo) GetName() (v string) {
	if !p.IsSetName() {
		return MemberPropertyInfo_Name_DEFAULT
	}
	return p.Name
}

var MemberPropertyInfo_Price_DEFAULT float64 = 0.0

func (p *MemberPropertyInfo) GetPrice() (v float64) {
	if !p.IsSetPrice() {
		return MemberPropertyInfo_Price_DEFAULT
	}
	return p.Price
}

var MemberPropertyInfo_Duration_DEFAULT int64 = 0

func (p *MemberPropertyInfo) GetDuration() (v int64) {
	if !p.IsSetDuration() {
		return MemberPropertyInfo_Duration_DEFAULT
	}
	return p.Duration
}

var MemberPropertyInfo_Length_DEFAULT int64 = 0

func (p *MemberPropertyInfo) GetLength() (v int64) {
	if !p.IsSetLength() {
		return MemberPropertyInfo_Length_DEFAULT
	}
	return p.Length
}

var MemberPropertyInfo_Count_DEFAULT int64 = 0

func (p *MemberPropertyInfo) GetCount() (v int64) {
	if !p.IsSetCount() {
		return MemberPropertyInfo_Count_DEFAULT
	}
	return p.Count
}

var MemberPropertyInfo_CountSurplus_DEFAULT int64 = 0

func (p *MemberPropertyInfo) GetCountSurplus() (v int64) {
	if !p.IsSetCountSurplus() {
		return MemberPropertyInfo_CountSurplus_DEFAULT
	}
	return p.CountSurplus
}

var MemberPropertyInfo_Type_DEFAULT string = ""

func (p *MemberPropertyInfo) GetType() (v string) {
	if !p.IsSetType() {
		return MemberPropertyInfo_Type_DEFAULT
	}
	return p.Type
}

var MemberPropertyInfo_Status_DEFAULT int64 = 0

func (p *MemberPropertyInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return MemberPropertyInfo_Status_DEFAULT
	}
	return p.Status
}

var MemberPropertyInfo_CreatedAt_DEFAULT string = ""

func (p *MemberPropertyInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return MemberPropertyInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var MemberPropertyInfo_ValidityAt_DEFAULT string = ""

func (p *MemberPropertyInfo) GetValidityAt() (v string) {
	if !p.IsSetValidityAt() {
		return MemberPropertyInfo_ValidityAt_DEFAULT
	}
	return p.ValidityAt
}

var MemberPropertyInfo_CancelAt_DEFAULT string = ""

func (p *MemberPropertyInfo) GetCancelAt() (v string) {
	if !p.IsSetCancelAt() {
		return MemberPropertyInfo_CancelAt_DEFAULT
	}
	return p.CancelAt
}

var MemberPropertyInfo_Venue_DEFAULT []*base.List = []*base.List{}

func (p *MemberPropertyInfo) GetVenue() (v []*base.List) {
	if !p.IsSetVenue() {
		return MemberPropertyInfo_Venue_DEFAULT
	}
	return p.Venue
}

var MemberPropertyInfo_VenueId_DEFAULT []int64 = []int64{}

func (p *MemberPropertyInfo) GetVenueId() (v []int64) {
	if !p.IsSetVenueId() {
		return MemberPropertyInfo_VenueId_DEFAULT
	}
	return p.VenueId
}

var MemberPropertyInfo_Venues_DEFAULT string = ""

func (p *MemberPropertyInfo) GetVenues() (v string) {
	if !p.IsSetVenues() {
		return MemberPropertyInfo_Venues_DEFAULT
	}
	return p.Venues
}

var fieldIDToName_MemberPropertyInfo = map[int16]string{
	1:  "id",
	2:  "sn",
	3:  "memberId",
	4:  "memberProductId",
	5:  "propertyId",
	6:  "name",
	7:  "price",
	8:  "duration",
	9:  "length",
	10: "count",
	11: "countSurplus",
	12: "type",
	13: "status",
	14: "createdAt",
	15: "validityAt",
	16: "cancelAt",
	17: "venue",
	18: "venueId",
	19: "venues",
}

func (p *MemberPropertyInfo) IsSetID() bool {
	return p.ID != MemberPropertyInfo_ID_DEFAULT
}

func (p *MemberPropertyInfo) IsSetSn() bool {
	return p.Sn != MemberPropertyInfo_Sn_DEFAULT
}

func (p *MemberPropertyInfo) IsSetMemberId() bool {
	return p.MemberId != MemberPropertyInfo_MemberId_DEFAULT
}

func (p *MemberPropertyInfo) IsSetMemberProductId() bool {
	return p.MemberProductId != MemberPropertyInfo_MemberProductId_DEFAULT
}

func (p *MemberPropertyInfo) IsSetPropertyId() bool {
	return p.PropertyId != MemberPropertyInfo_PropertyId_DEFAULT
}

func (p *MemberPropertyInfo) IsSetName() bool {
	return p.Name != MemberPropertyInfo_Name_DEFAULT
}

func (p *MemberPropertyInfo) IsSetPrice() bool {
	return p.Price != MemberPropertyInfo_Price_DEFAULT
}

func (p *MemberPropertyInfo) IsSetDuration() bool {
	return p.Duration != MemberPropertyInfo_Duration_DEFAULT
}

func (p *MemberPropertyInfo) IsSetLength() bool {
	return p.Length != MemberPropertyInfo_Length_DEFAULT
}

func (p *MemberPropertyInfo) IsSetCount() bool {
	return p.Count != MemberPropertyInfo_Count_DEFAULT
}

func (p *MemberPropertyInfo) IsSetCountSurplus() bool {
	return p.CountSurplus != MemberPropertyInfo_CountSurplus_DEFAULT
}

func (p *MemberPropertyInfo) IsSetType() bool {
	return p.Type != MemberPropertyInfo_Type_DEFAULT
}

func (p *MemberPropertyInfo) IsSetStatus() bool {
	return p.Status != MemberPropertyInfo_Status_DEFAULT
}

func (p *MemberPropertyInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != MemberPropertyInfo_CreatedAt_DEFAULT
}

func (p *MemberPropertyInfo) IsSetValidityAt() bool {
	return p.ValidityAt != MemberPropertyInfo_ValidityAt_DEFAULT
}

func (p *MemberPropertyInfo) IsSetCancelAt() bool {
	return p.CancelAt != MemberPropertyInfo_CancelAt_DEFAULT
}

func (p *MemberPropertyInfo) IsSetVenue() bool {
	return p.Venue != nil
}

func (p *MemberPropertyInfo) IsSetVenueId() bool {
	return p.VenueId != nil
}

func (p *MemberPropertyInfo) IsSetVenues() bool {
	return p.Venues != MemberPropertyInfo_Venues_DEFAULT
}

func (p *MemberPropertyInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberPropertyInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberPropertyInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sn = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyId = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Price = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Duration = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Length = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Count = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CountSurplus = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ValidityAt = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CancelAt = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*base.List, 0, size)
	values := make([]base.List, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Venue = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VenueId = _field
	return nil
}
func (p *MemberPropertyInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Venues = _field
	return nil
}

func (p *MemberPropertyInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertyInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSn() {
		if err = oprot.WriteFieldBegin("sn", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Sn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyId() {
		if err = oprot.WriteFieldBegin("propertyId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err = oprot.WriteFieldBegin("price", thrift.DOUBLE, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.Price); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err = oprot.WriteFieldBegin("duration", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Duration); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLength() {
		if err = oprot.WriteFieldBegin("length", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Length); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("count", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCountSurplus() {
		if err = oprot.WriteFieldBegin("countSurplus", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CountSurplus); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetValidityAt() {
		if err = oprot.WriteFieldBegin("validityAt", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ValidityAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCancelAt() {
		if err = oprot.WriteFieldBegin("cancelAt", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CancelAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenue() {
		if err = oprot.WriteFieldBegin("venue", thrift.LIST, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Venue)); err != nil {
			return err
		}
		for _, v := range p.Venue {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.LIST, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.VenueId)); err != nil {
			return err
		}
		for _, v := range p.VenueId {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *MemberPropertyInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenues() {
		if err = oprot.WriteFieldBegin("venues", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Venues); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *MemberPropertyInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberPropertyInfo(%+v)", *p)

}

type MemberEntryInfo struct {
	ID               int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	CreatedAt        string `thrift:"createdAt,2,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	MemberPropertyId int64  `thrift:"memberPropertyId,3,optional" form:"memberPropertyId" json:"memberPropertyId" query:"memberPropertyId"`
	EntryAt          string `thrift:"entryAt,4,optional" form:"entryAt" json:"entryAt" query:"entryAt"`
	LeavingAt        string `thrift:"leavingAt,5,optional" form:"leavingAt" json:"leavingAt" query:"leavingAt"`
	MemberId         int64  `thrift:"memberId,6,optional" form:"memberId" json:"memberId" query:"memberId"`
	MemberProductId  int64  `thrift:"memberProductId,7,optional" form:"memberProductId" json:"memberProductId" query:"memberProductId"`
	UserId           int64  `thrift:"userId,8,optional" form:"userId" json:"userId" query:"userId"`
	VenueId          int64  `thrift:"venueId,9,optional" form:"venueId" json:"venueId" query:"venueId"`
}

func NewMemberEntryInfo() *MemberEntryInfo {
	return &MemberEntryInfo{

		ID:               0,
		CreatedAt:        "",
		MemberPropertyId: 0,
		EntryAt:          "",
		LeavingAt:        "",
		MemberId:         0,
		MemberProductId:  0,
		UserId:           0,
		VenueId:          0,
	}
}

func (p *MemberEntryInfo) InitDefault() {
	p.ID = 0
	p.CreatedAt = ""
	p.MemberPropertyId = 0
	p.EntryAt = ""
	p.LeavingAt = ""
	p.MemberId = 0
	p.MemberProductId = 0
	p.UserId = 0
	p.VenueId = 0
}

var MemberEntryInfo_ID_DEFAULT int64 = 0

func (p *MemberEntryInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return MemberEntryInfo_ID_DEFAULT
	}
	return p.ID
}

var MemberEntryInfo_CreatedAt_DEFAULT string = ""

func (p *MemberEntryInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return MemberEntryInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var MemberEntryInfo_MemberPropertyId_DEFAULT int64 = 0

func (p *MemberEntryInfo) GetMemberPropertyId() (v int64) {
	if !p.IsSetMemberPropertyId() {
		return MemberEntryInfo_MemberPropertyId_DEFAULT
	}
	return p.MemberPropertyId
}

var MemberEntryInfo_EntryAt_DEFAULT string = ""

func (p *MemberEntryInfo) GetEntryAt() (v string) {
	if !p.IsSetEntryAt() {
		return MemberEntryInfo_EntryAt_DEFAULT
	}
	return p.EntryAt
}

var MemberEntryInfo_LeavingAt_DEFAULT string = ""

func (p *MemberEntryInfo) GetLeavingAt() (v string) {
	if !p.IsSetLeavingAt() {
		return MemberEntryInfo_LeavingAt_DEFAULT
	}
	return p.LeavingAt
}

var MemberEntryInfo_MemberId_DEFAULT int64 = 0

func (p *MemberEntryInfo) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberEntryInfo_MemberId_DEFAULT
	}
	return p.MemberId
}

var MemberEntryInfo_MemberProductId_DEFAULT int64 = 0

func (p *MemberEntryInfo) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return MemberEntryInfo_MemberProductId_DEFAULT
	}
	return p.MemberProductId
}

var MemberEntryInfo_UserId_DEFAULT int64 = 0

func (p *MemberEntryInfo) GetUserId() (v int64) {
	if !p.IsSetUserId() {
		return MemberEntryInfo_UserId_DEFAULT
	}
	return p.UserId
}

var MemberEntryInfo_VenueId_DEFAULT int64 = 0

func (p *MemberEntryInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberEntryInfo_VenueId_DEFAULT
	}
	return p.VenueId
}

var fieldIDToName_MemberEntryInfo = map[int16]string{
	1: "id",
	2: "createdAt",
	3: "memberPropertyId",
	4: "entryAt",
	5: "leavingAt",
	6: "memberId",
	7: "memberProductId",
	8: "userId",
	9: "venueId",
}

func (p *MemberEntryInfo) IsSetID() bool {
	return p.ID != MemberEntryInfo_ID_DEFAULT
}

func (p *MemberEntryInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != MemberEntryInfo_CreatedAt_DEFAULT
}

func (p *MemberEntryInfo) IsSetMemberPropertyId() bool {
	return p.MemberPropertyId != MemberEntryInfo_MemberPropertyId_DEFAULT
}

func (p *MemberEntryInfo) IsSetEntryAt() bool {
	return p.EntryAt != MemberEntryInfo_EntryAt_DEFAULT
}

func (p *MemberEntryInfo) IsSetLeavingAt() bool {
	return p.LeavingAt != MemberEntryInfo_LeavingAt_DEFAULT
}

func (p *MemberEntryInfo) IsSetMemberId() bool {
	return p.MemberId != MemberEntryInfo_MemberId_DEFAULT
}

func (p *MemberEntryInfo) IsSetMemberProductId() bool {
	return p.MemberProductId != MemberEntryInfo_MemberProductId_DEFAULT
}

func (p *MemberEntryInfo) IsSetUserId() bool {
	return p.UserId != MemberEntryInfo_UserId_DEFAULT
}

func (p *MemberEntryInfo) IsSetVenueId() bool {
	return p.VenueId != MemberEntryInfo_VenueId_DEFAULT
}

func (p *MemberEntryInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberEntryInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberEntryInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *MemberEntryInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *MemberEntryInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberPropertyId = _field
	return nil
}
func (p *MemberEntryInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EntryAt = _field
	return nil
}
func (p *MemberEntryInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeavingAt = _field
	return nil
}
func (p *MemberEntryInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberEntryInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}
func (p *MemberEntryInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *MemberEntryInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}

func (p *MemberEntryInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberEntryInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberEntryInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberEntryInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberEntryInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberPropertyId() {
		if err = oprot.WriteFieldBegin("memberPropertyId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberPropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberEntryInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryAt() {
		if err = oprot.WriteFieldBegin("entryAt", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EntryAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberEntryInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLeavingAt() {
		if err = oprot.WriteFieldBegin("leavingAt", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.LeavingAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberEntryInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberEntryInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberEntryInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserId() {
		if err = oprot.WriteFieldBegin("userId", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.UserId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberEntryInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberEntryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberEntryInfo(%+v)", *p)

}

type LoginReq struct {
	Mobile     string `thrift:"mobile,1,optional" form:"mobile" json:"mobile" query:"mobile"`
	SmsCaptcha string `thrift:"smsCaptcha,2,optional" form:"smsCaptcha" json:"smsCaptcha" query:"smsCaptcha"`
}

func NewLoginReq() *LoginReq {
	return &LoginReq{

		Mobile:     "",
		SmsCaptcha: "",
	}
}

func (p *LoginReq) InitDefault() {
	p.Mobile = ""
	p.SmsCaptcha = ""
}

var LoginReq_Mobile_DEFAULT string = ""

func (p *LoginReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return LoginReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var LoginReq_SmsCaptcha_DEFAULT string = ""

func (p *LoginReq) GetSmsCaptcha() (v string) {
	if !p.IsSetSmsCaptcha() {
		return LoginReq_SmsCaptcha_DEFAULT
	}
	return p.SmsCaptcha
}

var fieldIDToName_LoginReq = map[int16]string{
	1: "mobile",
	2: "smsCaptcha",
}

func (p *LoginReq) IsSetMobile() bool {
	return p.Mobile != LoginReq_Mobile_DEFAULT
}

func (p *LoginReq) IsSetSmsCaptcha() bool {
	return p.SmsCaptcha != LoginReq_SmsCaptcha_DEFAULT
}

func (p *LoginReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LoginReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *LoginReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SmsCaptcha = _field
	return nil
}

func (p *LoginReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSmsCaptcha() {
		if err = oprot.WriteFieldBegin("smsCaptcha", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SmsCaptcha); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginReq(%+v)", *p)

}

type MemberService interface {
	// 新增用户
	CreateMember(ctx context.Context, req *CreateOrUpdateMemberReq) (r *base.NilResponse, err error)
	// 更新用户
	UpdateMember(ctx context.Context, req *CreateOrUpdateMemberReq) (r *base.NilResponse, err error)
	// 获取用户基本信息
	MemberInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)
	// 获取用户列表
	MemberList(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error)

	MemberListExport(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error)
	// 更新用户状态
	UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	DelMember(ctx context.Context, req *base.Ids) (r *base.NilResponse, err error)

	UpdateMemberFollow(ctx context.Context, req *UpdateMemberFollowReq) (r *base.NilResponse, err error)
	// 更新用户状态
	MemberSearch(ctx context.Context, req *MemberSearchReq) (r *base.NilResponse, err error)

	MemberProductList(ctx context.Context, req *MemberProductListReq) (r *base.NilResponse, err error)

	MemberPropertyList(ctx context.Context, req *MemberPropertyListReq) (r *base.NilResponse, err error)

	MemberProductDetail(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	MemberPropertyDetail(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	MemberPropertyUpdate(ctx context.Context, req *MemberPropertyListReq) (r *base.NilResponse, err error)

	MemberContractList(ctx context.Context, req *MemberPropertyListReq) (r *base.NilResponse, err error)

	MemberProductSearch(ctx context.Context, req *MemberProductSearchReq) (r *base.NilResponse, err error)

	MemberPropertySearch(ctx context.Context, req *MemberPropertySearchReq) (r *base.NilResponse, err error)
}

type MemberServiceClient struct {
	c thrift.TClient
}

func NewMemberServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MemberServiceClient {
	return &MemberServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMemberServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MemberServiceClient {
	return &MemberServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMemberServiceClient(c thrift.TClient) *MemberServiceClient {
	return &MemberServiceClient{
		c: c,
	}
}

func (p *MemberServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MemberServiceClient) CreateMember(ctx context.Context, req *CreateOrUpdateMemberReq) (r *base.NilResponse, err error) {
	var _args MemberServiceCreateMemberArgs
	_args.Req = req
	var _result MemberServiceCreateMemberResult
	if err = p.Client_().Call(ctx, "CreateMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) UpdateMember(ctx context.Context, req *CreateOrUpdateMemberReq) (r *base.NilResponse, err error) {
	var _args MemberServiceUpdateMemberArgs
	_args.Req = req
	var _result MemberServiceUpdateMemberResult
	if err = p.Client_().Call(ctx, "UpdateMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberInfoArgs
	_args.Req = req
	var _result MemberServiceMemberInfoResult
	if err = p.Client_().Call(ctx, "MemberInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberList(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberListArgs
	_args.Req = req
	var _result MemberServiceMemberListResult
	if err = p.Client_().Call(ctx, "MemberList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberListExport(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberListExportArgs
	_args.Req = req
	var _result MemberServiceMemberListExportResult
	if err = p.Client_().Call(ctx, "MemberListExport", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args MemberServiceUpdateMemberStatusArgs
	_args.Req = req
	var _result MemberServiceUpdateMemberStatusResult
	if err = p.Client_().Call(ctx, "UpdateMemberStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) DelMember(ctx context.Context, req *base.Ids) (r *base.NilResponse, err error) {
	var _args MemberServiceDelMemberArgs
	_args.Req = req
	var _result MemberServiceDelMemberResult
	if err = p.Client_().Call(ctx, "DelMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) UpdateMemberFollow(ctx context.Context, req *UpdateMemberFollowReq) (r *base.NilResponse, err error) {
	var _args MemberServiceUpdateMemberFollowArgs
	_args.Req = req
	var _result MemberServiceUpdateMemberFollowResult
	if err = p.Client_().Call(ctx, "UpdateMemberFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberSearch(ctx context.Context, req *MemberSearchReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberSearchArgs
	_args.Req = req
	var _result MemberServiceMemberSearchResult
	if err = p.Client_().Call(ctx, "MemberSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberProductList(ctx context.Context, req *MemberProductListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberProductListArgs
	_args.Req = req
	var _result MemberServiceMemberProductListResult
	if err = p.Client_().Call(ctx, "MemberProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberPropertyList(ctx context.Context, req *MemberPropertyListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberPropertyListArgs
	_args.Req = req
	var _result MemberServiceMemberPropertyListResult
	if err = p.Client_().Call(ctx, "MemberPropertyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberProductDetail(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberProductDetailArgs
	_args.Req = req
	var _result MemberServiceMemberProductDetailResult
	if err = p.Client_().Call(ctx, "MemberProductDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberPropertyDetail(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberPropertyDetailArgs
	_args.Req = req
	var _result MemberServiceMemberPropertyDetailResult
	if err = p.Client_().Call(ctx, "MemberPropertyDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberPropertyUpdate(ctx context.Context, req *MemberPropertyListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberPropertyUpdateArgs
	_args.Req = req
	var _result MemberServiceMemberPropertyUpdateResult
	if err = p.Client_().Call(ctx, "MemberPropertyUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberContractList(ctx context.Context, req *MemberPropertyListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberContractListArgs
	_args.Req = req
	var _result MemberServiceMemberContractListResult
	if err = p.Client_().Call(ctx, "MemberContractList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberProductSearch(ctx context.Context, req *MemberProductSearchReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberProductSearchArgs
	_args.Req = req
	var _result MemberServiceMemberProductSearchResult
	if err = p.Client_().Call(ctx, "MemberProductSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberPropertySearch(ctx context.Context, req *MemberPropertySearchReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberPropertySearchArgs
	_args.Req = req
	var _result MemberServiceMemberPropertySearchResult
	if err = p.Client_().Call(ctx, "MemberPropertySearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MemberServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MemberService
}

func (p *MemberServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MemberServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MemberServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMemberServiceProcessor(handler MemberService) *MemberServiceProcessor {
	self := &MemberServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateMember", &memberServiceProcessorCreateMember{handler: handler})
	self.AddToProcessorMap("UpdateMember", &memberServiceProcessorUpdateMember{handler: handler})
	self.AddToProcessorMap("MemberInfo", &memberServiceProcessorMemberInfo{handler: handler})
	self.AddToProcessorMap("MemberList", &memberServiceProcessorMemberList{handler: handler})
	self.AddToProcessorMap("MemberListExport", &memberServiceProcessorMemberListExport{handler: handler})
	self.AddToProcessorMap("UpdateMemberStatus", &memberServiceProcessorUpdateMemberStatus{handler: handler})
	self.AddToProcessorMap("DelMember", &memberServiceProcessorDelMember{handler: handler})
	self.AddToProcessorMap("UpdateMemberFollow", &memberServiceProcessorUpdateMemberFollow{handler: handler})
	self.AddToProcessorMap("MemberSearch", &memberServiceProcessorMemberSearch{handler: handler})
	self.AddToProcessorMap("MemberProductList", &memberServiceProcessorMemberProductList{handler: handler})
	self.AddToProcessorMap("MemberPropertyList", &memberServiceProcessorMemberPropertyList{handler: handler})
	self.AddToProcessorMap("MemberProductDetail", &memberServiceProcessorMemberProductDetail{handler: handler})
	self.AddToProcessorMap("MemberPropertyDetail", &memberServiceProcessorMemberPropertyDetail{handler: handler})
	self.AddToProcessorMap("MemberPropertyUpdate", &memberServiceProcessorMemberPropertyUpdate{handler: handler})
	self.AddToProcessorMap("MemberContractList", &memberServiceProcessorMemberContractList{handler: handler})
	self.AddToProcessorMap("MemberProductSearch", &memberServiceProcessorMemberProductSearch{handler: handler})
	self.AddToProcessorMap("MemberPropertySearch", &memberServiceProcessorMemberPropertySearch{handler: handler})
	return self
}
func (p *MemberServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type memberServiceProcessorCreateMember struct {
	handler MemberService
}

func (p *memberServiceProcessorCreateMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceCreateMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceCreateMemberResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateMember(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateMember: "+err2.Error())
		oprot.WriteMessageBegin("CreateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorUpdateMember struct {
	handler MemberService
}

func (p *memberServiceProcessorUpdateMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceUpdateMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceUpdateMemberResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateMember(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateMember: "+err2.Error())
		oprot.WriteMessageBegin("UpdateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberInfo struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberInfoResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberInfo: "+err2.Error())
		oprot.WriteMessageBegin("MemberInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberList struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberList: "+err2.Error())
		oprot.WriteMessageBegin("MemberList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberListExport struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberListExport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberListExportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberListExport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberListExportResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberListExport(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberListExport: "+err2.Error())
		oprot.WriteMessageBegin("MemberListExport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberListExport", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorUpdateMemberStatus struct {
	handler MemberService
}

func (p *memberServiceProcessorUpdateMemberStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceUpdateMemberStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateMemberStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceUpdateMemberStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateMemberStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateMemberStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateMemberStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateMemberStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorDelMember struct {
	handler MemberService
}

func (p *memberServiceProcessorDelMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceDelMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DelMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceDelMemberResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.DelMember(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DelMember: "+err2.Error())
		oprot.WriteMessageBegin("DelMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DelMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorUpdateMemberFollow struct {
	handler MemberService
}

func (p *memberServiceProcessorUpdateMemberFollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceUpdateMemberFollowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateMemberFollow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceUpdateMemberFollowResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateMemberFollow(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateMemberFollow: "+err2.Error())
		oprot.WriteMessageBegin("UpdateMemberFollow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateMemberFollow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberSearch struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberSearch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberSearchResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberSearch(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberSearch: "+err2.Error())
		oprot.WriteMessageBegin("MemberSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberProductList struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberProductList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberProductListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberProductList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberProductListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberProductList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberProductList: "+err2.Error())
		oprot.WriteMessageBegin("MemberProductList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberProductList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberPropertyList struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberPropertyList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberPropertyListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberPropertyList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberPropertyListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberPropertyList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberPropertyList: "+err2.Error())
		oprot.WriteMessageBegin("MemberPropertyList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberPropertyList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberProductDetail struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberProductDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberProductDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberProductDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberProductDetailResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberProductDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberProductDetail: "+err2.Error())
		oprot.WriteMessageBegin("MemberProductDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberProductDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberPropertyDetail struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberPropertyDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberPropertyDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberPropertyDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberPropertyDetailResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberPropertyDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberPropertyDetail: "+err2.Error())
		oprot.WriteMessageBegin("MemberPropertyDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberPropertyDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberPropertyUpdate struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberPropertyUpdate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberPropertyUpdateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberPropertyUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberPropertyUpdateResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberPropertyUpdate(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberPropertyUpdate: "+err2.Error())
		oprot.WriteMessageBegin("MemberPropertyUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberPropertyUpdate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberContractList struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberContractList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberContractListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberContractList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberContractListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberContractList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberContractList: "+err2.Error())
		oprot.WriteMessageBegin("MemberContractList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberContractList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberProductSearch struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberProductSearch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberProductSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberProductSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberProductSearchResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberProductSearch(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberProductSearch: "+err2.Error())
		oprot.WriteMessageBegin("MemberProductSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberProductSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberPropertySearch struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberPropertySearch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberPropertySearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberPropertySearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberPropertySearchResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberPropertySearch(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberPropertySearch: "+err2.Error())
		oprot.WriteMessageBegin("MemberPropertySearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberPropertySearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MemberServiceCreateMemberArgs struct {
	Req *CreateOrUpdateMemberReq `thrift:"req,1"`
}

func NewMemberServiceCreateMemberArgs() *MemberServiceCreateMemberArgs {
	return &MemberServiceCreateMemberArgs{}
}

func (p *MemberServiceCreateMemberArgs) InitDefault() {
}

var MemberServiceCreateMemberArgs_Req_DEFAULT *CreateOrUpdateMemberReq

func (p *MemberServiceCreateMemberArgs) GetReq() (v *CreateOrUpdateMemberReq) {
	if !p.IsSetReq() {
		return MemberServiceCreateMemberArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceCreateMemberArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceCreateMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceCreateMemberArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceCreateMemberArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceCreateMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateMemberReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceCreateMemberArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMember_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceCreateMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceCreateMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCreateMemberArgs(%+v)", *p)

}

type MemberServiceCreateMemberResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceCreateMemberResult() *MemberServiceCreateMemberResult {
	return &MemberServiceCreateMemberResult{}
}

func (p *MemberServiceCreateMemberResult) InitDefault() {
}

var MemberServiceCreateMemberResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceCreateMemberResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceCreateMemberResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceCreateMemberResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceCreateMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceCreateMemberResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceCreateMemberResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceCreateMemberResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceCreateMemberResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMember_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceCreateMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceCreateMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCreateMemberResult(%+v)", *p)

}

type MemberServiceUpdateMemberArgs struct {
	Req *CreateOrUpdateMemberReq `thrift:"req,1"`
}

func NewMemberServiceUpdateMemberArgs() *MemberServiceUpdateMemberArgs {
	return &MemberServiceUpdateMemberArgs{}
}

func (p *MemberServiceUpdateMemberArgs) InitDefault() {
}

var MemberServiceUpdateMemberArgs_Req_DEFAULT *CreateOrUpdateMemberReq

func (p *MemberServiceUpdateMemberArgs) GetReq() (v *CreateOrUpdateMemberReq) {
	if !p.IsSetReq() {
		return MemberServiceUpdateMemberArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceUpdateMemberArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceUpdateMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceUpdateMemberArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateMemberReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceUpdateMemberArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMember_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberArgs(%+v)", *p)

}

type MemberServiceUpdateMemberResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceUpdateMemberResult() *MemberServiceUpdateMemberResult {
	return &MemberServiceUpdateMemberResult{}
}

func (p *MemberServiceUpdateMemberResult) InitDefault() {
}

var MemberServiceUpdateMemberResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceUpdateMemberResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceUpdateMemberResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceUpdateMemberResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceUpdateMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceUpdateMemberResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceUpdateMemberResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMember_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberResult(%+v)", *p)

}

type MemberServiceMemberInfoArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewMemberServiceMemberInfoArgs() *MemberServiceMemberInfoArgs {
	return &MemberServiceMemberInfoArgs{}
}

func (p *MemberServiceMemberInfoArgs) InitDefault() {
}

var MemberServiceMemberInfoArgs_Req_DEFAULT *base.IDReq

func (p *MemberServiceMemberInfoArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberInfoArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberInfoArgs(%+v)", *p)

}

type MemberServiceMemberInfoResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberInfoResult() *MemberServiceMemberInfoResult {
	return &MemberServiceMemberInfoResult{}
}

func (p *MemberServiceMemberInfoResult) InitDefault() {
}

var MemberServiceMemberInfoResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberInfoResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberInfoResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberInfoResult(%+v)", *p)

}

type MemberServiceMemberListArgs struct {
	Req *MemberListReq `thrift:"req,1"`
}

func NewMemberServiceMemberListArgs() *MemberServiceMemberListArgs {
	return &MemberServiceMemberListArgs{}
}

func (p *MemberServiceMemberListArgs) InitDefault() {
}

var MemberServiceMemberListArgs_Req_DEFAULT *MemberListReq

func (p *MemberServiceMemberListArgs) GetReq() (v *MemberListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberListArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberListArgs(%+v)", *p)

}

type MemberServiceMemberListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberListResult() *MemberServiceMemberListResult {
	return &MemberServiceMemberListResult{}
}

func (p *MemberServiceMemberListResult) InitDefault() {
}

var MemberServiceMemberListResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberListResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberListResult(%+v)", *p)

}

type MemberServiceMemberListExportArgs struct {
	Req *MemberListReq `thrift:"req,1"`
}

func NewMemberServiceMemberListExportArgs() *MemberServiceMemberListExportArgs {
	return &MemberServiceMemberListExportArgs{}
}

func (p *MemberServiceMemberListExportArgs) InitDefault() {
}

var MemberServiceMemberListExportArgs_Req_DEFAULT *MemberListReq

func (p *MemberServiceMemberListExportArgs) GetReq() (v *MemberListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberListExportArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberListExportArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberListExportArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberListExportArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberListExportArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberListExportArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberListExportArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberListExport_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberListExportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberListExportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberListExportArgs(%+v)", *p)

}

type MemberServiceMemberListExportResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberListExportResult() *MemberServiceMemberListExportResult {
	return &MemberServiceMemberListExportResult{}
}

func (p *MemberServiceMemberListExportResult) InitDefault() {
}

var MemberServiceMemberListExportResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberListExportResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberListExportResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberListExportResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberListExportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberListExportResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberListExportResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberListExportResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberListExportResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberListExport_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberListExportResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberListExportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberListExportResult(%+v)", *p)

}

type MemberServiceUpdateMemberStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewMemberServiceUpdateMemberStatusArgs() *MemberServiceUpdateMemberStatusArgs {
	return &MemberServiceUpdateMemberStatusArgs{}
}

func (p *MemberServiceUpdateMemberStatusArgs) InitDefault() {
}

var MemberServiceUpdateMemberStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *MemberServiceUpdateMemberStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return MemberServiceUpdateMemberStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceUpdateMemberStatusArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceUpdateMemberStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceUpdateMemberStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceUpdateMemberStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberStatusArgs(%+v)", *p)

}

type MemberServiceUpdateMemberStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceUpdateMemberStatusResult() *MemberServiceUpdateMemberStatusResult {
	return &MemberServiceUpdateMemberStatusResult{}
}

func (p *MemberServiceUpdateMemberStatusResult) InitDefault() {
}

var MemberServiceUpdateMemberStatusResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceUpdateMemberStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceUpdateMemberStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceUpdateMemberStatusResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceUpdateMemberStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceUpdateMemberStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceUpdateMemberStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberStatusResult(%+v)", *p)

}

type MemberServiceDelMemberArgs struct {
	Req *base.Ids `thrift:"req,1"`
}

func NewMemberServiceDelMemberArgs() *MemberServiceDelMemberArgs {
	return &MemberServiceDelMemberArgs{}
}

func (p *MemberServiceDelMemberArgs) InitDefault() {
}

var MemberServiceDelMemberArgs_Req_DEFAULT *base.Ids

func (p *MemberServiceDelMemberArgs) GetReq() (v *base.Ids) {
	if !p.IsSetReq() {
		return MemberServiceDelMemberArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceDelMemberArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceDelMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceDelMemberArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceDelMemberArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceDelMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIds()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceDelMemberArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelMember_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceDelMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceDelMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceDelMemberArgs(%+v)", *p)

}

type MemberServiceDelMemberResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceDelMemberResult() *MemberServiceDelMemberResult {
	return &MemberServiceDelMemberResult{}
}

func (p *MemberServiceDelMemberResult) InitDefault() {
}

var MemberServiceDelMemberResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceDelMemberResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceDelMemberResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceDelMemberResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceDelMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceDelMemberResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceDelMemberResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceDelMemberResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceDelMemberResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelMember_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceDelMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceDelMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceDelMemberResult(%+v)", *p)

}

type MemberServiceUpdateMemberFollowArgs struct {
	Req *UpdateMemberFollowReq `thrift:"req,1"`
}

func NewMemberServiceUpdateMemberFollowArgs() *MemberServiceUpdateMemberFollowArgs {
	return &MemberServiceUpdateMemberFollowArgs{}
}

func (p *MemberServiceUpdateMemberFollowArgs) InitDefault() {
}

var MemberServiceUpdateMemberFollowArgs_Req_DEFAULT *UpdateMemberFollowReq

func (p *MemberServiceUpdateMemberFollowArgs) GetReq() (v *UpdateMemberFollowReq) {
	if !p.IsSetReq() {
		return MemberServiceUpdateMemberFollowArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceUpdateMemberFollowArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceUpdateMemberFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceUpdateMemberFollowArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberFollowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateMemberFollowReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceUpdateMemberFollowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberFollow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberFollowArgs(%+v)", *p)

}

type MemberServiceUpdateMemberFollowResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceUpdateMemberFollowResult() *MemberServiceUpdateMemberFollowResult {
	return &MemberServiceUpdateMemberFollowResult{}
}

func (p *MemberServiceUpdateMemberFollowResult) InitDefault() {
}

var MemberServiceUpdateMemberFollowResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceUpdateMemberFollowResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceUpdateMemberFollowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceUpdateMemberFollowResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceUpdateMemberFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceUpdateMemberFollowResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberFollowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceUpdateMemberFollowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberFollow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberFollowResult(%+v)", *p)

}

type MemberServiceMemberSearchArgs struct {
	Req *MemberSearchReq `thrift:"req,1"`
}

func NewMemberServiceMemberSearchArgs() *MemberServiceMemberSearchArgs {
	return &MemberServiceMemberSearchArgs{}
}

func (p *MemberServiceMemberSearchArgs) InitDefault() {
}

var MemberServiceMemberSearchArgs_Req_DEFAULT *MemberSearchReq

func (p *MemberServiceMemberSearchArgs) GetReq() (v *MemberSearchReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberSearchArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberSearchArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberSearchArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberSearchArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberSearchArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberSearchReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberSearchArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberSearch_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberSearchArgs(%+v)", *p)

}

type MemberServiceMemberSearchResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberSearchResult() *MemberServiceMemberSearchResult {
	return &MemberServiceMemberSearchResult{}
}

func (p *MemberServiceMemberSearchResult) InitDefault() {
}

var MemberServiceMemberSearchResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberSearchResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberSearchResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberSearchResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberSearchResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberSearchResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberSearchResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberSearchResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberSearch_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberSearchResult(%+v)", *p)

}

type MemberServiceMemberProductListArgs struct {
	Req *MemberProductListReq `thrift:"req,1"`
}

func NewMemberServiceMemberProductListArgs() *MemberServiceMemberProductListArgs {
	return &MemberServiceMemberProductListArgs{}
}

func (p *MemberServiceMemberProductListArgs) InitDefault() {
}

var MemberServiceMemberProductListArgs_Req_DEFAULT *MemberProductListReq

func (p *MemberServiceMemberProductListArgs) GetReq() (v *MemberProductListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberProductListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberProductListArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberProductListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberProductListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberProductListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberProductListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberProductListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberProductListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberProductListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberProductListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberProductListArgs(%+v)", *p)

}

type MemberServiceMemberProductListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberProductListResult() *MemberServiceMemberProductListResult {
	return &MemberServiceMemberProductListResult{}
}

func (p *MemberServiceMemberProductListResult) InitDefault() {
}

var MemberServiceMemberProductListResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberProductListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberProductListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberProductListResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberProductListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberProductListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberProductListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberProductListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberProductListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberProductListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberProductListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberProductListResult(%+v)", *p)

}

type MemberServiceMemberPropertyListArgs struct {
	Req *MemberPropertyListReq `thrift:"req,1"`
}

func NewMemberServiceMemberPropertyListArgs() *MemberServiceMemberPropertyListArgs {
	return &MemberServiceMemberPropertyListArgs{}
}

func (p *MemberServiceMemberPropertyListArgs) InitDefault() {
}

var MemberServiceMemberPropertyListArgs_Req_DEFAULT *MemberPropertyListReq

func (p *MemberServiceMemberPropertyListArgs) GetReq() (v *MemberPropertyListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberPropertyListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberPropertyListArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberPropertyListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberPropertyListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPropertyListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberPropertyListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberPropertyListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertyList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberPropertyListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPropertyListArgs(%+v)", *p)

}

type MemberServiceMemberPropertyListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberPropertyListResult() *MemberServiceMemberPropertyListResult {
	return &MemberServiceMemberPropertyListResult{}
}

func (p *MemberServiceMemberPropertyListResult) InitDefault() {
}

var MemberServiceMemberPropertyListResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberPropertyListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberPropertyListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberPropertyListResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberPropertyListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberPropertyListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPropertyListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberPropertyListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertyList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberPropertyListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPropertyListResult(%+v)", *p)

}

type MemberServiceMemberProductDetailArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewMemberServiceMemberProductDetailArgs() *MemberServiceMemberProductDetailArgs {
	return &MemberServiceMemberProductDetailArgs{}
}

func (p *MemberServiceMemberProductDetailArgs) InitDefault() {
}

var MemberServiceMemberProductDetailArgs_Req_DEFAULT *base.IDReq

func (p *MemberServiceMemberProductDetailArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberProductDetailArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberProductDetailArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberProductDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberProductDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberProductDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberProductDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberProductDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberProductDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberProductDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberProductDetailArgs(%+v)", *p)

}

type MemberServiceMemberProductDetailResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberProductDetailResult() *MemberServiceMemberProductDetailResult {
	return &MemberServiceMemberProductDetailResult{}
}

func (p *MemberServiceMemberProductDetailResult) InitDefault() {
}

var MemberServiceMemberProductDetailResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberProductDetailResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberProductDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberProductDetailResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberProductDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberProductDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberProductDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberProductDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberProductDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberProductDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberProductDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberProductDetailResult(%+v)", *p)

}

type MemberServiceMemberPropertyDetailArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewMemberServiceMemberPropertyDetailArgs() *MemberServiceMemberPropertyDetailArgs {
	return &MemberServiceMemberPropertyDetailArgs{}
}

func (p *MemberServiceMemberPropertyDetailArgs) InitDefault() {
}

var MemberServiceMemberPropertyDetailArgs_Req_DEFAULT *base.IDReq

func (p *MemberServiceMemberPropertyDetailArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberPropertyDetailArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberPropertyDetailArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberPropertyDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberPropertyDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPropertyDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberPropertyDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertyDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberPropertyDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPropertyDetailArgs(%+v)", *p)

}

type MemberServiceMemberPropertyDetailResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberPropertyDetailResult() *MemberServiceMemberPropertyDetailResult {
	return &MemberServiceMemberPropertyDetailResult{}
}

func (p *MemberServiceMemberPropertyDetailResult) InitDefault() {
}

var MemberServiceMemberPropertyDetailResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberPropertyDetailResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberPropertyDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberPropertyDetailResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberPropertyDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberPropertyDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPropertyDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberPropertyDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertyDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberPropertyDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPropertyDetailResult(%+v)", *p)

}

type MemberServiceMemberPropertyUpdateArgs struct {
	Req *MemberPropertyListReq `thrift:"req,1"`
}

func NewMemberServiceMemberPropertyUpdateArgs() *MemberServiceMemberPropertyUpdateArgs {
	return &MemberServiceMemberPropertyUpdateArgs{}
}

func (p *MemberServiceMemberPropertyUpdateArgs) InitDefault() {
}

var MemberServiceMemberPropertyUpdateArgs_Req_DEFAULT *MemberPropertyListReq

func (p *MemberServiceMemberPropertyUpdateArgs) GetReq() (v *MemberPropertyListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberPropertyUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberPropertyUpdateArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberPropertyUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberPropertyUpdateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPropertyUpdateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyUpdateArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberPropertyListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberPropertyUpdateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertyUpdate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberPropertyUpdateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPropertyUpdateArgs(%+v)", *p)

}

type MemberServiceMemberPropertyUpdateResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberPropertyUpdateResult() *MemberServiceMemberPropertyUpdateResult {
	return &MemberServiceMemberPropertyUpdateResult{}
}

func (p *MemberServiceMemberPropertyUpdateResult) InitDefault() {
}

var MemberServiceMemberPropertyUpdateResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberPropertyUpdateResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberPropertyUpdateResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberPropertyUpdateResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberPropertyUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberPropertyUpdateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPropertyUpdateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyUpdateResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberPropertyUpdateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertyUpdate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertyUpdateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberPropertyUpdateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPropertyUpdateResult(%+v)", *p)

}

type MemberServiceMemberContractListArgs struct {
	Req *MemberPropertyListReq `thrift:"req,1"`
}

func NewMemberServiceMemberContractListArgs() *MemberServiceMemberContractListArgs {
	return &MemberServiceMemberContractListArgs{}
}

func (p *MemberServiceMemberContractListArgs) InitDefault() {
}

var MemberServiceMemberContractListArgs_Req_DEFAULT *MemberPropertyListReq

func (p *MemberServiceMemberContractListArgs) GetReq() (v *MemberPropertyListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberContractListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberContractListArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberContractListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberContractListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberContractListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberContractListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberPropertyListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberContractListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberContractList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberContractListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberContractListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberContractListArgs(%+v)", *p)

}

type MemberServiceMemberContractListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberContractListResult() *MemberServiceMemberContractListResult {
	return &MemberServiceMemberContractListResult{}
}

func (p *MemberServiceMemberContractListResult) InitDefault() {
}

var MemberServiceMemberContractListResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberContractListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberContractListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberContractListResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberContractListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberContractListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberContractListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberContractListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberContractListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberContractList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberContractListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberContractListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberContractListResult(%+v)", *p)

}

type MemberServiceMemberProductSearchArgs struct {
	Req *MemberProductSearchReq `thrift:"req,1"`
}

func NewMemberServiceMemberProductSearchArgs() *MemberServiceMemberProductSearchArgs {
	return &MemberServiceMemberProductSearchArgs{}
}

func (p *MemberServiceMemberProductSearchArgs) InitDefault() {
}

var MemberServiceMemberProductSearchArgs_Req_DEFAULT *MemberProductSearchReq

func (p *MemberServiceMemberProductSearchArgs) GetReq() (v *MemberProductSearchReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberProductSearchArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberProductSearchArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberProductSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberProductSearchArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberProductSearchArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberProductSearchArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberProductSearchReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberProductSearchArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductSearch_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberProductSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberProductSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberProductSearchArgs(%+v)", *p)

}

type MemberServiceMemberProductSearchResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberProductSearchResult() *MemberServiceMemberProductSearchResult {
	return &MemberServiceMemberProductSearchResult{}
}

func (p *MemberServiceMemberProductSearchResult) InitDefault() {
}

var MemberServiceMemberProductSearchResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberProductSearchResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberProductSearchResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberProductSearchResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberProductSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberProductSearchResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberProductSearchResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberProductSearchResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberProductSearchResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductSearch_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberProductSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberProductSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberProductSearchResult(%+v)", *p)

}

type MemberServiceMemberPropertySearchArgs struct {
	Req *MemberPropertySearchReq `thrift:"req,1"`
}

func NewMemberServiceMemberPropertySearchArgs() *MemberServiceMemberPropertySearchArgs {
	return &MemberServiceMemberPropertySearchArgs{}
}

func (p *MemberServiceMemberPropertySearchArgs) InitDefault() {
}

var MemberServiceMemberPropertySearchArgs_Req_DEFAULT *MemberPropertySearchReq

func (p *MemberServiceMemberPropertySearchArgs) GetReq() (v *MemberPropertySearchReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberPropertySearchArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberPropertySearchArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberPropertySearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberPropertySearchArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPropertySearchArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertySearchArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberPropertySearchReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberPropertySearchArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertySearch_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertySearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberPropertySearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPropertySearchArgs(%+v)", *p)

}

type MemberServiceMemberPropertySearchResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberPropertySearchResult() *MemberServiceMemberPropertySearchResult {
	return &MemberServiceMemberPropertySearchResult{}
}

func (p *MemberServiceMemberPropertySearchResult) InitDefault() {
}

var MemberServiceMemberPropertySearchResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberPropertySearchResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberPropertySearchResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberPropertySearchResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberPropertySearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberPropertySearchResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPropertySearchResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertySearchResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberPropertySearchResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPropertySearch_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPropertySearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberPropertySearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPropertySearchResult(%+v)", *p)

}
