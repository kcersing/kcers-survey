// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package schedule

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"kcers-survey/idl_gen/model/base"
)

type ScheduleInfo struct {
	ID         int64   `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Type       string  `thrift:"type,2,optional" form:"type" json:"type" query:"type"`
	PropertyId int64   `thrift:"propertyId,3,optional" form:"propertyId" json:"propertyId" query:"propertyId"`
	VenueId    int64   `thrift:"venueId,4,optional" form:"venueId" json:"venueId" query:"venueId"`
	PlaceId    int64   `thrift:"placeId,5,optional" form:"placeId" json:"placeId" query:"placeId"`
	Num        int64   `thrift:"num,6,optional" form:"num" json:"num" query:"num"`
	NumSurplus int64   `thrift:"numSurplus,7,optional" form:"numSurplus" json:"numSurplus" query:"numSurplus"`
	StartAt    string  `thrift:"startAt,9,optional" form:"startAt" json:"startAt" query:"startAt"`
	EndAt      string  `thrift:"endAt,10,optional" form:"endAt" json:"endAt" query:"endAt"`
	Price      float64 `thrift:"price,11,optional" form:"price" json:"price" query:"price"`
	Name       string  `thrift:"name,12,optional" form:"name" json:"name" query:"name"`
	Remark     string  `thrift:"remark,13,optional" form:"remark" json:"remark" query:"remark"`
	//	14:optional i64 coachId =0(api.raw = "coachId")
	//	15:optional i64 memberId =0(api.raw = "memberId")
	//	16:optional i64 memberProductId =0(api.raw = "memberProductId")
	//	17:optional i64 memberProductPropertyId =0(api.raw = "memberProductPropertyId")
	Status       int64  `thrift:"status,18,optional" form:"status" json:"status" query:"status"`
	PropertyName string `thrift:"propertyName,19,optional" form:"propertyName" json:"propertyName" query:"propertyName"`
	VenueName    string `thrift:"venueName,20,optional" form:"venueName" json:"venueName" query:"venueName"`
	PlaceName    string `thrift:"placeName,21,optional" form:"placeName" json:"placeName" query:"placeName"`
	//    22:optional string coachName =""(api.raw = "coachName")
	//	23:optional string memberName =""(api.raw = "memberName")
	//	24:optional string memberProductName =""(api.raw = "memberProductName")
	//	25:optional string memberProductPropertyName =""(api.raw = "memberProductPropertyName")
	MemberCourseRecord []*ScheduleMemberInfo `thrift:"memberCourseRecord,26,optional" form:"memberCourseRecord" json:"memberCourseRecord" query:"memberCourseRecord"`
	CoachCourseRecord  []*ScheduleCoachInfo  `thrift:"coachCourseRecord,27,optional" form:"coachCourseRecord" json:"coachCourseRecord" query:"coachCourseRecord"`
	Seats              [][]*base.Seat        `thrift:"seats,25" form:"seats" json:"seats" query:"seats"`
	CreatedAt          string                `thrift:"createdAt,251,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt          string                `thrift:"updatedAt,252,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
	Date               string                `thrift:"date,28" form:"date" json:"date" query:"date"`
}

func NewScheduleInfo() *ScheduleInfo {
	return &ScheduleInfo{

		ID:                 0,
		Type:               "",
		PropertyId:         0,
		VenueId:            0,
		PlaceId:            0,
		Num:                0,
		NumSurplus:         0,
		StartAt:            "",
		EndAt:              "",
		Price:              0.0,
		Name:               "",
		Remark:             "",
		Status:             0,
		PropertyName:       "",
		VenueName:          "",
		PlaceName:          "",
		MemberCourseRecord: []*ScheduleMemberInfo{},
		CoachCourseRecord:  []*ScheduleCoachInfo{},
		Seats:              [][]*base.Seat{},
		CreatedAt:          "",
		UpdatedAt:          "",
		Date:               "",
	}
}

func (p *ScheduleInfo) InitDefault() {
	p.ID = 0
	p.Type = ""
	p.PropertyId = 0
	p.VenueId = 0
	p.PlaceId = 0
	p.Num = 0
	p.NumSurplus = 0
	p.StartAt = ""
	p.EndAt = ""
	p.Price = 0.0
	p.Name = ""
	p.Remark = ""
	p.Status = 0
	p.PropertyName = ""
	p.VenueName = ""
	p.PlaceName = ""
	p.MemberCourseRecord = []*ScheduleMemberInfo{}
	p.CoachCourseRecord = []*ScheduleCoachInfo{}
	p.Seats = [][]*base.Seat{}
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Date = ""
}

var ScheduleInfo_ID_DEFAULT int64 = 0

func (p *ScheduleInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return ScheduleInfo_ID_DEFAULT
	}
	return p.ID
}

var ScheduleInfo_Type_DEFAULT string = ""

func (p *ScheduleInfo) GetType() (v string) {
	if !p.IsSetType() {
		return ScheduleInfo_Type_DEFAULT
	}
	return p.Type
}

var ScheduleInfo_PropertyId_DEFAULT int64 = 0

func (p *ScheduleInfo) GetPropertyId() (v int64) {
	if !p.IsSetPropertyId() {
		return ScheduleInfo_PropertyId_DEFAULT
	}
	return p.PropertyId
}

var ScheduleInfo_VenueId_DEFAULT int64 = 0

func (p *ScheduleInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return ScheduleInfo_VenueId_DEFAULT
	}
	return p.VenueId
}

var ScheduleInfo_PlaceId_DEFAULT int64 = 0

func (p *ScheduleInfo) GetPlaceId() (v int64) {
	if !p.IsSetPlaceId() {
		return ScheduleInfo_PlaceId_DEFAULT
	}
	return p.PlaceId
}

var ScheduleInfo_Num_DEFAULT int64 = 0

func (p *ScheduleInfo) GetNum() (v int64) {
	if !p.IsSetNum() {
		return ScheduleInfo_Num_DEFAULT
	}
	return p.Num
}

var ScheduleInfo_NumSurplus_DEFAULT int64 = 0

func (p *ScheduleInfo) GetNumSurplus() (v int64) {
	if !p.IsSetNumSurplus() {
		return ScheduleInfo_NumSurplus_DEFAULT
	}
	return p.NumSurplus
}

var ScheduleInfo_StartAt_DEFAULT string = ""

func (p *ScheduleInfo) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return ScheduleInfo_StartAt_DEFAULT
	}
	return p.StartAt
}

var ScheduleInfo_EndAt_DEFAULT string = ""

func (p *ScheduleInfo) GetEndAt() (v string) {
	if !p.IsSetEndAt() {
		return ScheduleInfo_EndAt_DEFAULT
	}
	return p.EndAt
}

var ScheduleInfo_Price_DEFAULT float64 = 0.0

func (p *ScheduleInfo) GetPrice() (v float64) {
	if !p.IsSetPrice() {
		return ScheduleInfo_Price_DEFAULT
	}
	return p.Price
}

var ScheduleInfo_Name_DEFAULT string = ""

func (p *ScheduleInfo) GetName() (v string) {
	if !p.IsSetName() {
		return ScheduleInfo_Name_DEFAULT
	}
	return p.Name
}

var ScheduleInfo_Remark_DEFAULT string = ""

func (p *ScheduleInfo) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return ScheduleInfo_Remark_DEFAULT
	}
	return p.Remark
}

var ScheduleInfo_Status_DEFAULT int64 = 0

func (p *ScheduleInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return ScheduleInfo_Status_DEFAULT
	}
	return p.Status
}

var ScheduleInfo_PropertyName_DEFAULT string = ""

func (p *ScheduleInfo) GetPropertyName() (v string) {
	if !p.IsSetPropertyName() {
		return ScheduleInfo_PropertyName_DEFAULT
	}
	return p.PropertyName
}

var ScheduleInfo_VenueName_DEFAULT string = ""

func (p *ScheduleInfo) GetVenueName() (v string) {
	if !p.IsSetVenueName() {
		return ScheduleInfo_VenueName_DEFAULT
	}
	return p.VenueName
}

var ScheduleInfo_PlaceName_DEFAULT string = ""

func (p *ScheduleInfo) GetPlaceName() (v string) {
	if !p.IsSetPlaceName() {
		return ScheduleInfo_PlaceName_DEFAULT
	}
	return p.PlaceName
}

var ScheduleInfo_MemberCourseRecord_DEFAULT []*ScheduleMemberInfo = []*ScheduleMemberInfo{}

func (p *ScheduleInfo) GetMemberCourseRecord() (v []*ScheduleMemberInfo) {
	if !p.IsSetMemberCourseRecord() {
		return ScheduleInfo_MemberCourseRecord_DEFAULT
	}
	return p.MemberCourseRecord
}

var ScheduleInfo_CoachCourseRecord_DEFAULT []*ScheduleCoachInfo = []*ScheduleCoachInfo{}

func (p *ScheduleInfo) GetCoachCourseRecord() (v []*ScheduleCoachInfo) {
	if !p.IsSetCoachCourseRecord() {
		return ScheduleInfo_CoachCourseRecord_DEFAULT
	}
	return p.CoachCourseRecord
}

func (p *ScheduleInfo) GetSeats() (v [][]*base.Seat) {
	return p.Seats
}

var ScheduleInfo_CreatedAt_DEFAULT string = ""

func (p *ScheduleInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return ScheduleInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var ScheduleInfo_UpdatedAt_DEFAULT string = ""

func (p *ScheduleInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return ScheduleInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

func (p *ScheduleInfo) GetDate() (v string) {
	return p.Date
}

var fieldIDToName_ScheduleInfo = map[int16]string{
	1:   "id",
	2:   "type",
	3:   "propertyId",
	4:   "venueId",
	5:   "placeId",
	6:   "num",
	7:   "numSurplus",
	9:   "startAt",
	10:  "endAt",
	11:  "price",
	12:  "name",
	13:  "remark",
	18:  "status",
	19:  "propertyName",
	20:  "venueName",
	21:  "placeName",
	26:  "memberCourseRecord",
	27:  "coachCourseRecord",
	25:  "seats",
	251: "createdAt",
	252: "updatedAt",
	28:  "date",
}

func (p *ScheduleInfo) IsSetID() bool {
	return p.ID != ScheduleInfo_ID_DEFAULT
}

func (p *ScheduleInfo) IsSetType() bool {
	return p.Type != ScheduleInfo_Type_DEFAULT
}

func (p *ScheduleInfo) IsSetPropertyId() bool {
	return p.PropertyId != ScheduleInfo_PropertyId_DEFAULT
}

func (p *ScheduleInfo) IsSetVenueId() bool {
	return p.VenueId != ScheduleInfo_VenueId_DEFAULT
}

func (p *ScheduleInfo) IsSetPlaceId() bool {
	return p.PlaceId != ScheduleInfo_PlaceId_DEFAULT
}

func (p *ScheduleInfo) IsSetNum() bool {
	return p.Num != ScheduleInfo_Num_DEFAULT
}

func (p *ScheduleInfo) IsSetNumSurplus() bool {
	return p.NumSurplus != ScheduleInfo_NumSurplus_DEFAULT
}

func (p *ScheduleInfo) IsSetStartAt() bool {
	return p.StartAt != ScheduleInfo_StartAt_DEFAULT
}

func (p *ScheduleInfo) IsSetEndAt() bool {
	return p.EndAt != ScheduleInfo_EndAt_DEFAULT
}

func (p *ScheduleInfo) IsSetPrice() bool {
	return p.Price != ScheduleInfo_Price_DEFAULT
}

func (p *ScheduleInfo) IsSetName() bool {
	return p.Name != ScheduleInfo_Name_DEFAULT
}

func (p *ScheduleInfo) IsSetRemark() bool {
	return p.Remark != ScheduleInfo_Remark_DEFAULT
}

func (p *ScheduleInfo) IsSetStatus() bool {
	return p.Status != ScheduleInfo_Status_DEFAULT
}

func (p *ScheduleInfo) IsSetPropertyName() bool {
	return p.PropertyName != ScheduleInfo_PropertyName_DEFAULT
}

func (p *ScheduleInfo) IsSetVenueName() bool {
	return p.VenueName != ScheduleInfo_VenueName_DEFAULT
}

func (p *ScheduleInfo) IsSetPlaceName() bool {
	return p.PlaceName != ScheduleInfo_PlaceName_DEFAULT
}

func (p *ScheduleInfo) IsSetMemberCourseRecord() bool {
	return p.MemberCourseRecord != nil
}

func (p *ScheduleInfo) IsSetCoachCourseRecord() bool {
	return p.CoachCourseRecord != nil
}

func (p *ScheduleInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != ScheduleInfo_CreatedAt_DEFAULT
}

func (p *ScheduleInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != ScheduleInfo_UpdatedAt_DEFAULT
}

func (p *ScheduleInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 251:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField251(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 252:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField252(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *ScheduleInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyId = _field
	return nil
}
func (p *ScheduleInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *ScheduleInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceId = _field
	return nil
}
func (p *ScheduleInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Num = _field
	return nil
}
func (p *ScheduleInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumSurplus = _field
	return nil
}
func (p *ScheduleInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *ScheduleInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndAt = _field
	return nil
}
func (p *ScheduleInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Price = _field
	return nil
}
func (p *ScheduleInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ScheduleInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}
func (p *ScheduleInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ScheduleInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyName = _field
	return nil
}
func (p *ScheduleInfo) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueName = _field
	return nil
}
func (p *ScheduleInfo) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceName = _field
	return nil
}
func (p *ScheduleInfo) ReadField26(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ScheduleMemberInfo, 0, size)
	values := make([]ScheduleMemberInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MemberCourseRecord = _field
	return nil
}
func (p *ScheduleInfo) ReadField27(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ScheduleCoachInfo, 0, size)
	values := make([]ScheduleCoachInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CoachCourseRecord = _field
	return nil
}
func (p *ScheduleInfo) ReadField25(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*base.Seat, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*base.Seat, 0, size)
		values := make([]base.Seat, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Seats = _field
	return nil
}
func (p *ScheduleInfo) ReadField251(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ScheduleInfo) ReadField252(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ScheduleInfo) ReadField28(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Date = _field
	return nil
}

func (p *ScheduleInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField251(oprot); err != nil {
			fieldId = 251
			goto WriteFieldError
		}
		if err = p.writeField252(oprot); err != nil {
			fieldId = 252
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyId() {
		if err = oprot.WriteFieldBegin("propertyId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceId() {
		if err = oprot.WriteFieldBegin("placeId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PlaceId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err = oprot.WriteFieldBegin("num", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Num); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ScheduleInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumSurplus() {
		if err = oprot.WriteFieldBegin("numSurplus", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.NumSurplus); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ScheduleInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("startAt", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ScheduleInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndAt() {
		if err = oprot.WriteFieldBegin("endAt", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ScheduleInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err = oprot.WriteFieldBegin("price", thrift.DOUBLE, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.Price); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ScheduleInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ScheduleInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ScheduleInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ScheduleInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyName() {
		if err = oprot.WriteFieldBegin("propertyName", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.PropertyName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ScheduleInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueName() {
		if err = oprot.WriteFieldBegin("venueName", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.VenueName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ScheduleInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceName() {
		if err = oprot.WriteFieldBegin("placeName", thrift.STRING, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.PlaceName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ScheduleInfo) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberCourseRecord() {
		if err = oprot.WriteFieldBegin("memberCourseRecord", thrift.LIST, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MemberCourseRecord)); err != nil {
			return err
		}
		for _, v := range p.MemberCourseRecord {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *ScheduleInfo) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoachCourseRecord() {
		if err = oprot.WriteFieldBegin("coachCourseRecord", thrift.LIST, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CoachCourseRecord)); err != nil {
			return err
		}
		for _, v := range p.CoachCourseRecord {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *ScheduleInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("seats", thrift.LIST, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Seats)); err != nil {
		return err
	}
	for _, v := range p.Seats {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *ScheduleInfo) writeField251(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 251); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 end error: ", p), err)
}

func (p *ScheduleInfo) writeField252(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 252); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 end error: ", p), err)
}

func (p *ScheduleInfo) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("date", thrift.STRING, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Date); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *ScheduleInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleInfo(%+v)", *p)

}

type ScheduleMemberInfo struct {
	ID                        int64      `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	MemberId                  int64      `thrift:"memberId,2,optional" form:"memberId" json:"memberId" query:"memberId"`
	VenueId                   int64      `thrift:"venueId,3,optional" form:"venueId" json:"venueId" query:"venueId"`
	PlaceId                   int64      `thrift:"placeId,4,optional" form:"placeId" json:"placeId" query:"placeId"`
	PropertyId                int64      `thrift:"propertyId,5,optional" form:"propertyId" json:"propertyId" query:"propertyId"`
	ScheduleId                int64      `thrift:"scheduleId,6,optional" form:"scheduleId" json:"scheduleId" query:"scheduleId"`
	ScheduleName              string     `thrift:"scheduleName,7,optional" form:"scheduleName" json:"scheduleName" query:"scheduleName"`
	Type                      string     `thrift:"type,8,optional" form:"type" json:"type" query:"type"`
	StartAt                   string     `thrift:"startAt,9,optional" form:"startAt" json:"startAt" query:"startAt"`
	EndAt                     string     `thrift:"endAt,10,optional" form:"endAt" json:"endAt" query:"endAt"`
	SignStartAt               string     `thrift:"signStartAt,11,optional" form:"signStartAt" json:"signStartAt" query:"signStartAt"`
	SignEndAt                 string     `thrift:"signEndAt,12,optional" form:"signEndAt" json:"signEndAt" query:"signEndAt"`
	Status                    int64      `thrift:"status,13,optional" form:"status" json:"status" query:"status"`
	MemberProductId           int64      `thrift:"memberProductId,14,optional" form:"memberProductId" json:"memberProductId" query:"memberProductId"`
	MemberProductPropertyId   int64      `thrift:"memberProductPropertyId,15,optional" form:"memberProductPropertyId" json:"memberProductPropertyId" query:"memberProductPropertyId"`
	Seat                      *base.Seat `thrift:"seat,25" form:"seat" json:"seat" query:"seat"`
	VenueName                 string     `thrift:"venueName,16,optional" form:"venueName" json:"venueName" query:"venueName"`
	MemberName                string     `thrift:"memberName,17,optional" form:"memberName" json:"memberName" query:"memberName"`
	MemberProductName         string     `thrift:"memberProductName,18,optional" form:"memberProductName" json:"memberProductName" query:"memberProductName"`
	MemberProductPropertyName string     `thrift:"memberProductPropertyName,19,optional" form:"memberProductPropertyName" json:"memberProductPropertyName" query:"memberProductPropertyName"`
	Gender                    string     `thrift:"gender,20,optional" form:"gender" json:"gender" query:"gender"`
	Birthday                  int64      `thrift:"birthday,21,optional" form:"birthday" json:"birthday" query:"birthday"`
	Mobile                    string     `thrift:"mobile,22,optional" form:"mobile" json:"mobile" query:"mobile"`
	CreatedAt                 string     `thrift:"createdAt,251,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt                 string     `thrift:"updatedAt,252,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
	Date                      string     `thrift:"date,23" form:"date" json:"date" query:"date"`
}

func NewScheduleMemberInfo() *ScheduleMemberInfo {
	return &ScheduleMemberInfo{

		ID:                        0,
		MemberId:                  0,
		VenueId:                   0,
		PlaceId:                   0,
		PropertyId:                0,
		ScheduleId:                0,
		ScheduleName:              "",
		Type:                      "",
		StartAt:                   "",
		EndAt:                     "",
		SignStartAt:               "",
		SignEndAt:                 "",
		Status:                    0,
		MemberProductId:           0,
		MemberProductPropertyId:   0,
		Seat:                      &base.Seat{},
		VenueName:                 "",
		MemberName:                "",
		MemberProductName:         "",
		MemberProductPropertyName: "",
		Gender:                    "",
		Birthday:                  0,
		Mobile:                    "",
		CreatedAt:                 "",
		UpdatedAt:                 "",
		Date:                      "",
	}
}

func (p *ScheduleMemberInfo) InitDefault() {
	p.ID = 0
	p.MemberId = 0
	p.VenueId = 0
	p.PlaceId = 0
	p.PropertyId = 0
	p.ScheduleId = 0
	p.ScheduleName = ""
	p.Type = ""
	p.StartAt = ""
	p.EndAt = ""
	p.SignStartAt = ""
	p.SignEndAt = ""
	p.Status = 0
	p.MemberProductId = 0
	p.MemberProductPropertyId = 0
	p.Seat = &base.Seat{}
	p.VenueName = ""
	p.MemberName = ""
	p.MemberProductName = ""
	p.MemberProductPropertyName = ""
	p.Gender = ""
	p.Birthday = 0
	p.Mobile = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Date = ""
}

var ScheduleMemberInfo_ID_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return ScheduleMemberInfo_ID_DEFAULT
	}
	return p.ID
}

var ScheduleMemberInfo_MemberId_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return ScheduleMemberInfo_MemberId_DEFAULT
	}
	return p.MemberId
}

var ScheduleMemberInfo_VenueId_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return ScheduleMemberInfo_VenueId_DEFAULT
	}
	return p.VenueId
}

var ScheduleMemberInfo_PlaceId_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetPlaceId() (v int64) {
	if !p.IsSetPlaceId() {
		return ScheduleMemberInfo_PlaceId_DEFAULT
	}
	return p.PlaceId
}

var ScheduleMemberInfo_PropertyId_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetPropertyId() (v int64) {
	if !p.IsSetPropertyId() {
		return ScheduleMemberInfo_PropertyId_DEFAULT
	}
	return p.PropertyId
}

var ScheduleMemberInfo_ScheduleId_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetScheduleId() (v int64) {
	if !p.IsSetScheduleId() {
		return ScheduleMemberInfo_ScheduleId_DEFAULT
	}
	return p.ScheduleId
}

var ScheduleMemberInfo_ScheduleName_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetScheduleName() (v string) {
	if !p.IsSetScheduleName() {
		return ScheduleMemberInfo_ScheduleName_DEFAULT
	}
	return p.ScheduleName
}

var ScheduleMemberInfo_Type_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetType() (v string) {
	if !p.IsSetType() {
		return ScheduleMemberInfo_Type_DEFAULT
	}
	return p.Type
}

var ScheduleMemberInfo_StartAt_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return ScheduleMemberInfo_StartAt_DEFAULT
	}
	return p.StartAt
}

var ScheduleMemberInfo_EndAt_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetEndAt() (v string) {
	if !p.IsSetEndAt() {
		return ScheduleMemberInfo_EndAt_DEFAULT
	}
	return p.EndAt
}

var ScheduleMemberInfo_SignStartAt_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetSignStartAt() (v string) {
	if !p.IsSetSignStartAt() {
		return ScheduleMemberInfo_SignStartAt_DEFAULT
	}
	return p.SignStartAt
}

var ScheduleMemberInfo_SignEndAt_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetSignEndAt() (v string) {
	if !p.IsSetSignEndAt() {
		return ScheduleMemberInfo_SignEndAt_DEFAULT
	}
	return p.SignEndAt
}

var ScheduleMemberInfo_Status_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return ScheduleMemberInfo_Status_DEFAULT
	}
	return p.Status
}

var ScheduleMemberInfo_MemberProductId_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return ScheduleMemberInfo_MemberProductId_DEFAULT
	}
	return p.MemberProductId
}

var ScheduleMemberInfo_MemberProductPropertyId_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetMemberProductPropertyId() (v int64) {
	if !p.IsSetMemberProductPropertyId() {
		return ScheduleMemberInfo_MemberProductPropertyId_DEFAULT
	}
	return p.MemberProductPropertyId
}

var ScheduleMemberInfo_Seat_DEFAULT *base.Seat = &base.Seat{}

func (p *ScheduleMemberInfo) GetSeat() (v *base.Seat) {
	if !p.IsSetSeat() {
		return ScheduleMemberInfo_Seat_DEFAULT
	}
	return p.Seat
}

var ScheduleMemberInfo_VenueName_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetVenueName() (v string) {
	if !p.IsSetVenueName() {
		return ScheduleMemberInfo_VenueName_DEFAULT
	}
	return p.VenueName
}

var ScheduleMemberInfo_MemberName_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetMemberName() (v string) {
	if !p.IsSetMemberName() {
		return ScheduleMemberInfo_MemberName_DEFAULT
	}
	return p.MemberName
}

var ScheduleMemberInfo_MemberProductName_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetMemberProductName() (v string) {
	if !p.IsSetMemberProductName() {
		return ScheduleMemberInfo_MemberProductName_DEFAULT
	}
	return p.MemberProductName
}

var ScheduleMemberInfo_MemberProductPropertyName_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetMemberProductPropertyName() (v string) {
	if !p.IsSetMemberProductPropertyName() {
		return ScheduleMemberInfo_MemberProductPropertyName_DEFAULT
	}
	return p.MemberProductPropertyName
}

var ScheduleMemberInfo_Gender_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetGender() (v string) {
	if !p.IsSetGender() {
		return ScheduleMemberInfo_Gender_DEFAULT
	}
	return p.Gender
}

var ScheduleMemberInfo_Birthday_DEFAULT int64 = 0

func (p *ScheduleMemberInfo) GetBirthday() (v int64) {
	if !p.IsSetBirthday() {
		return ScheduleMemberInfo_Birthday_DEFAULT
	}
	return p.Birthday
}

var ScheduleMemberInfo_Mobile_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return ScheduleMemberInfo_Mobile_DEFAULT
	}
	return p.Mobile
}

var ScheduleMemberInfo_CreatedAt_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return ScheduleMemberInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var ScheduleMemberInfo_UpdatedAt_DEFAULT string = ""

func (p *ScheduleMemberInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return ScheduleMemberInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

func (p *ScheduleMemberInfo) GetDate() (v string) {
	return p.Date
}

var fieldIDToName_ScheduleMemberInfo = map[int16]string{
	1:   "id",
	2:   "memberId",
	3:   "venueId",
	4:   "placeId",
	5:   "propertyId",
	6:   "scheduleId",
	7:   "scheduleName",
	8:   "type",
	9:   "startAt",
	10:  "endAt",
	11:  "signStartAt",
	12:  "signEndAt",
	13:  "status",
	14:  "memberProductId",
	15:  "memberProductPropertyId",
	25:  "seat",
	16:  "venueName",
	17:  "memberName",
	18:  "memberProductName",
	19:  "memberProductPropertyName",
	20:  "gender",
	21:  "birthday",
	22:  "mobile",
	251: "createdAt",
	252: "updatedAt",
	23:  "date",
}

func (p *ScheduleMemberInfo) IsSetID() bool {
	return p.ID != ScheduleMemberInfo_ID_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetMemberId() bool {
	return p.MemberId != ScheduleMemberInfo_MemberId_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetVenueId() bool {
	return p.VenueId != ScheduleMemberInfo_VenueId_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetPlaceId() bool {
	return p.PlaceId != ScheduleMemberInfo_PlaceId_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetPropertyId() bool {
	return p.PropertyId != ScheduleMemberInfo_PropertyId_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetScheduleId() bool {
	return p.ScheduleId != ScheduleMemberInfo_ScheduleId_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetScheduleName() bool {
	return p.ScheduleName != ScheduleMemberInfo_ScheduleName_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetType() bool {
	return p.Type != ScheduleMemberInfo_Type_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetStartAt() bool {
	return p.StartAt != ScheduleMemberInfo_StartAt_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetEndAt() bool {
	return p.EndAt != ScheduleMemberInfo_EndAt_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetSignStartAt() bool {
	return p.SignStartAt != ScheduleMemberInfo_SignStartAt_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetSignEndAt() bool {
	return p.SignEndAt != ScheduleMemberInfo_SignEndAt_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetStatus() bool {
	return p.Status != ScheduleMemberInfo_Status_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetMemberProductId() bool {
	return p.MemberProductId != ScheduleMemberInfo_MemberProductId_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetMemberProductPropertyId() bool {
	return p.MemberProductPropertyId != ScheduleMemberInfo_MemberProductPropertyId_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetSeat() bool {
	return p.Seat != nil
}

func (p *ScheduleMemberInfo) IsSetVenueName() bool {
	return p.VenueName != ScheduleMemberInfo_VenueName_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetMemberName() bool {
	return p.MemberName != ScheduleMemberInfo_MemberName_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetMemberProductName() bool {
	return p.MemberProductName != ScheduleMemberInfo_MemberProductName_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetMemberProductPropertyName() bool {
	return p.MemberProductPropertyName != ScheduleMemberInfo_MemberProductPropertyName_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetGender() bool {
	return p.Gender != ScheduleMemberInfo_Gender_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetBirthday() bool {
	return p.Birthday != ScheduleMemberInfo_Birthday_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetMobile() bool {
	return p.Mobile != ScheduleMemberInfo_Mobile_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != ScheduleMemberInfo_CreatedAt_DEFAULT
}

func (p *ScheduleMemberInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != ScheduleMemberInfo_UpdatedAt_DEFAULT
}

func (p *ScheduleMemberInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 251:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField251(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 252:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField252(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleMemberInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleMemberInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndAt = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignStartAt = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignEndAt = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField25(iprot thrift.TProtocol) error {
	_field := base.NewSeat()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Seat = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Gender = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField21(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Birthday = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField251(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField252(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField23(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Date = _field
	return nil
}

func (p *ScheduleMemberInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleMemberInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField251(oprot); err != nil {
			fieldId = 251
			goto WriteFieldError
		}
		if err = p.writeField252(oprot); err != nil {
			fieldId = 252
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceId() {
		if err = oprot.WriteFieldBegin("placeId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PlaceId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyId() {
		if err = oprot.WriteFieldBegin("propertyId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleId() {
		if err = oprot.WriteFieldBegin("scheduleId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ScheduleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleName() {
		if err = oprot.WriteFieldBegin("scheduleName", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ScheduleName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("startAt", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndAt() {
		if err = oprot.WriteFieldBegin("endAt", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignStartAt() {
		if err = oprot.WriteFieldBegin("signStartAt", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignStartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignEndAt() {
		if err = oprot.WriteFieldBegin("signEndAt", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignEndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductPropertyId() {
		if err = oprot.WriteFieldBegin("memberProductPropertyId", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductPropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("seat", thrift.STRUCT, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Seat.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueName() {
		if err = oprot.WriteFieldBegin("venueName", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.VenueName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberName() {
		if err = oprot.WriteFieldBegin("memberName", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemberName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductName() {
		if err = oprot.WriteFieldBegin("memberProductName", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemberProductName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductPropertyName() {
		if err = oprot.WriteFieldBegin("memberProductPropertyName", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemberProductPropertyName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err = oprot.WriteFieldBegin("gender", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Gender); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthday() {
		if err = oprot.WriteFieldBegin("birthday", thrift.I64, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Birthday); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField251(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 251); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField252(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 252); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("date", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Date); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *ScheduleMemberInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleMemberInfo(%+v)", *p)

}

type CreateOrUpdateScheduleReq struct {
	ID                      int64   `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Type                    string  `thrift:"type,2,optional" form:"type" json:"type" query:"type"`
	PropertyId              int64   `thrift:"propertyId,3,optional" form:"propertyId" json:"propertyId" query:"propertyId"`
	VenueId                 int64   `thrift:"venueId,4,optional" form:"venueId" json:"venueId" query:"venueId"`
	PlaceId                 int64   `thrift:"placeId,5,optional" form:"placeId" json:"placeId" query:"placeId"`
	Num                     int64   `thrift:"num,6,optional" form:"num" json:"num" query:"num"`
	StartAt                 string  `thrift:"startAt,7,optional" form:"startAt" json:"startAt" query:"startAt"`
	Price                   float64 `thrift:"price,8,optional" form:"price" json:"price" query:"price"`
	Remark                  string  `thrift:"remark,9,optional" form:"remark" json:"remark" query:"remark"`
	CoachId                 int64   `thrift:"coachId,10,optional" form:"coachId" json:"coachId" query:"coachId"`
	MemberId                int64   `thrift:"memberId,11,optional" form:"memberId" json:"memberId" query:"memberId"`
	MemberProductId         int64   `thrift:"memberProductId,12,optional" form:"memberProductId" json:"memberProductId" query:"memberProductId"`
	MemberProductPropertyId int64   `thrift:"memberProductPropertyId,13,optional" form:"memberProductPropertyId" json:"memberProductPropertyId" query:"memberProductPropertyId"`
}

func NewCreateOrUpdateScheduleReq() *CreateOrUpdateScheduleReq {
	return &CreateOrUpdateScheduleReq{

		ID:                      0,
		Type:                    "",
		PropertyId:              0,
		VenueId:                 0,
		PlaceId:                 0,
		Num:                     0,
		StartAt:                 "",
		Price:                   0.0,
		Remark:                  "",
		CoachId:                 0,
		MemberId:                0,
		MemberProductId:         0,
		MemberProductPropertyId: 0,
	}
}

func (p *CreateOrUpdateScheduleReq) InitDefault() {
	p.ID = 0
	p.Type = ""
	p.PropertyId = 0
	p.VenueId = 0
	p.PlaceId = 0
	p.Num = 0
	p.StartAt = ""
	p.Price = 0.0
	p.Remark = ""
	p.CoachId = 0
	p.MemberId = 0
	p.MemberProductId = 0
	p.MemberProductPropertyId = 0
}

var CreateOrUpdateScheduleReq_ID_DEFAULT int64 = 0

func (p *CreateOrUpdateScheduleReq) GetID() (v int64) {
	if !p.IsSetID() {
		return CreateOrUpdateScheduleReq_ID_DEFAULT
	}
	return p.ID
}

var CreateOrUpdateScheduleReq_Type_DEFAULT string = ""

func (p *CreateOrUpdateScheduleReq) GetType() (v string) {
	if !p.IsSetType() {
		return CreateOrUpdateScheduleReq_Type_DEFAULT
	}
	return p.Type
}

var CreateOrUpdateScheduleReq_PropertyId_DEFAULT int64 = 0

func (p *CreateOrUpdateScheduleReq) GetPropertyId() (v int64) {
	if !p.IsSetPropertyId() {
		return CreateOrUpdateScheduleReq_PropertyId_DEFAULT
	}
	return p.PropertyId
}

var CreateOrUpdateScheduleReq_VenueId_DEFAULT int64 = 0

func (p *CreateOrUpdateScheduleReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return CreateOrUpdateScheduleReq_VenueId_DEFAULT
	}
	return p.VenueId
}

var CreateOrUpdateScheduleReq_PlaceId_DEFAULT int64 = 0

func (p *CreateOrUpdateScheduleReq) GetPlaceId() (v int64) {
	if !p.IsSetPlaceId() {
		return CreateOrUpdateScheduleReq_PlaceId_DEFAULT
	}
	return p.PlaceId
}

var CreateOrUpdateScheduleReq_Num_DEFAULT int64 = 0

func (p *CreateOrUpdateScheduleReq) GetNum() (v int64) {
	if !p.IsSetNum() {
		return CreateOrUpdateScheduleReq_Num_DEFAULT
	}
	return p.Num
}

var CreateOrUpdateScheduleReq_StartAt_DEFAULT string = ""

func (p *CreateOrUpdateScheduleReq) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return CreateOrUpdateScheduleReq_StartAt_DEFAULT
	}
	return p.StartAt
}

var CreateOrUpdateScheduleReq_Price_DEFAULT float64 = 0.0

func (p *CreateOrUpdateScheduleReq) GetPrice() (v float64) {
	if !p.IsSetPrice() {
		return CreateOrUpdateScheduleReq_Price_DEFAULT
	}
	return p.Price
}

var CreateOrUpdateScheduleReq_Remark_DEFAULT string = ""

func (p *CreateOrUpdateScheduleReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return CreateOrUpdateScheduleReq_Remark_DEFAULT
	}
	return p.Remark
}

var CreateOrUpdateScheduleReq_CoachId_DEFAULT int64 = 0

func (p *CreateOrUpdateScheduleReq) GetCoachId() (v int64) {
	if !p.IsSetCoachId() {
		return CreateOrUpdateScheduleReq_CoachId_DEFAULT
	}
	return p.CoachId
}

var CreateOrUpdateScheduleReq_MemberId_DEFAULT int64 = 0

func (p *CreateOrUpdateScheduleReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return CreateOrUpdateScheduleReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var CreateOrUpdateScheduleReq_MemberProductId_DEFAULT int64 = 0

func (p *CreateOrUpdateScheduleReq) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return CreateOrUpdateScheduleReq_MemberProductId_DEFAULT
	}
	return p.MemberProductId
}

var CreateOrUpdateScheduleReq_MemberProductPropertyId_DEFAULT int64 = 0

func (p *CreateOrUpdateScheduleReq) GetMemberProductPropertyId() (v int64) {
	if !p.IsSetMemberProductPropertyId() {
		return CreateOrUpdateScheduleReq_MemberProductPropertyId_DEFAULT
	}
	return p.MemberProductPropertyId
}

var fieldIDToName_CreateOrUpdateScheduleReq = map[int16]string{
	1:  "id",
	2:  "type",
	3:  "propertyId",
	4:  "venueId",
	5:  "placeId",
	6:  "num",
	7:  "startAt",
	8:  "price",
	9:  "remark",
	10: "coachId",
	11: "memberId",
	12: "memberProductId",
	13: "memberProductPropertyId",
}

func (p *CreateOrUpdateScheduleReq) IsSetID() bool {
	return p.ID != CreateOrUpdateScheduleReq_ID_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetType() bool {
	return p.Type != CreateOrUpdateScheduleReq_Type_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetPropertyId() bool {
	return p.PropertyId != CreateOrUpdateScheduleReq_PropertyId_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetVenueId() bool {
	return p.VenueId != CreateOrUpdateScheduleReq_VenueId_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetPlaceId() bool {
	return p.PlaceId != CreateOrUpdateScheduleReq_PlaceId_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetNum() bool {
	return p.Num != CreateOrUpdateScheduleReq_Num_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetStartAt() bool {
	return p.StartAt != CreateOrUpdateScheduleReq_StartAt_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetPrice() bool {
	return p.Price != CreateOrUpdateScheduleReq_Price_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetRemark() bool {
	return p.Remark != CreateOrUpdateScheduleReq_Remark_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetCoachId() bool {
	return p.CoachId != CreateOrUpdateScheduleReq_CoachId_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetMemberId() bool {
	return p.MemberId != CreateOrUpdateScheduleReq_MemberId_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetMemberProductId() bool {
	return p.MemberProductId != CreateOrUpdateScheduleReq_MemberProductId_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) IsSetMemberProductPropertyId() bool {
	return p.MemberProductPropertyId != CreateOrUpdateScheduleReq_MemberProductPropertyId_DEFAULT
}

func (p *CreateOrUpdateScheduleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateOrUpdateScheduleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Num = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField8(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Price = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField11(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyId = _field
	return nil
}

func (p *CreateOrUpdateScheduleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOrUpdateScheduleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyId() {
		if err = oprot.WriteFieldBegin("propertyId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceId() {
		if err = oprot.WriteFieldBegin("placeId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PlaceId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err = oprot.WriteFieldBegin("num", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Num); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("startAt", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err = oprot.WriteFieldBegin("price", thrift.DOUBLE, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.Price); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoachId() {
		if err = oprot.WriteFieldBegin("coachId", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CoachId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductPropertyId() {
		if err = oprot.WriteFieldBegin("memberProductPropertyId", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductPropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrUpdateScheduleReq(%+v)", *p)

}

type SearchSubscribeByMemberReq struct {
	PropertyId int64  `thrift:"propertyId,1,optional" form:"propertyId" json:"propertyId" query:"propertyId"`
	Mobile     string `thrift:"mobile,2,optional" form:"mobile" json:"mobile" query:"mobile"`
	VenueId    int64  `thrift:"venueId,3,optional" form:"venueId" json:"venueId" query:"venueId"`
	Type       string `thrift:"type,4,optional" form:"type" json:"type" query:"type"`
}

func NewSearchSubscribeByMemberReq() *SearchSubscribeByMemberReq {
	return &SearchSubscribeByMemberReq{

		PropertyId: 0,
		Mobile:     "",
		VenueId:    0,
		Type:       "",
	}
}

func (p *SearchSubscribeByMemberReq) InitDefault() {
	p.PropertyId = 0
	p.Mobile = ""
	p.VenueId = 0
	p.Type = ""
}

var SearchSubscribeByMemberReq_PropertyId_DEFAULT int64 = 0

func (p *SearchSubscribeByMemberReq) GetPropertyId() (v int64) {
	if !p.IsSetPropertyId() {
		return SearchSubscribeByMemberReq_PropertyId_DEFAULT
	}
	return p.PropertyId
}

var SearchSubscribeByMemberReq_Mobile_DEFAULT string = ""

func (p *SearchSubscribeByMemberReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return SearchSubscribeByMemberReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var SearchSubscribeByMemberReq_VenueId_DEFAULT int64 = 0

func (p *SearchSubscribeByMemberReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return SearchSubscribeByMemberReq_VenueId_DEFAULT
	}
	return p.VenueId
}

var SearchSubscribeByMemberReq_Type_DEFAULT string = ""

func (p *SearchSubscribeByMemberReq) GetType() (v string) {
	if !p.IsSetType() {
		return SearchSubscribeByMemberReq_Type_DEFAULT
	}
	return p.Type
}

var fieldIDToName_SearchSubscribeByMemberReq = map[int16]string{
	1: "propertyId",
	2: "mobile",
	3: "venueId",
	4: "type",
}

func (p *SearchSubscribeByMemberReq) IsSetPropertyId() bool {
	return p.PropertyId != SearchSubscribeByMemberReq_PropertyId_DEFAULT
}

func (p *SearchSubscribeByMemberReq) IsSetMobile() bool {
	return p.Mobile != SearchSubscribeByMemberReq_Mobile_DEFAULT
}

func (p *SearchSubscribeByMemberReq) IsSetVenueId() bool {
	return p.VenueId != SearchSubscribeByMemberReq_VenueId_DEFAULT
}

func (p *SearchSubscribeByMemberReq) IsSetType() bool {
	return p.Type != SearchSubscribeByMemberReq_Type_DEFAULT
}

func (p *SearchSubscribeByMemberReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchSubscribeByMemberReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyId = _field
	return nil
}
func (p *SearchSubscribeByMemberReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *SearchSubscribeByMemberReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *SearchSubscribeByMemberReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}

func (p *SearchSubscribeByMemberReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchSubscribeByMemberReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyId() {
		if err = oprot.WriteFieldBegin("propertyId", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchSubscribeByMemberReq(%+v)", *p)

}

type MemberSubscribeReq struct {
	MemberProductPropertyId []int64 `thrift:"memberProductPropertyId,1,optional" form:"memberProductPropertyId" json:"memberProductPropertyId" query:"memberProductPropertyId"`
	ScheduleId              int64   `thrift:"scheduleId,2,optional" form:"scheduleId" json:"scheduleId" query:"scheduleId"`
	Remark                  string  `thrift:"remark,3,optional" form:"remark" json:"remark" query:"remark"`
}

func NewMemberSubscribeReq() *MemberSubscribeReq {
	return &MemberSubscribeReq{

		MemberProductPropertyId: []int64{},
		ScheduleId:              0,
		Remark:                  "",
	}
}

func (p *MemberSubscribeReq) InitDefault() {
	p.MemberProductPropertyId = []int64{}
	p.ScheduleId = 0
	p.Remark = ""
}

var MemberSubscribeReq_MemberProductPropertyId_DEFAULT []int64 = []int64{}

func (p *MemberSubscribeReq) GetMemberProductPropertyId() (v []int64) {
	if !p.IsSetMemberProductPropertyId() {
		return MemberSubscribeReq_MemberProductPropertyId_DEFAULT
	}
	return p.MemberProductPropertyId
}

var MemberSubscribeReq_ScheduleId_DEFAULT int64 = 0

func (p *MemberSubscribeReq) GetScheduleId() (v int64) {
	if !p.IsSetScheduleId() {
		return MemberSubscribeReq_ScheduleId_DEFAULT
	}
	return p.ScheduleId
}

var MemberSubscribeReq_Remark_DEFAULT string = ""

func (p *MemberSubscribeReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return MemberSubscribeReq_Remark_DEFAULT
	}
	return p.Remark
}

var fieldIDToName_MemberSubscribeReq = map[int16]string{
	1: "memberProductPropertyId",
	2: "scheduleId",
	3: "remark",
}

func (p *MemberSubscribeReq) IsSetMemberProductPropertyId() bool {
	return p.MemberProductPropertyId != nil
}

func (p *MemberSubscribeReq) IsSetScheduleId() bool {
	return p.ScheduleId != MemberSubscribeReq_ScheduleId_DEFAULT
}

func (p *MemberSubscribeReq) IsSetRemark() bool {
	return p.Remark != MemberSubscribeReq_Remark_DEFAULT
}

func (p *MemberSubscribeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberSubscribeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberSubscribeReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MemberProductPropertyId = _field
	return nil
}
func (p *MemberSubscribeReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleId = _field
	return nil
}
func (p *MemberSubscribeReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}

func (p *MemberSubscribeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberSubscribeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberSubscribeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductPropertyId() {
		if err = oprot.WriteFieldBegin("memberProductPropertyId", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.MemberProductPropertyId)); err != nil {
			return err
		}
		for _, v := range p.MemberProductPropertyId {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberSubscribeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleId() {
		if err = oprot.WriteFieldBegin("scheduleId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ScheduleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberSubscribeReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberSubscribeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberSubscribeReq(%+v)", *p)

}

type ScheduleListReq struct {
	MemberId    int64   `thrift:"memberId,3,optional" form:"memberId" json:"memberId" query:"memberId"`
	CoachIds    []int64 `thrift:"coachIds,4,optional" form:"coachIds" json:"coachIds" query:"coachIds"`
	ProductIds  []int64 `thrift:"productIds,5,optional" form:"productIds" json:"productIds" query:"productIds"`
	VenueId     int64   `thrift:"venueId,6,optional" form:"venueId" json:"venueId" query:"venueId"`
	PropertyIds []int64 `thrift:"propertyIds,7,optional" form:"propertyIds" json:"propertyIds" query:"propertyIds"`
	StartAt     string  `thrift:"startAt,8,optional" form:"startAt" json:"startAt" query:"startAt"`
	Type        string  `thrift:"type,9,optional" form:"type" json:"type" query:"type"`
	Page        int64   `thrift:"page,101,optional" form:"page" json:"page" query:"page"`
	PageSize    int64   `thrift:"pageSize,102,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
}

func NewScheduleListReq() *ScheduleListReq {
	return &ScheduleListReq{

		MemberId:    0,
		CoachIds:    []int64{},
		ProductIds:  []int64{},
		VenueId:     0,
		PropertyIds: []int64{},
		StartAt:     "",
		Type:        "",
		Page:        0,
		PageSize:    0,
	}
}

func (p *ScheduleListReq) InitDefault() {
	p.MemberId = 0
	p.CoachIds = []int64{}
	p.ProductIds = []int64{}
	p.VenueId = 0
	p.PropertyIds = []int64{}
	p.StartAt = ""
	p.Type = ""
	p.Page = 0
	p.PageSize = 0
}

var ScheduleListReq_MemberId_DEFAULT int64 = 0

func (p *ScheduleListReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return ScheduleListReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var ScheduleListReq_CoachIds_DEFAULT []int64 = []int64{}

func (p *ScheduleListReq) GetCoachIds() (v []int64) {
	if !p.IsSetCoachIds() {
		return ScheduleListReq_CoachIds_DEFAULT
	}
	return p.CoachIds
}

var ScheduleListReq_ProductIds_DEFAULT []int64 = []int64{}

func (p *ScheduleListReq) GetProductIds() (v []int64) {
	if !p.IsSetProductIds() {
		return ScheduleListReq_ProductIds_DEFAULT
	}
	return p.ProductIds
}

var ScheduleListReq_VenueId_DEFAULT int64 = 0

func (p *ScheduleListReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return ScheduleListReq_VenueId_DEFAULT
	}
	return p.VenueId
}

var ScheduleListReq_PropertyIds_DEFAULT []int64 = []int64{}

func (p *ScheduleListReq) GetPropertyIds() (v []int64) {
	if !p.IsSetPropertyIds() {
		return ScheduleListReq_PropertyIds_DEFAULT
	}
	return p.PropertyIds
}

var ScheduleListReq_StartAt_DEFAULT string = ""

func (p *ScheduleListReq) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return ScheduleListReq_StartAt_DEFAULT
	}
	return p.StartAt
}

var ScheduleListReq_Type_DEFAULT string = ""

func (p *ScheduleListReq) GetType() (v string) {
	if !p.IsSetType() {
		return ScheduleListReq_Type_DEFAULT
	}
	return p.Type
}

var ScheduleListReq_Page_DEFAULT int64 = 0

func (p *ScheduleListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ScheduleListReq_Page_DEFAULT
	}
	return p.Page
}

var ScheduleListReq_PageSize_DEFAULT int64 = 0

func (p *ScheduleListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ScheduleListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var fieldIDToName_ScheduleListReq = map[int16]string{
	3:   "memberId",
	4:   "coachIds",
	5:   "productIds",
	6:   "venueId",
	7:   "propertyIds",
	8:   "startAt",
	9:   "type",
	101: "page",
	102: "pageSize",
}

func (p *ScheduleListReq) IsSetMemberId() bool {
	return p.MemberId != ScheduleListReq_MemberId_DEFAULT
}

func (p *ScheduleListReq) IsSetCoachIds() bool {
	return p.CoachIds != nil
}

func (p *ScheduleListReq) IsSetProductIds() bool {
	return p.ProductIds != nil
}

func (p *ScheduleListReq) IsSetVenueId() bool {
	return p.VenueId != ScheduleListReq_VenueId_DEFAULT
}

func (p *ScheduleListReq) IsSetPropertyIds() bool {
	return p.PropertyIds != nil
}

func (p *ScheduleListReq) IsSetStartAt() bool {
	return p.StartAt != ScheduleListReq_StartAt_DEFAULT
}

func (p *ScheduleListReq) IsSetType() bool {
	return p.Type != ScheduleListReq_Type_DEFAULT
}

func (p *ScheduleListReq) IsSetPage() bool {
	return p.Page != ScheduleListReq_Page_DEFAULT
}

func (p *ScheduleListReq) IsSetPageSize() bool {
	return p.PageSize != ScheduleListReq_PageSize_DEFAULT
}

func (p *ScheduleListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *ScheduleListReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CoachIds = _field
	return nil
}
func (p *ScheduleListReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ProductIds = _field
	return nil
}
func (p *ScheduleListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *ScheduleListReq) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PropertyIds = _field
	return nil
}
func (p *ScheduleListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *ScheduleListReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleListReq) ReadField101(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *ScheduleListReq) ReadField102(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *ScheduleListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoachIds() {
		if err = oprot.WriteFieldBegin("coachIds", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.CoachIds)); err != nil {
			return err
		}
		for _, v := range p.CoachIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductIds() {
		if err = oprot.WriteFieldBegin("productIds", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ProductIds)); err != nil {
			return err
		}
		for _, v := range p.ProductIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ScheduleListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyIds() {
		if err = oprot.WriteFieldBegin("propertyIds", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.PropertyIds)); err != nil {
			return err
		}
		for _, v := range p.PropertyIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ScheduleListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("startAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ScheduleListReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ScheduleListReq) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *ScheduleListReq) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *ScheduleListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleListReq(%+v)", *p)

}

type ScheduleMemberListReq struct {
	Type       string `thrift:"type,1,optional" form:"type" json:"type" query:"type"`
	MemberId   int64  `thrift:"memberId,2,optional" form:"memberId" json:"memberId" query:"memberId"`
	ScheduleId int64  `thrift:"scheduleId,3,optional" form:"scheduleId" json:"scheduleId" query:"scheduleId"`
	Page       int64  `thrift:"page,101,optional" form:"page" json:"page" query:"page"`
	PageSize   int64  `thrift:"pageSize,102,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
}

func NewScheduleMemberListReq() *ScheduleMemberListReq {
	return &ScheduleMemberListReq{

		Type:       "",
		MemberId:   0,
		ScheduleId: 0,
		Page:       0,
		PageSize:   0,
	}
}

func (p *ScheduleMemberListReq) InitDefault() {
	p.Type = ""
	p.MemberId = 0
	p.ScheduleId = 0
	p.Page = 0
	p.PageSize = 0
}

var ScheduleMemberListReq_Type_DEFAULT string = ""

func (p *ScheduleMemberListReq) GetType() (v string) {
	if !p.IsSetType() {
		return ScheduleMemberListReq_Type_DEFAULT
	}
	return p.Type
}

var ScheduleMemberListReq_MemberId_DEFAULT int64 = 0

func (p *ScheduleMemberListReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return ScheduleMemberListReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var ScheduleMemberListReq_ScheduleId_DEFAULT int64 = 0

func (p *ScheduleMemberListReq) GetScheduleId() (v int64) {
	if !p.IsSetScheduleId() {
		return ScheduleMemberListReq_ScheduleId_DEFAULT
	}
	return p.ScheduleId
}

var ScheduleMemberListReq_Page_DEFAULT int64 = 0

func (p *ScheduleMemberListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ScheduleMemberListReq_Page_DEFAULT
	}
	return p.Page
}

var ScheduleMemberListReq_PageSize_DEFAULT int64 = 0

func (p *ScheduleMemberListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ScheduleMemberListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var fieldIDToName_ScheduleMemberListReq = map[int16]string{
	1:   "type",
	2:   "memberId",
	3:   "scheduleId",
	101: "page",
	102: "pageSize",
}

func (p *ScheduleMemberListReq) IsSetType() bool {
	return p.Type != ScheduleMemberListReq_Type_DEFAULT
}

func (p *ScheduleMemberListReq) IsSetMemberId() bool {
	return p.MemberId != ScheduleMemberListReq_MemberId_DEFAULT
}

func (p *ScheduleMemberListReq) IsSetScheduleId() bool {
	return p.ScheduleId != ScheduleMemberListReq_ScheduleId_DEFAULT
}

func (p *ScheduleMemberListReq) IsSetPage() bool {
	return p.Page != ScheduleMemberListReq_Page_DEFAULT
}

func (p *ScheduleMemberListReq) IsSetPageSize() bool {
	return p.PageSize != ScheduleMemberListReq_PageSize_DEFAULT
}

func (p *ScheduleMemberListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleMemberListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleMemberListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleMemberListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *ScheduleMemberListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleId = _field
	return nil
}
func (p *ScheduleMemberListReq) ReadField101(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *ScheduleMemberListReq) ReadField102(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *ScheduleMemberListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleMemberListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleId() {
		if err = oprot.WriteFieldBegin("scheduleId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ScheduleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *ScheduleMemberListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleMemberListReq(%+v)", *p)

}

type ScheduleCoachListReq struct {
	Type       string `thrift:"type,1,optional" form:"type" json:"type" query:"type"`
	CoachId    int64  `thrift:"coachId,2,optional" form:"coachId" json:"coachId" query:"coachId"`
	ScheduleId int64  `thrift:"scheduleId,3,optional" form:"scheduleId" json:"scheduleId" query:"scheduleId"`
	Page       int64  `thrift:"page,101,optional" form:"page" json:"page" query:"page"`
	PageSize   int64  `thrift:"pageSize,102,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
}

func NewScheduleCoachListReq() *ScheduleCoachListReq {
	return &ScheduleCoachListReq{

		Type:       "",
		CoachId:    0,
		ScheduleId: 0,
		Page:       0,
		PageSize:   0,
	}
}

func (p *ScheduleCoachListReq) InitDefault() {
	p.Type = ""
	p.CoachId = 0
	p.ScheduleId = 0
	p.Page = 0
	p.PageSize = 0
}

var ScheduleCoachListReq_Type_DEFAULT string = ""

func (p *ScheduleCoachListReq) GetType() (v string) {
	if !p.IsSetType() {
		return ScheduleCoachListReq_Type_DEFAULT
	}
	return p.Type
}

var ScheduleCoachListReq_CoachId_DEFAULT int64 = 0

func (p *ScheduleCoachListReq) GetCoachId() (v int64) {
	if !p.IsSetCoachId() {
		return ScheduleCoachListReq_CoachId_DEFAULT
	}
	return p.CoachId
}

var ScheduleCoachListReq_ScheduleId_DEFAULT int64 = 0

func (p *ScheduleCoachListReq) GetScheduleId() (v int64) {
	if !p.IsSetScheduleId() {
		return ScheduleCoachListReq_ScheduleId_DEFAULT
	}
	return p.ScheduleId
}

var ScheduleCoachListReq_Page_DEFAULT int64 = 0

func (p *ScheduleCoachListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ScheduleCoachListReq_Page_DEFAULT
	}
	return p.Page
}

var ScheduleCoachListReq_PageSize_DEFAULT int64 = 0

func (p *ScheduleCoachListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ScheduleCoachListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var fieldIDToName_ScheduleCoachListReq = map[int16]string{
	1:   "type",
	2:   "coachId",
	3:   "scheduleId",
	101: "page",
	102: "pageSize",
}

func (p *ScheduleCoachListReq) IsSetType() bool {
	return p.Type != ScheduleCoachListReq_Type_DEFAULT
}

func (p *ScheduleCoachListReq) IsSetCoachId() bool {
	return p.CoachId != ScheduleCoachListReq_CoachId_DEFAULT
}

func (p *ScheduleCoachListReq) IsSetScheduleId() bool {
	return p.ScheduleId != ScheduleCoachListReq_ScheduleId_DEFAULT
}

func (p *ScheduleCoachListReq) IsSetPage() bool {
	return p.Page != ScheduleCoachListReq_Page_DEFAULT
}

func (p *ScheduleCoachListReq) IsSetPageSize() bool {
	return p.PageSize != ScheduleCoachListReq_PageSize_DEFAULT
}

func (p *ScheduleCoachListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleCoachListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleCoachListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleCoachListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachId = _field
	return nil
}
func (p *ScheduleCoachListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleId = _field
	return nil
}
func (p *ScheduleCoachListReq) ReadField101(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *ScheduleCoachListReq) ReadField102(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *ScheduleCoachListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleCoachListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoachId() {
		if err = oprot.WriteFieldBegin("coachId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CoachId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleId() {
		if err = oprot.WriteFieldBegin("scheduleId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ScheduleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *ScheduleCoachListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleCoachListReq(%+v)", *p)

}

type ScheduleCoachInfo struct {
	ID           int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	CoachId      int64  `thrift:"coachId,2,optional" form:"coachId" json:"coachId" query:"coachId"`
	VenueId      int64  `thrift:"venueId,3,optional" form:"venueId" json:"venueId" query:"venueId"`
	PlaceId      int64  `thrift:"placeId,4,optional" form:"placeId" json:"placeId" query:"placeId"`
	PropertyId   int64  `thrift:"propertyId,5,optional" form:"propertyId" json:"propertyId" query:"propertyId"`
	ScheduleId   int64  `thrift:"scheduleId,6,optional" form:"scheduleId" json:"scheduleId" query:"scheduleId"`
	Type         string `thrift:"type,7,optional" form:"type" json:"type" query:"type"`
	Date         string `thrift:"date,8,optional" form:"date" json:"date" query:"date"`
	StartAt      string `thrift:"startAt,9,optional" form:"startAt" json:"startAt" query:"startAt"`
	EndAt        string `thrift:"endAt,10,optional" form:"endAt" json:"endAt" query:"endAt"`
	SignStartAt  string `thrift:"signStartAt,11,optional" form:"signStartAt" json:"signStartAt" query:"signStartAt"`
	SignEndAt    string `thrift:"signEndAt,12,optional" form:"signEndAt" json:"signEndAt" query:"signEndAt"`
	Status       int64  `thrift:"status,13,optional" form:"status" json:"status" query:"status"`
	ScheduleName string `thrift:"scheduleName,14,optional" form:"scheduleName" json:"scheduleName" query:"scheduleName"`
	PropertyName string `thrift:"propertyName,15,optional" form:"propertyName" json:"propertyName" query:"propertyName"`
	VenueName    string `thrift:"venueName,16,optional" form:"venueName" json:"venueName" query:"venueName"`
	PlaceName    string `thrift:"placeName,17,optional" form:"placeName" json:"placeName" query:"placeName"`
	CoachName    string `thrift:"coachName,18,optional" form:"coachName" json:"coachName" query:"coachName"`
	CoachAvatar  string `thrift:"coachAvatar,19,optional" form:"coachAvatar" json:"coachAvatar" query:"coachAvatar"`
	//	20:optional string mobile ="" (api.raw = "mobile")
	//	21:optional string memberName ="" (api.raw = "memberName")
	//	22:optional string memberAvatar ="" (api.raw = "memberAvatar")
	//	23:optional string memberProductName ="" (api.raw = "memberProductName")
	//	24:optional string memberProductPropertyName  ="" (api.raw = "memberProductPropertyName")
	Remark string `thrift:"remark,25,optional" form:"remark" json:"remark" query:"remark"`
	//	26:optional string mRemark ="" (api.raw = "mRemark")
	CreatedAt string `thrift:"createdAt,251,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt string `thrift:"updatedAt,252,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
}

func NewScheduleCoachInfo() *ScheduleCoachInfo {
	return &ScheduleCoachInfo{

		ID:           0,
		CoachId:      0,
		VenueId:      0,
		PlaceId:      0,
		PropertyId:   0,
		ScheduleId:   0,
		Type:         "",
		Date:         "",
		StartAt:      "",
		EndAt:        "",
		SignStartAt:  "",
		SignEndAt:    "",
		Status:       0,
		ScheduleName: "",
		PropertyName: "",
		VenueName:    "",
		PlaceName:    "",
		CoachName:    "",
		CoachAvatar:  "",
		Remark:       "",
		CreatedAt:    "",
		UpdatedAt:    "",
	}
}

func (p *ScheduleCoachInfo) InitDefault() {
	p.ID = 0
	p.CoachId = 0
	p.VenueId = 0
	p.PlaceId = 0
	p.PropertyId = 0
	p.ScheduleId = 0
	p.Type = ""
	p.Date = ""
	p.StartAt = ""
	p.EndAt = ""
	p.SignStartAt = ""
	p.SignEndAt = ""
	p.Status = 0
	p.ScheduleName = ""
	p.PropertyName = ""
	p.VenueName = ""
	p.PlaceName = ""
	p.CoachName = ""
	p.CoachAvatar = ""
	p.Remark = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
}

var ScheduleCoachInfo_ID_DEFAULT int64 = 0

func (p *ScheduleCoachInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return ScheduleCoachInfo_ID_DEFAULT
	}
	return p.ID
}

var ScheduleCoachInfo_CoachId_DEFAULT int64 = 0

func (p *ScheduleCoachInfo) GetCoachId() (v int64) {
	if !p.IsSetCoachId() {
		return ScheduleCoachInfo_CoachId_DEFAULT
	}
	return p.CoachId
}

var ScheduleCoachInfo_VenueId_DEFAULT int64 = 0

func (p *ScheduleCoachInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return ScheduleCoachInfo_VenueId_DEFAULT
	}
	return p.VenueId
}

var ScheduleCoachInfo_PlaceId_DEFAULT int64 = 0

func (p *ScheduleCoachInfo) GetPlaceId() (v int64) {
	if !p.IsSetPlaceId() {
		return ScheduleCoachInfo_PlaceId_DEFAULT
	}
	return p.PlaceId
}

var ScheduleCoachInfo_PropertyId_DEFAULT int64 = 0

func (p *ScheduleCoachInfo) GetPropertyId() (v int64) {
	if !p.IsSetPropertyId() {
		return ScheduleCoachInfo_PropertyId_DEFAULT
	}
	return p.PropertyId
}

var ScheduleCoachInfo_ScheduleId_DEFAULT int64 = 0

func (p *ScheduleCoachInfo) GetScheduleId() (v int64) {
	if !p.IsSetScheduleId() {
		return ScheduleCoachInfo_ScheduleId_DEFAULT
	}
	return p.ScheduleId
}

var ScheduleCoachInfo_Type_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetType() (v string) {
	if !p.IsSetType() {
		return ScheduleCoachInfo_Type_DEFAULT
	}
	return p.Type
}

var ScheduleCoachInfo_Date_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetDate() (v string) {
	if !p.IsSetDate() {
		return ScheduleCoachInfo_Date_DEFAULT
	}
	return p.Date
}

var ScheduleCoachInfo_StartAt_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return ScheduleCoachInfo_StartAt_DEFAULT
	}
	return p.StartAt
}

var ScheduleCoachInfo_EndAt_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetEndAt() (v string) {
	if !p.IsSetEndAt() {
		return ScheduleCoachInfo_EndAt_DEFAULT
	}
	return p.EndAt
}

var ScheduleCoachInfo_SignStartAt_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetSignStartAt() (v string) {
	if !p.IsSetSignStartAt() {
		return ScheduleCoachInfo_SignStartAt_DEFAULT
	}
	return p.SignStartAt
}

var ScheduleCoachInfo_SignEndAt_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetSignEndAt() (v string) {
	if !p.IsSetSignEndAt() {
		return ScheduleCoachInfo_SignEndAt_DEFAULT
	}
	return p.SignEndAt
}

var ScheduleCoachInfo_Status_DEFAULT int64 = 0

func (p *ScheduleCoachInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return ScheduleCoachInfo_Status_DEFAULT
	}
	return p.Status
}

var ScheduleCoachInfo_ScheduleName_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetScheduleName() (v string) {
	if !p.IsSetScheduleName() {
		return ScheduleCoachInfo_ScheduleName_DEFAULT
	}
	return p.ScheduleName
}

var ScheduleCoachInfo_PropertyName_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetPropertyName() (v string) {
	if !p.IsSetPropertyName() {
		return ScheduleCoachInfo_PropertyName_DEFAULT
	}
	return p.PropertyName
}

var ScheduleCoachInfo_VenueName_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetVenueName() (v string) {
	if !p.IsSetVenueName() {
		return ScheduleCoachInfo_VenueName_DEFAULT
	}
	return p.VenueName
}

var ScheduleCoachInfo_PlaceName_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetPlaceName() (v string) {
	if !p.IsSetPlaceName() {
		return ScheduleCoachInfo_PlaceName_DEFAULT
	}
	return p.PlaceName
}

var ScheduleCoachInfo_CoachName_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetCoachName() (v string) {
	if !p.IsSetCoachName() {
		return ScheduleCoachInfo_CoachName_DEFAULT
	}
	return p.CoachName
}

var ScheduleCoachInfo_CoachAvatar_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetCoachAvatar() (v string) {
	if !p.IsSetCoachAvatar() {
		return ScheduleCoachInfo_CoachAvatar_DEFAULT
	}
	return p.CoachAvatar
}

var ScheduleCoachInfo_Remark_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return ScheduleCoachInfo_Remark_DEFAULT
	}
	return p.Remark
}

var ScheduleCoachInfo_CreatedAt_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return ScheduleCoachInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var ScheduleCoachInfo_UpdatedAt_DEFAULT string = ""

func (p *ScheduleCoachInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return ScheduleCoachInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var fieldIDToName_ScheduleCoachInfo = map[int16]string{
	1:   "id",
	2:   "coachId",
	3:   "venueId",
	4:   "placeId",
	5:   "propertyId",
	6:   "scheduleId",
	7:   "type",
	8:   "date",
	9:   "startAt",
	10:  "endAt",
	11:  "signStartAt",
	12:  "signEndAt",
	13:  "status",
	14:  "scheduleName",
	15:  "propertyName",
	16:  "venueName",
	17:  "placeName",
	18:  "coachName",
	19:  "coachAvatar",
	25:  "remark",
	251: "createdAt",
	252: "updatedAt",
}

func (p *ScheduleCoachInfo) IsSetID() bool {
	return p.ID != ScheduleCoachInfo_ID_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetCoachId() bool {
	return p.CoachId != ScheduleCoachInfo_CoachId_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetVenueId() bool {
	return p.VenueId != ScheduleCoachInfo_VenueId_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetPlaceId() bool {
	return p.PlaceId != ScheduleCoachInfo_PlaceId_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetPropertyId() bool {
	return p.PropertyId != ScheduleCoachInfo_PropertyId_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetScheduleId() bool {
	return p.ScheduleId != ScheduleCoachInfo_ScheduleId_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetType() bool {
	return p.Type != ScheduleCoachInfo_Type_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetDate() bool {
	return p.Date != ScheduleCoachInfo_Date_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetStartAt() bool {
	return p.StartAt != ScheduleCoachInfo_StartAt_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetEndAt() bool {
	return p.EndAt != ScheduleCoachInfo_EndAt_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetSignStartAt() bool {
	return p.SignStartAt != ScheduleCoachInfo_SignStartAt_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetSignEndAt() bool {
	return p.SignEndAt != ScheduleCoachInfo_SignEndAt_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetStatus() bool {
	return p.Status != ScheduleCoachInfo_Status_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetScheduleName() bool {
	return p.ScheduleName != ScheduleCoachInfo_ScheduleName_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetPropertyName() bool {
	return p.PropertyName != ScheduleCoachInfo_PropertyName_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetVenueName() bool {
	return p.VenueName != ScheduleCoachInfo_VenueName_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetPlaceName() bool {
	return p.PlaceName != ScheduleCoachInfo_PlaceName_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetCoachName() bool {
	return p.CoachName != ScheduleCoachInfo_CoachName_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetCoachAvatar() bool {
	return p.CoachAvatar != ScheduleCoachInfo_CoachAvatar_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetRemark() bool {
	return p.Remark != ScheduleCoachInfo_Remark_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != ScheduleCoachInfo_CreatedAt_DEFAULT
}

func (p *ScheduleCoachInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != ScheduleCoachInfo_UpdatedAt_DEFAULT
}

func (p *ScheduleCoachInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 251:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField251(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 252:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField252(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleCoachInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleCoachInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachId = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceId = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyId = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleId = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Date = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndAt = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignStartAt = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignEndAt = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachAvatar = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField25(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField251(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField252(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *ScheduleCoachInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleCoachInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField251(oprot); err != nil {
			fieldId = 251
			goto WriteFieldError
		}
		if err = p.writeField252(oprot); err != nil {
			fieldId = 252
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoachId() {
		if err = oprot.WriteFieldBegin("coachId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CoachId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceId() {
		if err = oprot.WriteFieldBegin("placeId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PlaceId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyId() {
		if err = oprot.WriteFieldBegin("propertyId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleId() {
		if err = oprot.WriteFieldBegin("scheduleId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ScheduleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDate() {
		if err = oprot.WriteFieldBegin("date", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Date); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("startAt", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndAt() {
		if err = oprot.WriteFieldBegin("endAt", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignStartAt() {
		if err = oprot.WriteFieldBegin("signStartAt", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignStartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignEndAt() {
		if err = oprot.WriteFieldBegin("signEndAt", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignEndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleName() {
		if err = oprot.WriteFieldBegin("scheduleName", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ScheduleName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyName() {
		if err = oprot.WriteFieldBegin("propertyName", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.PropertyName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueName() {
		if err = oprot.WriteFieldBegin("venueName", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.VenueName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceName() {
		if err = oprot.WriteFieldBegin("placeName", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.PlaceName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoachName() {
		if err = oprot.WriteFieldBegin("coachName", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CoachName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoachAvatar() {
		if err = oprot.WriteFieldBegin("coachAvatar", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CoachAvatar); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField251(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 251); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField252(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 252); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 end error: ", p), err)
}

func (p *ScheduleCoachInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleCoachInfo(%+v)", *p)

}

type SubscribeByMember struct {
	Avatar                    string `thrift:"avatar,1,optional" form:"avatar" json:"avatar" query:"avatar"`
	Mobile                    string `thrift:"mobile,2,optional" form:"mobile" json:"mobile" query:"mobile"`
	MemberId                  int64  `thrift:"memberId,3,optional" form:"memberId" json:"memberId" query:"memberId"`
	MemberProductID           int64  `thrift:"memberProductID,4,optional" form:"memberProductID" json:"memberProductID" query:"memberProductID"`
	MemberProductPropertyId   int64  `thrift:"memberProductPropertyId,5,optional" form:"memberProductPropertyId" json:"memberProductPropertyId" query:"memberProductPropertyId"`
	MemberName                string `thrift:"memberName,6,optional" form:"memberName" json:"memberName" query:"memberName"`
	MemberProductName         string `thrift:"memberProductName,7,optional" form:"memberProductName" json:"memberProductName" query:"memberProductName"`
	MemberProductPropertyName string `thrift:"memberProductPropertyName,8,optional" form:"memberProductPropertyName" json:"memberProductPropertyName" query:"memberProductPropertyName"`
}

func NewSubscribeByMember() *SubscribeByMember {
	return &SubscribeByMember{

		Avatar:                    "",
		Mobile:                    "",
		MemberId:                  0,
		MemberProductID:           0,
		MemberProductPropertyId:   0,
		MemberName:                "",
		MemberProductName:         "",
		MemberProductPropertyName: "",
	}
}

func (p *SubscribeByMember) InitDefault() {
	p.Avatar = ""
	p.Mobile = ""
	p.MemberId = 0
	p.MemberProductID = 0
	p.MemberProductPropertyId = 0
	p.MemberName = ""
	p.MemberProductName = ""
	p.MemberProductPropertyName = ""
}

var SubscribeByMember_Avatar_DEFAULT string = ""

func (p *SubscribeByMember) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return SubscribeByMember_Avatar_DEFAULT
	}
	return p.Avatar
}

var SubscribeByMember_Mobile_DEFAULT string = ""

func (p *SubscribeByMember) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return SubscribeByMember_Mobile_DEFAULT
	}
	return p.Mobile
}

var SubscribeByMember_MemberId_DEFAULT int64 = 0

func (p *SubscribeByMember) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return SubscribeByMember_MemberId_DEFAULT
	}
	return p.MemberId
}

var SubscribeByMember_MemberProductID_DEFAULT int64 = 0

func (p *SubscribeByMember) GetMemberProductID() (v int64) {
	if !p.IsSetMemberProductID() {
		return SubscribeByMember_MemberProductID_DEFAULT
	}
	return p.MemberProductID
}

var SubscribeByMember_MemberProductPropertyId_DEFAULT int64 = 0

func (p *SubscribeByMember) GetMemberProductPropertyId() (v int64) {
	if !p.IsSetMemberProductPropertyId() {
		return SubscribeByMember_MemberProductPropertyId_DEFAULT
	}
	return p.MemberProductPropertyId
}

var SubscribeByMember_MemberName_DEFAULT string = ""

func (p *SubscribeByMember) GetMemberName() (v string) {
	if !p.IsSetMemberName() {
		return SubscribeByMember_MemberName_DEFAULT
	}
	return p.MemberName
}

var SubscribeByMember_MemberProductName_DEFAULT string = ""

func (p *SubscribeByMember) GetMemberProductName() (v string) {
	if !p.IsSetMemberProductName() {
		return SubscribeByMember_MemberProductName_DEFAULT
	}
	return p.MemberProductName
}

var SubscribeByMember_MemberProductPropertyName_DEFAULT string = ""

func (p *SubscribeByMember) GetMemberProductPropertyName() (v string) {
	if !p.IsSetMemberProductPropertyName() {
		return SubscribeByMember_MemberProductPropertyName_DEFAULT
	}
	return p.MemberProductPropertyName
}

var fieldIDToName_SubscribeByMember = map[int16]string{
	1: "avatar",
	2: "mobile",
	3: "memberId",
	4: "memberProductID",
	5: "memberProductPropertyId",
	6: "memberName",
	7: "memberProductName",
	8: "memberProductPropertyName",
}

func (p *SubscribeByMember) IsSetAvatar() bool {
	return p.Avatar != SubscribeByMember_Avatar_DEFAULT
}

func (p *SubscribeByMember) IsSetMobile() bool {
	return p.Mobile != SubscribeByMember_Mobile_DEFAULT
}

func (p *SubscribeByMember) IsSetMemberId() bool {
	return p.MemberId != SubscribeByMember_MemberId_DEFAULT
}

func (p *SubscribeByMember) IsSetMemberProductID() bool {
	return p.MemberProductID != SubscribeByMember_MemberProductID_DEFAULT
}

func (p *SubscribeByMember) IsSetMemberProductPropertyId() bool {
	return p.MemberProductPropertyId != SubscribeByMember_MemberProductPropertyId_DEFAULT
}

func (p *SubscribeByMember) IsSetMemberName() bool {
	return p.MemberName != SubscribeByMember_MemberName_DEFAULT
}

func (p *SubscribeByMember) IsSetMemberProductName() bool {
	return p.MemberProductName != SubscribeByMember_MemberProductName_DEFAULT
}

func (p *SubscribeByMember) IsSetMemberProductPropertyName() bool {
	return p.MemberProductPropertyName != SubscribeByMember_MemberProductPropertyName_DEFAULT
}

func (p *SubscribeByMember) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubscribeByMember[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubscribeByMember) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *SubscribeByMember) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *SubscribeByMember) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *SubscribeByMember) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductID = _field
	return nil
}
func (p *SubscribeByMember) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyId = _field
	return nil
}
func (p *SubscribeByMember) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberName = _field
	return nil
}
func (p *SubscribeByMember) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductName = _field
	return nil
}
func (p *SubscribeByMember) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyName = _field
	return nil
}

func (p *SubscribeByMember) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubscribeByMember"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubscribeByMember) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Avatar); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubscribeByMember) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubscribeByMember) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SubscribeByMember) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductID() {
		if err = oprot.WriteFieldBegin("memberProductID", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SubscribeByMember) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductPropertyId() {
		if err = oprot.WriteFieldBegin("memberProductPropertyId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductPropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SubscribeByMember) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberName() {
		if err = oprot.WriteFieldBegin("memberName", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemberName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SubscribeByMember) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductName() {
		if err = oprot.WriteFieldBegin("memberProductName", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemberProductName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SubscribeByMember) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductPropertyName() {
		if err = oprot.WriteFieldBegin("memberProductPropertyName", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemberProductPropertyName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *SubscribeByMember) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubscribeByMember(%+v)", *p)

}

type ScheduleService interface {
	CreateSchedule(ctx context.Context, req *CreateOrUpdateScheduleReq) (r *base.NilResponse, err error)

	UpdateSchedule(ctx context.Context, req *CreateOrUpdateScheduleReq) (r *base.NilResponse, err error)

	UpdateStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	ListSchedule(ctx context.Context, req *ScheduleListReq) (r *base.NilResponse, err error)

	DateListSchedule(ctx context.Context, req *ScheduleListReq) (r *base.NilResponse, err error)

	GetScheduleById(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	GetScheduleMemberList(ctx context.Context, req *ScheduleMemberListReq) (r *base.NilResponse, err error)

	SearchSubscribeByMember(ctx context.Context, req *SearchSubscribeByMemberReq) (r *base.NilResponse, err error)

	MemberSubscribe(ctx context.Context, req *MemberSubscribeReq) (r *base.NilResponse, err error)

	UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	GetScheduleCoachList(ctx context.Context, req *ScheduleCoachListReq) (r *base.NilResponse, err error)

	UpdateCoachStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)
}

type ScheduleServiceClient struct {
	c thrift.TClient
}

func NewScheduleServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ScheduleServiceClient {
	return &ScheduleServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewScheduleServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ScheduleServiceClient {
	return &ScheduleServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewScheduleServiceClient(c thrift.TClient) *ScheduleServiceClient {
	return &ScheduleServiceClient{
		c: c,
	}
}

func (p *ScheduleServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ScheduleServiceClient) CreateSchedule(ctx context.Context, req *CreateOrUpdateScheduleReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceCreateScheduleArgs
	_args.Req = req
	var _result ScheduleServiceCreateScheduleResult
	if err = p.Client_().Call(ctx, "CreateSchedule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) UpdateSchedule(ctx context.Context, req *CreateOrUpdateScheduleReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceUpdateScheduleArgs
	_args.Req = req
	var _result ScheduleServiceUpdateScheduleResult
	if err = p.Client_().Call(ctx, "UpdateSchedule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) UpdateStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceUpdateStatusArgs
	_args.Req = req
	var _result ScheduleServiceUpdateStatusResult
	if err = p.Client_().Call(ctx, "UpdateStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) ListSchedule(ctx context.Context, req *ScheduleListReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceListScheduleArgs
	_args.Req = req
	var _result ScheduleServiceListScheduleResult
	if err = p.Client_().Call(ctx, "ListSchedule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) DateListSchedule(ctx context.Context, req *ScheduleListReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceDateListScheduleArgs
	_args.Req = req
	var _result ScheduleServiceDateListScheduleResult
	if err = p.Client_().Call(ctx, "DateListSchedule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) GetScheduleById(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceGetScheduleByIdArgs
	_args.Req = req
	var _result ScheduleServiceGetScheduleByIdResult
	if err = p.Client_().Call(ctx, "GetScheduleById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) GetScheduleMemberList(ctx context.Context, req *ScheduleMemberListReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceGetScheduleMemberListArgs
	_args.Req = req
	var _result ScheduleServiceGetScheduleMemberListResult
	if err = p.Client_().Call(ctx, "GetScheduleMemberList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) SearchSubscribeByMember(ctx context.Context, req *SearchSubscribeByMemberReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceSearchSubscribeByMemberArgs
	_args.Req = req
	var _result ScheduleServiceSearchSubscribeByMemberResult
	if err = p.Client_().Call(ctx, "SearchSubscribeByMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) MemberSubscribe(ctx context.Context, req *MemberSubscribeReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceMemberSubscribeArgs
	_args.Req = req
	var _result ScheduleServiceMemberSubscribeResult
	if err = p.Client_().Call(ctx, "MemberSubscribe", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceUpdateMemberStatusArgs
	_args.Req = req
	var _result ScheduleServiceUpdateMemberStatusResult
	if err = p.Client_().Call(ctx, "UpdateMemberStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) GetScheduleCoachList(ctx context.Context, req *ScheduleCoachListReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceGetScheduleCoachListArgs
	_args.Req = req
	var _result ScheduleServiceGetScheduleCoachListResult
	if err = p.Client_().Call(ctx, "GetScheduleCoachList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) UpdateCoachStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceUpdateCoachStatusArgs
	_args.Req = req
	var _result ScheduleServiceUpdateCoachStatusResult
	if err = p.Client_().Call(ctx, "UpdateCoachStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ScheduleServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ScheduleService
}

func (p *ScheduleServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ScheduleServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ScheduleServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewScheduleServiceProcessor(handler ScheduleService) *ScheduleServiceProcessor {
	self := &ScheduleServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateSchedule", &scheduleServiceProcessorCreateSchedule{handler: handler})
	self.AddToProcessorMap("UpdateSchedule", &scheduleServiceProcessorUpdateSchedule{handler: handler})
	self.AddToProcessorMap("UpdateStatus", &scheduleServiceProcessorUpdateStatus{handler: handler})
	self.AddToProcessorMap("ListSchedule", &scheduleServiceProcessorListSchedule{handler: handler})
	self.AddToProcessorMap("DateListSchedule", &scheduleServiceProcessorDateListSchedule{handler: handler})
	self.AddToProcessorMap("GetScheduleById", &scheduleServiceProcessorGetScheduleById{handler: handler})
	self.AddToProcessorMap("GetScheduleMemberList", &scheduleServiceProcessorGetScheduleMemberList{handler: handler})
	self.AddToProcessorMap("SearchSubscribeByMember", &scheduleServiceProcessorSearchSubscribeByMember{handler: handler})
	self.AddToProcessorMap("MemberSubscribe", &scheduleServiceProcessorMemberSubscribe{handler: handler})
	self.AddToProcessorMap("UpdateMemberStatus", &scheduleServiceProcessorUpdateMemberStatus{handler: handler})
	self.AddToProcessorMap("GetScheduleCoachList", &scheduleServiceProcessorGetScheduleCoachList{handler: handler})
	self.AddToProcessorMap("UpdateCoachStatus", &scheduleServiceProcessorUpdateCoachStatus{handler: handler})
	return self
}
func (p *ScheduleServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type scheduleServiceProcessorCreateSchedule struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorCreateSchedule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceCreateScheduleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceCreateScheduleResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateSchedule(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateSchedule: "+err2.Error())
		oprot.WriteMessageBegin("CreateSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateSchedule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorUpdateSchedule struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorUpdateSchedule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceUpdateScheduleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceUpdateScheduleResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateSchedule(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateSchedule: "+err2.Error())
		oprot.WriteMessageBegin("UpdateSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateSchedule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorUpdateStatus struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorUpdateStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceUpdateStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceUpdateStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorListSchedule struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorListSchedule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceListScheduleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceListScheduleResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ListSchedule(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSchedule: "+err2.Error())
		oprot.WriteMessageBegin("ListSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSchedule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorDateListSchedule struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorDateListSchedule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceDateListScheduleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DateListSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceDateListScheduleResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.DateListSchedule(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DateListSchedule: "+err2.Error())
		oprot.WriteMessageBegin("DateListSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DateListSchedule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorGetScheduleById struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorGetScheduleById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceGetScheduleByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetScheduleById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceGetScheduleByIdResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.GetScheduleById(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetScheduleById: "+err2.Error())
		oprot.WriteMessageBegin("GetScheduleById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetScheduleById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorGetScheduleMemberList struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorGetScheduleMemberList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceGetScheduleMemberListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetScheduleMemberList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceGetScheduleMemberListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.GetScheduleMemberList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetScheduleMemberList: "+err2.Error())
		oprot.WriteMessageBegin("GetScheduleMemberList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetScheduleMemberList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorSearchSubscribeByMember struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorSearchSubscribeByMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceSearchSubscribeByMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SearchSubscribeByMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceSearchSubscribeByMemberResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.SearchSubscribeByMember(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchSubscribeByMember: "+err2.Error())
		oprot.WriteMessageBegin("SearchSubscribeByMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SearchSubscribeByMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorMemberSubscribe struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorMemberSubscribe) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceMemberSubscribeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberSubscribe", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceMemberSubscribeResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberSubscribe(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberSubscribe: "+err2.Error())
		oprot.WriteMessageBegin("MemberSubscribe", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberSubscribe", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorUpdateMemberStatus struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorUpdateMemberStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceUpdateMemberStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateMemberStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceUpdateMemberStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateMemberStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateMemberStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateMemberStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateMemberStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorGetScheduleCoachList struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorGetScheduleCoachList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceGetScheduleCoachListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetScheduleCoachList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceGetScheduleCoachListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.GetScheduleCoachList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetScheduleCoachList: "+err2.Error())
		oprot.WriteMessageBegin("GetScheduleCoachList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetScheduleCoachList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorUpdateCoachStatus struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorUpdateCoachStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceUpdateCoachStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCoachStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceUpdateCoachStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateCoachStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCoachStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCoachStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCoachStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ScheduleServiceCreateScheduleArgs struct {
	Req *CreateOrUpdateScheduleReq `thrift:"req,1"`
}

func NewScheduleServiceCreateScheduleArgs() *ScheduleServiceCreateScheduleArgs {
	return &ScheduleServiceCreateScheduleArgs{}
}

func (p *ScheduleServiceCreateScheduleArgs) InitDefault() {
}

var ScheduleServiceCreateScheduleArgs_Req_DEFAULT *CreateOrUpdateScheduleReq

func (p *ScheduleServiceCreateScheduleArgs) GetReq() (v *CreateOrUpdateScheduleReq) {
	if !p.IsSetReq() {
		return ScheduleServiceCreateScheduleArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceCreateScheduleArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceCreateScheduleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceCreateScheduleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceCreateScheduleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateScheduleReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceCreateScheduleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSchedule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceCreateScheduleArgs(%+v)", *p)

}

type ScheduleServiceCreateScheduleResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceCreateScheduleResult() *ScheduleServiceCreateScheduleResult {
	return &ScheduleServiceCreateScheduleResult{}
}

func (p *ScheduleServiceCreateScheduleResult) InitDefault() {
}

var ScheduleServiceCreateScheduleResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceCreateScheduleResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceCreateScheduleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceCreateScheduleResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceCreateScheduleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceCreateScheduleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceCreateScheduleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceCreateScheduleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSchedule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceCreateScheduleResult(%+v)", *p)

}

type ScheduleServiceUpdateScheduleArgs struct {
	Req *CreateOrUpdateScheduleReq `thrift:"req,1"`
}

func NewScheduleServiceUpdateScheduleArgs() *ScheduleServiceUpdateScheduleArgs {
	return &ScheduleServiceUpdateScheduleArgs{}
}

func (p *ScheduleServiceUpdateScheduleArgs) InitDefault() {
}

var ScheduleServiceUpdateScheduleArgs_Req_DEFAULT *CreateOrUpdateScheduleReq

func (p *ScheduleServiceUpdateScheduleArgs) GetReq() (v *CreateOrUpdateScheduleReq) {
	if !p.IsSetReq() {
		return ScheduleServiceUpdateScheduleArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceUpdateScheduleArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceUpdateScheduleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceUpdateScheduleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateScheduleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateScheduleReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceUpdateScheduleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSchedule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateScheduleArgs(%+v)", *p)

}

type ScheduleServiceUpdateScheduleResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceUpdateScheduleResult() *ScheduleServiceUpdateScheduleResult {
	return &ScheduleServiceUpdateScheduleResult{}
}

func (p *ScheduleServiceUpdateScheduleResult) InitDefault() {
}

var ScheduleServiceUpdateScheduleResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceUpdateScheduleResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceUpdateScheduleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceUpdateScheduleResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceUpdateScheduleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceUpdateScheduleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateScheduleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceUpdateScheduleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSchedule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateScheduleResult(%+v)", *p)

}

type ScheduleServiceUpdateStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewScheduleServiceUpdateStatusArgs() *ScheduleServiceUpdateStatusArgs {
	return &ScheduleServiceUpdateStatusArgs{}
}

func (p *ScheduleServiceUpdateStatusArgs) InitDefault() {
}

var ScheduleServiceUpdateStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *ScheduleServiceUpdateStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return ScheduleServiceUpdateStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceUpdateStatusArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceUpdateStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceUpdateStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceUpdateStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateStatusArgs(%+v)", *p)

}

type ScheduleServiceUpdateStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceUpdateStatusResult() *ScheduleServiceUpdateStatusResult {
	return &ScheduleServiceUpdateStatusResult{}
}

func (p *ScheduleServiceUpdateStatusResult) InitDefault() {
}

var ScheduleServiceUpdateStatusResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceUpdateStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceUpdateStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceUpdateStatusResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceUpdateStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceUpdateStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceUpdateStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateStatusResult(%+v)", *p)

}

type ScheduleServiceListScheduleArgs struct {
	Req *ScheduleListReq `thrift:"req,1"`
}

func NewScheduleServiceListScheduleArgs() *ScheduleServiceListScheduleArgs {
	return &ScheduleServiceListScheduleArgs{}
}

func (p *ScheduleServiceListScheduleArgs) InitDefault() {
}

var ScheduleServiceListScheduleArgs_Req_DEFAULT *ScheduleListReq

func (p *ScheduleServiceListScheduleArgs) GetReq() (v *ScheduleListReq) {
	if !p.IsSetReq() {
		return ScheduleServiceListScheduleArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceListScheduleArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceListScheduleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceListScheduleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceListScheduleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceListScheduleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewScheduleListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceListScheduleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSchedule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceListScheduleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceListScheduleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceListScheduleArgs(%+v)", *p)

}

type ScheduleServiceListScheduleResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceListScheduleResult() *ScheduleServiceListScheduleResult {
	return &ScheduleServiceListScheduleResult{}
}

func (p *ScheduleServiceListScheduleResult) InitDefault() {
}

var ScheduleServiceListScheduleResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceListScheduleResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceListScheduleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceListScheduleResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceListScheduleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceListScheduleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceListScheduleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceListScheduleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceListScheduleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSchedule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceListScheduleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceListScheduleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceListScheduleResult(%+v)", *p)

}

type ScheduleServiceDateListScheduleArgs struct {
	Req *ScheduleListReq `thrift:"req,1"`
}

func NewScheduleServiceDateListScheduleArgs() *ScheduleServiceDateListScheduleArgs {
	return &ScheduleServiceDateListScheduleArgs{}
}

func (p *ScheduleServiceDateListScheduleArgs) InitDefault() {
}

var ScheduleServiceDateListScheduleArgs_Req_DEFAULT *ScheduleListReq

func (p *ScheduleServiceDateListScheduleArgs) GetReq() (v *ScheduleListReq) {
	if !p.IsSetReq() {
		return ScheduleServiceDateListScheduleArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceDateListScheduleArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceDateListScheduleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceDateListScheduleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceDateListScheduleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceDateListScheduleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewScheduleListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceDateListScheduleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DateListSchedule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceDateListScheduleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceDateListScheduleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceDateListScheduleArgs(%+v)", *p)

}

type ScheduleServiceDateListScheduleResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceDateListScheduleResult() *ScheduleServiceDateListScheduleResult {
	return &ScheduleServiceDateListScheduleResult{}
}

func (p *ScheduleServiceDateListScheduleResult) InitDefault() {
}

var ScheduleServiceDateListScheduleResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceDateListScheduleResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceDateListScheduleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceDateListScheduleResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceDateListScheduleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceDateListScheduleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceDateListScheduleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceDateListScheduleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceDateListScheduleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DateListSchedule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceDateListScheduleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceDateListScheduleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceDateListScheduleResult(%+v)", *p)

}

type ScheduleServiceGetScheduleByIdArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewScheduleServiceGetScheduleByIdArgs() *ScheduleServiceGetScheduleByIdArgs {
	return &ScheduleServiceGetScheduleByIdArgs{}
}

func (p *ScheduleServiceGetScheduleByIdArgs) InitDefault() {
}

var ScheduleServiceGetScheduleByIdArgs_Req_DEFAULT *base.IDReq

func (p *ScheduleServiceGetScheduleByIdArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return ScheduleServiceGetScheduleByIdArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceGetScheduleByIdArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceGetScheduleByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceGetScheduleByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceGetScheduleByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceGetScheduleByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetScheduleById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceGetScheduleByIdArgs(%+v)", *p)

}

type ScheduleServiceGetScheduleByIdResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceGetScheduleByIdResult() *ScheduleServiceGetScheduleByIdResult {
	return &ScheduleServiceGetScheduleByIdResult{}
}

func (p *ScheduleServiceGetScheduleByIdResult) InitDefault() {
}

var ScheduleServiceGetScheduleByIdResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceGetScheduleByIdResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceGetScheduleByIdResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceGetScheduleByIdResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceGetScheduleByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceGetScheduleByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceGetScheduleByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleByIdResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceGetScheduleByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetScheduleById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceGetScheduleByIdResult(%+v)", *p)

}

type ScheduleServiceGetScheduleMemberListArgs struct {
	Req *ScheduleMemberListReq `thrift:"req,1"`
}

func NewScheduleServiceGetScheduleMemberListArgs() *ScheduleServiceGetScheduleMemberListArgs {
	return &ScheduleServiceGetScheduleMemberListArgs{}
}

func (p *ScheduleServiceGetScheduleMemberListArgs) InitDefault() {
}

var ScheduleServiceGetScheduleMemberListArgs_Req_DEFAULT *ScheduleMemberListReq

func (p *ScheduleServiceGetScheduleMemberListArgs) GetReq() (v *ScheduleMemberListReq) {
	if !p.IsSetReq() {
		return ScheduleServiceGetScheduleMemberListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceGetScheduleMemberListArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceGetScheduleMemberListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceGetScheduleMemberListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceGetScheduleMemberListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleMemberListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewScheduleMemberListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceGetScheduleMemberListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetScheduleMemberList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleMemberListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleMemberListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceGetScheduleMemberListArgs(%+v)", *p)

}

type ScheduleServiceGetScheduleMemberListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceGetScheduleMemberListResult() *ScheduleServiceGetScheduleMemberListResult {
	return &ScheduleServiceGetScheduleMemberListResult{}
}

func (p *ScheduleServiceGetScheduleMemberListResult) InitDefault() {
}

var ScheduleServiceGetScheduleMemberListResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceGetScheduleMemberListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceGetScheduleMemberListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceGetScheduleMemberListResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceGetScheduleMemberListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceGetScheduleMemberListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceGetScheduleMemberListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleMemberListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceGetScheduleMemberListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetScheduleMemberList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleMemberListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleMemberListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceGetScheduleMemberListResult(%+v)", *p)

}

type ScheduleServiceSearchSubscribeByMemberArgs struct {
	Req *SearchSubscribeByMemberReq `thrift:"req,1"`
}

func NewScheduleServiceSearchSubscribeByMemberArgs() *ScheduleServiceSearchSubscribeByMemberArgs {
	return &ScheduleServiceSearchSubscribeByMemberArgs{}
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) InitDefault() {
}

var ScheduleServiceSearchSubscribeByMemberArgs_Req_DEFAULT *SearchSubscribeByMemberReq

func (p *ScheduleServiceSearchSubscribeByMemberArgs) GetReq() (v *SearchSubscribeByMemberReq) {
	if !p.IsSetReq() {
		return ScheduleServiceSearchSubscribeByMemberArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceSearchSubscribeByMemberArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceSearchSubscribeByMemberArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSearchSubscribeByMemberReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchSubscribeByMember_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceSearchSubscribeByMemberArgs(%+v)", *p)

}

type ScheduleServiceSearchSubscribeByMemberResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceSearchSubscribeByMemberResult() *ScheduleServiceSearchSubscribeByMemberResult {
	return &ScheduleServiceSearchSubscribeByMemberResult{}
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) InitDefault() {
}

var ScheduleServiceSearchSubscribeByMemberResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceSearchSubscribeByMemberResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceSearchSubscribeByMemberResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceSearchSubscribeByMemberResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceSearchSubscribeByMemberResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchSubscribeByMember_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceSearchSubscribeByMemberResult(%+v)", *p)

}

type ScheduleServiceMemberSubscribeArgs struct {
	Req *MemberSubscribeReq `thrift:"req,1"`
}

func NewScheduleServiceMemberSubscribeArgs() *ScheduleServiceMemberSubscribeArgs {
	return &ScheduleServiceMemberSubscribeArgs{}
}

func (p *ScheduleServiceMemberSubscribeArgs) InitDefault() {
}

var ScheduleServiceMemberSubscribeArgs_Req_DEFAULT *MemberSubscribeReq

func (p *ScheduleServiceMemberSubscribeArgs) GetReq() (v *MemberSubscribeReq) {
	if !p.IsSetReq() {
		return ScheduleServiceMemberSubscribeArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceMemberSubscribeArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceMemberSubscribeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceMemberSubscribeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceMemberSubscribeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceMemberSubscribeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberSubscribeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceMemberSubscribeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberSubscribe_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceMemberSubscribeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceMemberSubscribeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceMemberSubscribeArgs(%+v)", *p)

}

type ScheduleServiceMemberSubscribeResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceMemberSubscribeResult() *ScheduleServiceMemberSubscribeResult {
	return &ScheduleServiceMemberSubscribeResult{}
}

func (p *ScheduleServiceMemberSubscribeResult) InitDefault() {
}

var ScheduleServiceMemberSubscribeResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceMemberSubscribeResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceMemberSubscribeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceMemberSubscribeResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceMemberSubscribeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceMemberSubscribeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceMemberSubscribeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceMemberSubscribeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceMemberSubscribeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberSubscribe_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceMemberSubscribeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceMemberSubscribeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceMemberSubscribeResult(%+v)", *p)

}

type ScheduleServiceUpdateMemberStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewScheduleServiceUpdateMemberStatusArgs() *ScheduleServiceUpdateMemberStatusArgs {
	return &ScheduleServiceUpdateMemberStatusArgs{}
}

func (p *ScheduleServiceUpdateMemberStatusArgs) InitDefault() {
}

var ScheduleServiceUpdateMemberStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *ScheduleServiceUpdateMemberStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return ScheduleServiceUpdateMemberStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceUpdateMemberStatusArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceUpdateMemberStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceUpdateMemberStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateMemberStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceUpdateMemberStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateMemberStatusArgs(%+v)", *p)

}

type ScheduleServiceUpdateMemberStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceUpdateMemberStatusResult() *ScheduleServiceUpdateMemberStatusResult {
	return &ScheduleServiceUpdateMemberStatusResult{}
}

func (p *ScheduleServiceUpdateMemberStatusResult) InitDefault() {
}

var ScheduleServiceUpdateMemberStatusResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceUpdateMemberStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceUpdateMemberStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceUpdateMemberStatusResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceUpdateMemberStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceUpdateMemberStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateMemberStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceUpdateMemberStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateMemberStatusResult(%+v)", *p)

}

type ScheduleServiceGetScheduleCoachListArgs struct {
	Req *ScheduleCoachListReq `thrift:"req,1"`
}

func NewScheduleServiceGetScheduleCoachListArgs() *ScheduleServiceGetScheduleCoachListArgs {
	return &ScheduleServiceGetScheduleCoachListArgs{}
}

func (p *ScheduleServiceGetScheduleCoachListArgs) InitDefault() {
}

var ScheduleServiceGetScheduleCoachListArgs_Req_DEFAULT *ScheduleCoachListReq

func (p *ScheduleServiceGetScheduleCoachListArgs) GetReq() (v *ScheduleCoachListReq) {
	if !p.IsSetReq() {
		return ScheduleServiceGetScheduleCoachListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceGetScheduleCoachListArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceGetScheduleCoachListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceGetScheduleCoachListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceGetScheduleCoachListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleCoachListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewScheduleCoachListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceGetScheduleCoachListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetScheduleCoachList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleCoachListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleCoachListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceGetScheduleCoachListArgs(%+v)", *p)

}

type ScheduleServiceGetScheduleCoachListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceGetScheduleCoachListResult() *ScheduleServiceGetScheduleCoachListResult {
	return &ScheduleServiceGetScheduleCoachListResult{}
}

func (p *ScheduleServiceGetScheduleCoachListResult) InitDefault() {
}

var ScheduleServiceGetScheduleCoachListResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceGetScheduleCoachListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceGetScheduleCoachListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceGetScheduleCoachListResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceGetScheduleCoachListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceGetScheduleCoachListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceGetScheduleCoachListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleCoachListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceGetScheduleCoachListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetScheduleCoachList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleCoachListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceGetScheduleCoachListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceGetScheduleCoachListResult(%+v)", *p)

}

type ScheduleServiceUpdateCoachStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewScheduleServiceUpdateCoachStatusArgs() *ScheduleServiceUpdateCoachStatusArgs {
	return &ScheduleServiceUpdateCoachStatusArgs{}
}

func (p *ScheduleServiceUpdateCoachStatusArgs) InitDefault() {
}

var ScheduleServiceUpdateCoachStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *ScheduleServiceUpdateCoachStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return ScheduleServiceUpdateCoachStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ScheduleServiceUpdateCoachStatusArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceUpdateCoachStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceUpdateCoachStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateCoachStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceUpdateCoachStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCoachStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateCoachStatusArgs(%+v)", *p)

}

type ScheduleServiceUpdateCoachStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewScheduleServiceUpdateCoachStatusResult() *ScheduleServiceUpdateCoachStatusResult {
	return &ScheduleServiceUpdateCoachStatusResult{}
}

func (p *ScheduleServiceUpdateCoachStatusResult) InitDefault() {
}

var ScheduleServiceUpdateCoachStatusResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceUpdateCoachStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceUpdateCoachStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ScheduleServiceUpdateCoachStatusResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceUpdateCoachStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceUpdateCoachStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateCoachStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceUpdateCoachStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCoachStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateCoachStatusResult(%+v)", *p)

}
