// Code generated by hertz generator.

package service

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "kcers-survey/idl_gen/model/base"
	service "kcers-survey/idl_gen/model/service"
)

// CreateSurvey .
// @router /service/survey/create [GET]
func CreateSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateSurveyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateSurvey .
// @router /service/survey/update [GET]
func UpdateSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateSurveyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetSurvey .
// @router /service/survey/info [GET]
func GetSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListSurvey .
// @router /service/survey/list [GET]
func ListSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.SurveyListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteSurvey .
// @router /service/survey/delete [GET]
func DeleteSurvey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateQuestion .
// @router /service/survey/question-create [GET]
func CreateQuestion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateQuestionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateQuestion .
// @router /service/survey/question-update [GET]
func UpdateQuestion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateQuestionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteQuestion .
// @router /service/survey/question-delete [GET]
func DeleteQuestion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateResponse .
// @router /service/survey/response-create [GET]
func CreateResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateResponseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateResponse .
// @router /service/survey/response-update [GET]
func UpdateResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.CreateOrUpdateResponseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetResponse .
// @router /service/survey/response-info [GET]
func GetResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListResponse .
// @router /service/survey/response-list [GET]
func ListResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.ResponseListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteResponse .
// @router /service/survey/response-delete [GET]
func DeleteResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}
