// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/surveyresponse"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyResponseCreate is the builder for creating a SurveyResponse entity.
type SurveyResponseCreate struct {
	config
	mutation *SurveyResponseMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (src *SurveyResponseCreate) SetCreatedAt(t time.Time) *SurveyResponseCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableCreatedAt(t *time.Time) *SurveyResponseCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *SurveyResponseCreate) SetUpdatedAt(t time.Time) *SurveyResponseCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableUpdatedAt(t *time.Time) *SurveyResponseCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetDelete sets the "delete" field.
func (src *SurveyResponseCreate) SetDelete(i int64) *SurveyResponseCreate {
	src.mutation.SetDelete(i)
	return src
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableDelete(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetDelete(*i)
	}
	return src
}

// SetCreatedID sets the "created_id" field.
func (src *SurveyResponseCreate) SetCreatedID(i int64) *SurveyResponseCreate {
	src.mutation.SetCreatedID(i)
	return src
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableCreatedID(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetCreatedID(*i)
	}
	return src
}

// SetStatus sets the "status" field.
func (src *SurveyResponseCreate) SetStatus(i int64) *SurveyResponseCreate {
	src.mutation.SetStatus(i)
	return src
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableStatus(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetStatus(*i)
	}
	return src
}

// SetSurveyID sets the "survey_id" field.
func (src *SurveyResponseCreate) SetSurveyID(i int64) *SurveyResponseCreate {
	src.mutation.SetSurveyID(i)
	return src
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableSurveyID(i *int64) *SurveyResponseCreate {
	if i != nil {
		src.SetSurveyID(*i)
	}
	return src
}

// SetIP sets the "ip" field.
func (src *SurveyResponseCreate) SetIP(s string) *SurveyResponseCreate {
	src.mutation.SetIP(s)
	return src
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableIP(s *string) *SurveyResponseCreate {
	if s != nil {
		src.SetIP(*s)
	}
	return src
}

// SetMap sets the "map" field.
func (src *SurveyResponseCreate) SetMap(s string) *SurveyResponseCreate {
	src.mutation.SetMap(s)
	return src
}

// SetNillableMap sets the "map" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableMap(s *string) *SurveyResponseCreate {
	if s != nil {
		src.SetMap(*s)
	}
	return src
}

// SetDevice sets the "device" field.
func (src *SurveyResponseCreate) SetDevice(s string) *SurveyResponseCreate {
	src.mutation.SetDevice(s)
	return src
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableDevice(s *string) *SurveyResponseCreate {
	if s != nil {
		src.SetDevice(*s)
	}
	return src
}

// SetAudio sets the "audio" field.
func (src *SurveyResponseCreate) SetAudio(s string) *SurveyResponseCreate {
	src.mutation.SetAudio(s)
	return src
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (src *SurveyResponseCreate) SetNillableAudio(s *string) *SurveyResponseCreate {
	if s != nil {
		src.SetAudio(*s)
	}
	return src
}

// SetStartedAt sets the "started_at" field.
func (src *SurveyResponseCreate) SetStartedAt(t time.Time) *SurveyResponseCreate {
	src.mutation.SetStartedAt(t)
	return src
}

// SetCompletedAt sets the "completed_at" field.
func (src *SurveyResponseCreate) SetCompletedAt(t time.Time) *SurveyResponseCreate {
	src.mutation.SetCompletedAt(t)
	return src
}

// SetID sets the "id" field.
func (src *SurveyResponseCreate) SetID(i int64) *SurveyResponseCreate {
	src.mutation.SetID(i)
	return src
}

// Mutation returns the SurveyResponseMutation object of the builder.
func (src *SurveyResponseCreate) Mutation() *SurveyResponseMutation {
	return src.mutation
}

// Save creates the SurveyResponse in the database.
func (src *SurveyResponseCreate) Save(ctx context.Context) (*SurveyResponse, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SurveyResponseCreate) SaveX(ctx context.Context) *SurveyResponse {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SurveyResponseCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SurveyResponseCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SurveyResponseCreate) defaults() {
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := surveyresponse.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := surveyresponse.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	if _, ok := src.mutation.Delete(); !ok {
		v := surveyresponse.DefaultDelete
		src.mutation.SetDelete(v)
	}
	if _, ok := src.mutation.CreatedID(); !ok {
		v := surveyresponse.DefaultCreatedID
		src.mutation.SetCreatedID(v)
	}
	if _, ok := src.mutation.Status(); !ok {
		v := surveyresponse.DefaultStatus
		src.mutation.SetStatus(v)
	}
	if _, ok := src.mutation.SurveyID(); !ok {
		v := surveyresponse.DefaultSurveyID
		src.mutation.SetSurveyID(v)
	}
	if _, ok := src.mutation.IP(); !ok {
		v := surveyresponse.DefaultIP
		src.mutation.SetIP(v)
	}
	if _, ok := src.mutation.Map(); !ok {
		v := surveyresponse.DefaultMap
		src.mutation.SetMap(v)
	}
	if _, ok := src.mutation.Device(); !ok {
		v := surveyresponse.DefaultDevice
		src.mutation.SetDevice(v)
	}
	if _, ok := src.mutation.Audio(); !ok {
		v := surveyresponse.DefaultAudio
		src.mutation.SetAudio(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SurveyResponseCreate) check() error {
	if _, ok := src.mutation.SurveyID(); !ok {
		return &ValidationError{Name: "survey_id", err: errors.New(`ent: missing required field "SurveyResponse.survey_id"`)}
	}
	if _, ok := src.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "SurveyResponse.ip"`)}
	}
	if _, ok := src.mutation.Map(); !ok {
		return &ValidationError{Name: "map", err: errors.New(`ent: missing required field "SurveyResponse.map"`)}
	}
	if _, ok := src.mutation.Device(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`ent: missing required field "SurveyResponse.device"`)}
	}
	if _, ok := src.mutation.Audio(); !ok {
		return &ValidationError{Name: "audio", err: errors.New(`ent: missing required field "SurveyResponse.audio"`)}
	}
	if _, ok := src.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "SurveyResponse.started_at"`)}
	}
	if _, ok := src.mutation.CompletedAt(); !ok {
		return &ValidationError{Name: "completed_at", err: errors.New(`ent: missing required field "SurveyResponse.completed_at"`)}
	}
	return nil
}

func (src *SurveyResponseCreate) sqlSave(ctx context.Context) (*SurveyResponse, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SurveyResponseCreate) createSpec() (*SurveyResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &SurveyResponse{config: src.config}
		_spec = sqlgraph.NewCreateSpec(surveyresponse.Table, sqlgraph.NewFieldSpec(surveyresponse.FieldID, field.TypeInt64))
	)
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(surveyresponse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyresponse.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := src.mutation.Delete(); ok {
		_spec.SetField(surveyresponse.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := src.mutation.CreatedID(); ok {
		_spec.SetField(surveyresponse.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(surveyresponse.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := src.mutation.SurveyID(); ok {
		_spec.SetField(surveyresponse.FieldSurveyID, field.TypeInt64, value)
		_node.SurveyID = value
	}
	if value, ok := src.mutation.IP(); ok {
		_spec.SetField(surveyresponse.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := src.mutation.Map(); ok {
		_spec.SetField(surveyresponse.FieldMap, field.TypeString, value)
		_node.Map = value
	}
	if value, ok := src.mutation.Device(); ok {
		_spec.SetField(surveyresponse.FieldDevice, field.TypeString, value)
		_node.Device = value
	}
	if value, ok := src.mutation.Audio(); ok {
		_spec.SetField(surveyresponse.FieldAudio, field.TypeString, value)
		_node.Audio = value
	}
	if value, ok := src.mutation.StartedAt(); ok {
		_spec.SetField(surveyresponse.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := src.mutation.CompletedAt(); ok {
		_spec.SetField(surveyresponse.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	return _node, _spec
}

// SurveyResponseCreateBulk is the builder for creating many SurveyResponse entities in bulk.
type SurveyResponseCreateBulk struct {
	config
	err      error
	builders []*SurveyResponseCreate
}

// Save creates the SurveyResponse entities in the database.
func (srcb *SurveyResponseCreateBulk) Save(ctx context.Context) ([]*SurveyResponse, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SurveyResponse, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SurveyResponseCreateBulk) SaveX(ctx context.Context) []*SurveyResponse {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SurveyResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SurveyResponseCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
