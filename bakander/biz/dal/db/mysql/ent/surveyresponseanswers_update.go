// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-survey/biz/dal/db/mysql/ent/predicate"
	"kcers-survey/biz/dal/db/mysql/ent/surveyresponseanswers"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyResponseAnswersUpdate is the builder for updating SurveyResponseAnswers entities.
type SurveyResponseAnswersUpdate struct {
	config
	hooks     []Hook
	mutation  *SurveyResponseAnswersMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SurveyResponseAnswersUpdate builder.
func (srau *SurveyResponseAnswersUpdate) Where(ps ...predicate.SurveyResponseAnswers) *SurveyResponseAnswersUpdate {
	srau.mutation.Where(ps...)
	return srau
}

// SetUpdatedAt sets the "updated_at" field.
func (srau *SurveyResponseAnswersUpdate) SetUpdatedAt(t time.Time) *SurveyResponseAnswersUpdate {
	srau.mutation.SetUpdatedAt(t)
	return srau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (srau *SurveyResponseAnswersUpdate) ClearUpdatedAt() *SurveyResponseAnswersUpdate {
	srau.mutation.ClearUpdatedAt()
	return srau
}

// SetDelete sets the "delete" field.
func (srau *SurveyResponseAnswersUpdate) SetDelete(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.ResetDelete()
	srau.mutation.SetDelete(i)
	return srau
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (srau *SurveyResponseAnswersUpdate) SetNillableDelete(i *int64) *SurveyResponseAnswersUpdate {
	if i != nil {
		srau.SetDelete(*i)
	}
	return srau
}

// AddDelete adds i to the "delete" field.
func (srau *SurveyResponseAnswersUpdate) AddDelete(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.AddDelete(i)
	return srau
}

// ClearDelete clears the value of the "delete" field.
func (srau *SurveyResponseAnswersUpdate) ClearDelete() *SurveyResponseAnswersUpdate {
	srau.mutation.ClearDelete()
	return srau
}

// SetCreatedID sets the "created_id" field.
func (srau *SurveyResponseAnswersUpdate) SetCreatedID(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.ResetCreatedID()
	srau.mutation.SetCreatedID(i)
	return srau
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (srau *SurveyResponseAnswersUpdate) SetNillableCreatedID(i *int64) *SurveyResponseAnswersUpdate {
	if i != nil {
		srau.SetCreatedID(*i)
	}
	return srau
}

// AddCreatedID adds i to the "created_id" field.
func (srau *SurveyResponseAnswersUpdate) AddCreatedID(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.AddCreatedID(i)
	return srau
}

// ClearCreatedID clears the value of the "created_id" field.
func (srau *SurveyResponseAnswersUpdate) ClearCreatedID() *SurveyResponseAnswersUpdate {
	srau.mutation.ClearCreatedID()
	return srau
}

// SetStatus sets the "status" field.
func (srau *SurveyResponseAnswersUpdate) SetStatus(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.ResetStatus()
	srau.mutation.SetStatus(i)
	return srau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (srau *SurveyResponseAnswersUpdate) SetNillableStatus(i *int64) *SurveyResponseAnswersUpdate {
	if i != nil {
		srau.SetStatus(*i)
	}
	return srau
}

// AddStatus adds i to the "status" field.
func (srau *SurveyResponseAnswersUpdate) AddStatus(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.AddStatus(i)
	return srau
}

// ClearStatus clears the value of the "status" field.
func (srau *SurveyResponseAnswersUpdate) ClearStatus() *SurveyResponseAnswersUpdate {
	srau.mutation.ClearStatus()
	return srau
}

// SetSurveyID sets the "survey_id" field.
func (srau *SurveyResponseAnswersUpdate) SetSurveyID(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.ResetSurveyID()
	srau.mutation.SetSurveyID(i)
	return srau
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (srau *SurveyResponseAnswersUpdate) SetNillableSurveyID(i *int64) *SurveyResponseAnswersUpdate {
	if i != nil {
		srau.SetSurveyID(*i)
	}
	return srau
}

// AddSurveyID adds i to the "survey_id" field.
func (srau *SurveyResponseAnswersUpdate) AddSurveyID(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.AddSurveyID(i)
	return srau
}

// SetSurveyResponseID sets the "survey_response_id" field.
func (srau *SurveyResponseAnswersUpdate) SetSurveyResponseID(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.ResetSurveyResponseID()
	srau.mutation.SetSurveyResponseID(i)
	return srau
}

// SetNillableSurveyResponseID sets the "survey_response_id" field if the given value is not nil.
func (srau *SurveyResponseAnswersUpdate) SetNillableSurveyResponseID(i *int64) *SurveyResponseAnswersUpdate {
	if i != nil {
		srau.SetSurveyResponseID(*i)
	}
	return srau
}

// AddSurveyResponseID adds i to the "survey_response_id" field.
func (srau *SurveyResponseAnswersUpdate) AddSurveyResponseID(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.AddSurveyResponseID(i)
	return srau
}

// SetSurveyQuestionID sets the "survey_question_id" field.
func (srau *SurveyResponseAnswersUpdate) SetSurveyQuestionID(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.ResetSurveyQuestionID()
	srau.mutation.SetSurveyQuestionID(i)
	return srau
}

// SetNillableSurveyQuestionID sets the "survey_question_id" field if the given value is not nil.
func (srau *SurveyResponseAnswersUpdate) SetNillableSurveyQuestionID(i *int64) *SurveyResponseAnswersUpdate {
	if i != nil {
		srau.SetSurveyQuestionID(*i)
	}
	return srau
}

// AddSurveyQuestionID adds i to the "survey_question_id" field.
func (srau *SurveyResponseAnswersUpdate) AddSurveyQuestionID(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.AddSurveyQuestionID(i)
	return srau
}

// SetAnswerText sets the "answer_text" field.
func (srau *SurveyResponseAnswersUpdate) SetAnswerText(s string) *SurveyResponseAnswersUpdate {
	srau.mutation.SetAnswerText(s)
	return srau
}

// SetNillableAnswerText sets the "answer_text" field if the given value is not nil.
func (srau *SurveyResponseAnswersUpdate) SetNillableAnswerText(s *string) *SurveyResponseAnswersUpdate {
	if s != nil {
		srau.SetAnswerText(*s)
	}
	return srau
}

// SetAnswerValue sets the "answer_value" field.
func (srau *SurveyResponseAnswersUpdate) SetAnswerValue(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.ResetAnswerValue()
	srau.mutation.SetAnswerValue(i)
	return srau
}

// SetNillableAnswerValue sets the "answer_value" field if the given value is not nil.
func (srau *SurveyResponseAnswersUpdate) SetNillableAnswerValue(i *int64) *SurveyResponseAnswersUpdate {
	if i != nil {
		srau.SetAnswerValue(*i)
	}
	return srau
}

// AddAnswerValue adds i to the "answer_value" field.
func (srau *SurveyResponseAnswersUpdate) AddAnswerValue(i int64) *SurveyResponseAnswersUpdate {
	srau.mutation.AddAnswerValue(i)
	return srau
}

// Mutation returns the SurveyResponseAnswersMutation object of the builder.
func (srau *SurveyResponseAnswersUpdate) Mutation() *SurveyResponseAnswersMutation {
	return srau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (srau *SurveyResponseAnswersUpdate) Save(ctx context.Context) (int, error) {
	srau.defaults()
	return withHooks(ctx, srau.sqlSave, srau.mutation, srau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (srau *SurveyResponseAnswersUpdate) SaveX(ctx context.Context) int {
	affected, err := srau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (srau *SurveyResponseAnswersUpdate) Exec(ctx context.Context) error {
	_, err := srau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srau *SurveyResponseAnswersUpdate) ExecX(ctx context.Context) {
	if err := srau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srau *SurveyResponseAnswersUpdate) defaults() {
	if _, ok := srau.mutation.UpdatedAt(); !ok && !srau.mutation.UpdatedAtCleared() {
		v := surveyresponseanswers.UpdateDefaultUpdatedAt()
		srau.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (srau *SurveyResponseAnswersUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyResponseAnswersUpdate {
	srau.modifiers = append(srau.modifiers, modifiers...)
	return srau
}

func (srau *SurveyResponseAnswersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyresponseanswers.Table, surveyresponseanswers.Columns, sqlgraph.NewFieldSpec(surveyresponseanswers.FieldID, field.TypeInt64))
	if ps := srau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if srau.mutation.CreatedAtCleared() {
		_spec.ClearField(surveyresponseanswers.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := srau.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyresponseanswers.FieldUpdatedAt, field.TypeTime, value)
	}
	if srau.mutation.UpdatedAtCleared() {
		_spec.ClearField(surveyresponseanswers.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := srau.mutation.Delete(); ok {
		_spec.SetField(surveyresponseanswers.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.AddedDelete(); ok {
		_spec.AddField(surveyresponseanswers.FieldDelete, field.TypeInt64, value)
	}
	if srau.mutation.DeleteCleared() {
		_spec.ClearField(surveyresponseanswers.FieldDelete, field.TypeInt64)
	}
	if value, ok := srau.mutation.CreatedID(); ok {
		_spec.SetField(surveyresponseanswers.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.AddedCreatedID(); ok {
		_spec.AddField(surveyresponseanswers.FieldCreatedID, field.TypeInt64, value)
	}
	if srau.mutation.CreatedIDCleared() {
		_spec.ClearField(surveyresponseanswers.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := srau.mutation.Status(); ok {
		_spec.SetField(surveyresponseanswers.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.AddedStatus(); ok {
		_spec.AddField(surveyresponseanswers.FieldStatus, field.TypeInt64, value)
	}
	if srau.mutation.StatusCleared() {
		_spec.ClearField(surveyresponseanswers.FieldStatus, field.TypeInt64)
	}
	if value, ok := srau.mutation.SurveyID(); ok {
		_spec.SetField(surveyresponseanswers.FieldSurveyID, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.AddedSurveyID(); ok {
		_spec.AddField(surveyresponseanswers.FieldSurveyID, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.SurveyResponseID(); ok {
		_spec.SetField(surveyresponseanswers.FieldSurveyResponseID, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.AddedSurveyResponseID(); ok {
		_spec.AddField(surveyresponseanswers.FieldSurveyResponseID, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.SurveyQuestionID(); ok {
		_spec.SetField(surveyresponseanswers.FieldSurveyQuestionID, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.AddedSurveyQuestionID(); ok {
		_spec.AddField(surveyresponseanswers.FieldSurveyQuestionID, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.AnswerText(); ok {
		_spec.SetField(surveyresponseanswers.FieldAnswerText, field.TypeString, value)
	}
	if value, ok := srau.mutation.AnswerValue(); ok {
		_spec.SetField(surveyresponseanswers.FieldAnswerValue, field.TypeInt64, value)
	}
	if value, ok := srau.mutation.AddedAnswerValue(); ok {
		_spec.AddField(surveyresponseanswers.FieldAnswerValue, field.TypeInt64, value)
	}
	_spec.AddModifiers(srau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, srau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyresponseanswers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	srau.mutation.done = true
	return n, nil
}

// SurveyResponseAnswersUpdateOne is the builder for updating a single SurveyResponseAnswers entity.
type SurveyResponseAnswersUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SurveyResponseAnswersMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (srauo *SurveyResponseAnswersUpdateOne) SetUpdatedAt(t time.Time) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.SetUpdatedAt(t)
	return srauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (srauo *SurveyResponseAnswersUpdateOne) ClearUpdatedAt() *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ClearUpdatedAt()
	return srauo
}

// SetDelete sets the "delete" field.
func (srauo *SurveyResponseAnswersUpdateOne) SetDelete(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ResetDelete()
	srauo.mutation.SetDelete(i)
	return srauo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (srauo *SurveyResponseAnswersUpdateOne) SetNillableDelete(i *int64) *SurveyResponseAnswersUpdateOne {
	if i != nil {
		srauo.SetDelete(*i)
	}
	return srauo
}

// AddDelete adds i to the "delete" field.
func (srauo *SurveyResponseAnswersUpdateOne) AddDelete(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.AddDelete(i)
	return srauo
}

// ClearDelete clears the value of the "delete" field.
func (srauo *SurveyResponseAnswersUpdateOne) ClearDelete() *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ClearDelete()
	return srauo
}

// SetCreatedID sets the "created_id" field.
func (srauo *SurveyResponseAnswersUpdateOne) SetCreatedID(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ResetCreatedID()
	srauo.mutation.SetCreatedID(i)
	return srauo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (srauo *SurveyResponseAnswersUpdateOne) SetNillableCreatedID(i *int64) *SurveyResponseAnswersUpdateOne {
	if i != nil {
		srauo.SetCreatedID(*i)
	}
	return srauo
}

// AddCreatedID adds i to the "created_id" field.
func (srauo *SurveyResponseAnswersUpdateOne) AddCreatedID(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.AddCreatedID(i)
	return srauo
}

// ClearCreatedID clears the value of the "created_id" field.
func (srauo *SurveyResponseAnswersUpdateOne) ClearCreatedID() *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ClearCreatedID()
	return srauo
}

// SetStatus sets the "status" field.
func (srauo *SurveyResponseAnswersUpdateOne) SetStatus(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ResetStatus()
	srauo.mutation.SetStatus(i)
	return srauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (srauo *SurveyResponseAnswersUpdateOne) SetNillableStatus(i *int64) *SurveyResponseAnswersUpdateOne {
	if i != nil {
		srauo.SetStatus(*i)
	}
	return srauo
}

// AddStatus adds i to the "status" field.
func (srauo *SurveyResponseAnswersUpdateOne) AddStatus(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.AddStatus(i)
	return srauo
}

// ClearStatus clears the value of the "status" field.
func (srauo *SurveyResponseAnswersUpdateOne) ClearStatus() *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ClearStatus()
	return srauo
}

// SetSurveyID sets the "survey_id" field.
func (srauo *SurveyResponseAnswersUpdateOne) SetSurveyID(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ResetSurveyID()
	srauo.mutation.SetSurveyID(i)
	return srauo
}

// SetNillableSurveyID sets the "survey_id" field if the given value is not nil.
func (srauo *SurveyResponseAnswersUpdateOne) SetNillableSurveyID(i *int64) *SurveyResponseAnswersUpdateOne {
	if i != nil {
		srauo.SetSurveyID(*i)
	}
	return srauo
}

// AddSurveyID adds i to the "survey_id" field.
func (srauo *SurveyResponseAnswersUpdateOne) AddSurveyID(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.AddSurveyID(i)
	return srauo
}

// SetSurveyResponseID sets the "survey_response_id" field.
func (srauo *SurveyResponseAnswersUpdateOne) SetSurveyResponseID(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ResetSurveyResponseID()
	srauo.mutation.SetSurveyResponseID(i)
	return srauo
}

// SetNillableSurveyResponseID sets the "survey_response_id" field if the given value is not nil.
func (srauo *SurveyResponseAnswersUpdateOne) SetNillableSurveyResponseID(i *int64) *SurveyResponseAnswersUpdateOne {
	if i != nil {
		srauo.SetSurveyResponseID(*i)
	}
	return srauo
}

// AddSurveyResponseID adds i to the "survey_response_id" field.
func (srauo *SurveyResponseAnswersUpdateOne) AddSurveyResponseID(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.AddSurveyResponseID(i)
	return srauo
}

// SetSurveyQuestionID sets the "survey_question_id" field.
func (srauo *SurveyResponseAnswersUpdateOne) SetSurveyQuestionID(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ResetSurveyQuestionID()
	srauo.mutation.SetSurveyQuestionID(i)
	return srauo
}

// SetNillableSurveyQuestionID sets the "survey_question_id" field if the given value is not nil.
func (srauo *SurveyResponseAnswersUpdateOne) SetNillableSurveyQuestionID(i *int64) *SurveyResponseAnswersUpdateOne {
	if i != nil {
		srauo.SetSurveyQuestionID(*i)
	}
	return srauo
}

// AddSurveyQuestionID adds i to the "survey_question_id" field.
func (srauo *SurveyResponseAnswersUpdateOne) AddSurveyQuestionID(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.AddSurveyQuestionID(i)
	return srauo
}

// SetAnswerText sets the "answer_text" field.
func (srauo *SurveyResponseAnswersUpdateOne) SetAnswerText(s string) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.SetAnswerText(s)
	return srauo
}

// SetNillableAnswerText sets the "answer_text" field if the given value is not nil.
func (srauo *SurveyResponseAnswersUpdateOne) SetNillableAnswerText(s *string) *SurveyResponseAnswersUpdateOne {
	if s != nil {
		srauo.SetAnswerText(*s)
	}
	return srauo
}

// SetAnswerValue sets the "answer_value" field.
func (srauo *SurveyResponseAnswersUpdateOne) SetAnswerValue(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.ResetAnswerValue()
	srauo.mutation.SetAnswerValue(i)
	return srauo
}

// SetNillableAnswerValue sets the "answer_value" field if the given value is not nil.
func (srauo *SurveyResponseAnswersUpdateOne) SetNillableAnswerValue(i *int64) *SurveyResponseAnswersUpdateOne {
	if i != nil {
		srauo.SetAnswerValue(*i)
	}
	return srauo
}

// AddAnswerValue adds i to the "answer_value" field.
func (srauo *SurveyResponseAnswersUpdateOne) AddAnswerValue(i int64) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.AddAnswerValue(i)
	return srauo
}

// Mutation returns the SurveyResponseAnswersMutation object of the builder.
func (srauo *SurveyResponseAnswersUpdateOne) Mutation() *SurveyResponseAnswersMutation {
	return srauo.mutation
}

// Where appends a list predicates to the SurveyResponseAnswersUpdate builder.
func (srauo *SurveyResponseAnswersUpdateOne) Where(ps ...predicate.SurveyResponseAnswers) *SurveyResponseAnswersUpdateOne {
	srauo.mutation.Where(ps...)
	return srauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (srauo *SurveyResponseAnswersUpdateOne) Select(field string, fields ...string) *SurveyResponseAnswersUpdateOne {
	srauo.fields = append([]string{field}, fields...)
	return srauo
}

// Save executes the query and returns the updated SurveyResponseAnswers entity.
func (srauo *SurveyResponseAnswersUpdateOne) Save(ctx context.Context) (*SurveyResponseAnswers, error) {
	srauo.defaults()
	return withHooks(ctx, srauo.sqlSave, srauo.mutation, srauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (srauo *SurveyResponseAnswersUpdateOne) SaveX(ctx context.Context) *SurveyResponseAnswers {
	node, err := srauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (srauo *SurveyResponseAnswersUpdateOne) Exec(ctx context.Context) error {
	_, err := srauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srauo *SurveyResponseAnswersUpdateOne) ExecX(ctx context.Context) {
	if err := srauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srauo *SurveyResponseAnswersUpdateOne) defaults() {
	if _, ok := srauo.mutation.UpdatedAt(); !ok && !srauo.mutation.UpdatedAtCleared() {
		v := surveyresponseanswers.UpdateDefaultUpdatedAt()
		srauo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (srauo *SurveyResponseAnswersUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SurveyResponseAnswersUpdateOne {
	srauo.modifiers = append(srauo.modifiers, modifiers...)
	return srauo
}

func (srauo *SurveyResponseAnswersUpdateOne) sqlSave(ctx context.Context) (_node *SurveyResponseAnswers, err error) {
	_spec := sqlgraph.NewUpdateSpec(surveyresponseanswers.Table, surveyresponseanswers.Columns, sqlgraph.NewFieldSpec(surveyresponseanswers.FieldID, field.TypeInt64))
	id, ok := srauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SurveyResponseAnswers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := srauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, surveyresponseanswers.FieldID)
		for _, f := range fields {
			if !surveyresponseanswers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != surveyresponseanswers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := srauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if srauo.mutation.CreatedAtCleared() {
		_spec.ClearField(surveyresponseanswers.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := srauo.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyresponseanswers.FieldUpdatedAt, field.TypeTime, value)
	}
	if srauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(surveyresponseanswers.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := srauo.mutation.Delete(); ok {
		_spec.SetField(surveyresponseanswers.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.AddedDelete(); ok {
		_spec.AddField(surveyresponseanswers.FieldDelete, field.TypeInt64, value)
	}
	if srauo.mutation.DeleteCleared() {
		_spec.ClearField(surveyresponseanswers.FieldDelete, field.TypeInt64)
	}
	if value, ok := srauo.mutation.CreatedID(); ok {
		_spec.SetField(surveyresponseanswers.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.AddedCreatedID(); ok {
		_spec.AddField(surveyresponseanswers.FieldCreatedID, field.TypeInt64, value)
	}
	if srauo.mutation.CreatedIDCleared() {
		_spec.ClearField(surveyresponseanswers.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := srauo.mutation.Status(); ok {
		_spec.SetField(surveyresponseanswers.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.AddedStatus(); ok {
		_spec.AddField(surveyresponseanswers.FieldStatus, field.TypeInt64, value)
	}
	if srauo.mutation.StatusCleared() {
		_spec.ClearField(surveyresponseanswers.FieldStatus, field.TypeInt64)
	}
	if value, ok := srauo.mutation.SurveyID(); ok {
		_spec.SetField(surveyresponseanswers.FieldSurveyID, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.AddedSurveyID(); ok {
		_spec.AddField(surveyresponseanswers.FieldSurveyID, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.SurveyResponseID(); ok {
		_spec.SetField(surveyresponseanswers.FieldSurveyResponseID, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.AddedSurveyResponseID(); ok {
		_spec.AddField(surveyresponseanswers.FieldSurveyResponseID, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.SurveyQuestionID(); ok {
		_spec.SetField(surveyresponseanswers.FieldSurveyQuestionID, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.AddedSurveyQuestionID(); ok {
		_spec.AddField(surveyresponseanswers.FieldSurveyQuestionID, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.AnswerText(); ok {
		_spec.SetField(surveyresponseanswers.FieldAnswerText, field.TypeString, value)
	}
	if value, ok := srauo.mutation.AnswerValue(); ok {
		_spec.SetField(surveyresponseanswers.FieldAnswerValue, field.TypeInt64, value)
	}
	if value, ok := srauo.mutation.AddedAnswerValue(); ok {
		_spec.AddField(surveyresponseanswers.FieldAnswerValue, field.TypeInt64, value)
	}
	_spec.AddModifiers(srauo.modifiers...)
	_node = &SurveyResponseAnswers{config: srauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, srauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{surveyresponseanswers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	srauo.mutation.done = true
	return _node, nil
}
